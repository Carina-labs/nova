// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package icacontrolv1

import (
	fmt "fmt"
	_ "github.com/Carina-labs/nova/api/cosmos/base/v1beta1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_RegisteredZone                     protoreflect.MessageDescriptor
	fd_RegisteredZone_zone_id             protoreflect.FieldDescriptor
	fd_RegisteredZone_ica_connection_info protoreflect.FieldDescriptor
	fd_RegisteredZone_ica_account         protoreflect.FieldDescriptor
	fd_RegisteredZone_transfer_info       protoreflect.FieldDescriptor
	fd_RegisteredZone_validator_address   protoreflect.FieldDescriptor
	fd_RegisteredZone_base_denom          protoreflect.FieldDescriptor
	fd_RegisteredZone_sn_denom            protoreflect.FieldDescriptor
	fd_RegisteredZone_decimal             protoreflect.FieldDescriptor
	fd_RegisteredZone_max_entries         protoreflect.FieldDescriptor
)

func init() {
	file_nova_icacontrol_v1_icacontrol_proto_init()
	md_RegisteredZone = File_nova_icacontrol_v1_icacontrol_proto.Messages().ByName("RegisteredZone")
	fd_RegisteredZone_zone_id = md_RegisteredZone.Fields().ByName("zone_id")
	fd_RegisteredZone_ica_connection_info = md_RegisteredZone.Fields().ByName("ica_connection_info")
	fd_RegisteredZone_ica_account = md_RegisteredZone.Fields().ByName("ica_account")
	fd_RegisteredZone_transfer_info = md_RegisteredZone.Fields().ByName("transfer_info")
	fd_RegisteredZone_validator_address = md_RegisteredZone.Fields().ByName("validator_address")
	fd_RegisteredZone_base_denom = md_RegisteredZone.Fields().ByName("base_denom")
	fd_RegisteredZone_sn_denom = md_RegisteredZone.Fields().ByName("sn_denom")
	fd_RegisteredZone_decimal = md_RegisteredZone.Fields().ByName("decimal")
	fd_RegisteredZone_max_entries = md_RegisteredZone.Fields().ByName("max_entries")
}

var _ protoreflect.Message = (*fastReflection_RegisteredZone)(nil)

type fastReflection_RegisteredZone RegisteredZone

func (x *RegisteredZone) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RegisteredZone)(x)
}

func (x *RegisteredZone) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RegisteredZone_messageType fastReflection_RegisteredZone_messageType
var _ protoreflect.MessageType = fastReflection_RegisteredZone_messageType{}

type fastReflection_RegisteredZone_messageType struct{}

func (x fastReflection_RegisteredZone_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RegisteredZone)(nil)
}
func (x fastReflection_RegisteredZone_messageType) New() protoreflect.Message {
	return new(fastReflection_RegisteredZone)
}
func (x fastReflection_RegisteredZone_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RegisteredZone
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RegisteredZone) Descriptor() protoreflect.MessageDescriptor {
	return md_RegisteredZone
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RegisteredZone) Type() protoreflect.MessageType {
	return _fastReflection_RegisteredZone_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RegisteredZone) New() protoreflect.Message {
	return new(fastReflection_RegisteredZone)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RegisteredZone) Interface() protoreflect.ProtoMessage {
	return (*RegisteredZone)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RegisteredZone) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ZoneId != "" {
		value := protoreflect.ValueOfString(x.ZoneId)
		if !f(fd_RegisteredZone_zone_id, value) {
			return
		}
	}
	if x.IcaConnectionInfo != nil {
		value := protoreflect.ValueOfMessage(x.IcaConnectionInfo.ProtoReflect())
		if !f(fd_RegisteredZone_ica_connection_info, value) {
			return
		}
	}
	if x.IcaAccount != nil {
		value := protoreflect.ValueOfMessage(x.IcaAccount.ProtoReflect())
		if !f(fd_RegisteredZone_ica_account, value) {
			return
		}
	}
	if x.TransferInfo != nil {
		value := protoreflect.ValueOfMessage(x.TransferInfo.ProtoReflect())
		if !f(fd_RegisteredZone_transfer_info, value) {
			return
		}
	}
	if x.ValidatorAddress != "" {
		value := protoreflect.ValueOfString(x.ValidatorAddress)
		if !f(fd_RegisteredZone_validator_address, value) {
			return
		}
	}
	if x.BaseDenom != "" {
		value := protoreflect.ValueOfString(x.BaseDenom)
		if !f(fd_RegisteredZone_base_denom, value) {
			return
		}
	}
	if x.SnDenom != "" {
		value := protoreflect.ValueOfString(x.SnDenom)
		if !f(fd_RegisteredZone_sn_denom, value) {
			return
		}
	}
	if x.Decimal != int64(0) {
		value := protoreflect.ValueOfInt64(x.Decimal)
		if !f(fd_RegisteredZone_decimal, value) {
			return
		}
	}
	if x.MaxEntries != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxEntries)
		if !f(fd_RegisteredZone_max_entries, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RegisteredZone) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.icacontrol.v1.RegisteredZone.zone_id":
		return x.ZoneId != ""
	case "nova.icacontrol.v1.RegisteredZone.ica_connection_info":
		return x.IcaConnectionInfo != nil
	case "nova.icacontrol.v1.RegisteredZone.ica_account":
		return x.IcaAccount != nil
	case "nova.icacontrol.v1.RegisteredZone.transfer_info":
		return x.TransferInfo != nil
	case "nova.icacontrol.v1.RegisteredZone.validator_address":
		return x.ValidatorAddress != ""
	case "nova.icacontrol.v1.RegisteredZone.base_denom":
		return x.BaseDenom != ""
	case "nova.icacontrol.v1.RegisteredZone.sn_denom":
		return x.SnDenom != ""
	case "nova.icacontrol.v1.RegisteredZone.decimal":
		return x.Decimal != int64(0)
	case "nova.icacontrol.v1.RegisteredZone.max_entries":
		return x.MaxEntries != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.RegisteredZone"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.RegisteredZone does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegisteredZone) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.RegisteredZone.zone_id":
		x.ZoneId = ""
	case "nova.icacontrol.v1.RegisteredZone.ica_connection_info":
		x.IcaConnectionInfo = nil
	case "nova.icacontrol.v1.RegisteredZone.ica_account":
		x.IcaAccount = nil
	case "nova.icacontrol.v1.RegisteredZone.transfer_info":
		x.TransferInfo = nil
	case "nova.icacontrol.v1.RegisteredZone.validator_address":
		x.ValidatorAddress = ""
	case "nova.icacontrol.v1.RegisteredZone.base_denom":
		x.BaseDenom = ""
	case "nova.icacontrol.v1.RegisteredZone.sn_denom":
		x.SnDenom = ""
	case "nova.icacontrol.v1.RegisteredZone.decimal":
		x.Decimal = int64(0)
	case "nova.icacontrol.v1.RegisteredZone.max_entries":
		x.MaxEntries = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.RegisteredZone"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.RegisteredZone does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RegisteredZone) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.icacontrol.v1.RegisteredZone.zone_id":
		value := x.ZoneId
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.RegisteredZone.ica_connection_info":
		value := x.IcaConnectionInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.ica_account":
		value := x.IcaAccount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.transfer_info":
		value := x.TransferInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.validator_address":
		value := x.ValidatorAddress
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.RegisteredZone.base_denom":
		value := x.BaseDenom
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.RegisteredZone.sn_denom":
		value := x.SnDenom
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.RegisteredZone.decimal":
		value := x.Decimal
		return protoreflect.ValueOfInt64(value)
	case "nova.icacontrol.v1.RegisteredZone.max_entries":
		value := x.MaxEntries
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.RegisteredZone"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.RegisteredZone does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegisteredZone) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.RegisteredZone.zone_id":
		x.ZoneId = value.Interface().(string)
	case "nova.icacontrol.v1.RegisteredZone.ica_connection_info":
		x.IcaConnectionInfo = value.Message().Interface().(*IcaConnectionInfo)
	case "nova.icacontrol.v1.RegisteredZone.ica_account":
		x.IcaAccount = value.Message().Interface().(*IcaAccount)
	case "nova.icacontrol.v1.RegisteredZone.transfer_info":
		x.TransferInfo = value.Message().Interface().(*TransferConnectionInfo)
	case "nova.icacontrol.v1.RegisteredZone.validator_address":
		x.ValidatorAddress = value.Interface().(string)
	case "nova.icacontrol.v1.RegisteredZone.base_denom":
		x.BaseDenom = value.Interface().(string)
	case "nova.icacontrol.v1.RegisteredZone.sn_denom":
		x.SnDenom = value.Interface().(string)
	case "nova.icacontrol.v1.RegisteredZone.decimal":
		x.Decimal = value.Int()
	case "nova.icacontrol.v1.RegisteredZone.max_entries":
		x.MaxEntries = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.RegisteredZone"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.RegisteredZone does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegisteredZone) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.RegisteredZone.ica_connection_info":
		if x.IcaConnectionInfo == nil {
			x.IcaConnectionInfo = new(IcaConnectionInfo)
		}
		return protoreflect.ValueOfMessage(x.IcaConnectionInfo.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.ica_account":
		if x.IcaAccount == nil {
			x.IcaAccount = new(IcaAccount)
		}
		return protoreflect.ValueOfMessage(x.IcaAccount.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.transfer_info":
		if x.TransferInfo == nil {
			x.TransferInfo = new(TransferConnectionInfo)
		}
		return protoreflect.ValueOfMessage(x.TransferInfo.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.zone_id":
		panic(fmt.Errorf("field zone_id of message nova.icacontrol.v1.RegisteredZone is not mutable"))
	case "nova.icacontrol.v1.RegisteredZone.validator_address":
		panic(fmt.Errorf("field validator_address of message nova.icacontrol.v1.RegisteredZone is not mutable"))
	case "nova.icacontrol.v1.RegisteredZone.base_denom":
		panic(fmt.Errorf("field base_denom of message nova.icacontrol.v1.RegisteredZone is not mutable"))
	case "nova.icacontrol.v1.RegisteredZone.sn_denom":
		panic(fmt.Errorf("field sn_denom of message nova.icacontrol.v1.RegisteredZone is not mutable"))
	case "nova.icacontrol.v1.RegisteredZone.decimal":
		panic(fmt.Errorf("field decimal of message nova.icacontrol.v1.RegisteredZone is not mutable"))
	case "nova.icacontrol.v1.RegisteredZone.max_entries":
		panic(fmt.Errorf("field max_entries of message nova.icacontrol.v1.RegisteredZone is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.RegisteredZone"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.RegisteredZone does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RegisteredZone) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.RegisteredZone.zone_id":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.RegisteredZone.ica_connection_info":
		m := new(IcaConnectionInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.ica_account":
		m := new(IcaAccount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.transfer_info":
		m := new(TransferConnectionInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.icacontrol.v1.RegisteredZone.validator_address":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.RegisteredZone.base_denom":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.RegisteredZone.sn_denom":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.RegisteredZone.decimal":
		return protoreflect.ValueOfInt64(int64(0))
	case "nova.icacontrol.v1.RegisteredZone.max_entries":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.RegisteredZone"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.RegisteredZone does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RegisteredZone) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.icacontrol.v1.RegisteredZone", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RegisteredZone) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegisteredZone) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RegisteredZone) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RegisteredZone) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RegisteredZone)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ZoneId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IcaConnectionInfo != nil {
			l = options.Size(x.IcaConnectionInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IcaAccount != nil {
			l = options.Size(x.IcaAccount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TransferInfo != nil {
			l = options.Size(x.TransferInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ValidatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BaseDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SnDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Decimal != 0 {
			n += 1 + runtime.Sov(uint64(x.Decimal))
		}
		if x.MaxEntries != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxEntries))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RegisteredZone)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxEntries != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxEntries))
			i--
			dAtA[i] = 0x48
		}
		if x.Decimal != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Decimal))
			i--
			dAtA[i] = 0x40
		}
		if len(x.SnDenom) > 0 {
			i -= len(x.SnDenom)
			copy(dAtA[i:], x.SnDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SnDenom)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.BaseDenom) > 0 {
			i -= len(x.BaseDenom)
			copy(dAtA[i:], x.BaseDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseDenom)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ValidatorAddress) > 0 {
			i -= len(x.ValidatorAddress)
			copy(dAtA[i:], x.ValidatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorAddress)))
			i--
			dAtA[i] = 0x2a
		}
		if x.TransferInfo != nil {
			encoded, err := options.Marshal(x.TransferInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.IcaAccount != nil {
			encoded, err := options.Marshal(x.IcaAccount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.IcaConnectionInfo != nil {
			encoded, err := options.Marshal(x.IcaConnectionInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ZoneId) > 0 {
			i -= len(x.ZoneId)
			copy(dAtA[i:], x.ZoneId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZoneId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RegisteredZone)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RegisteredZone: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RegisteredZone: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZoneId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IcaConnectionInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IcaConnectionInfo == nil {
					x.IcaConnectionInfo = &IcaConnectionInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IcaConnectionInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IcaAccount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IcaAccount == nil {
					x.IcaAccount = &IcaAccount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IcaAccount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TransferInfo == nil {
					x.TransferInfo = &TransferConnectionInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TransferInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SnDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SnDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
				}
				x.Decimal = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Decimal |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
				}
				x.MaxEntries = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxEntries |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IcaAccount                    protoreflect.MessageDescriptor
	fd_IcaAccount_controller_address protoreflect.FieldDescriptor
	fd_IcaAccount_host_address       protoreflect.FieldDescriptor
)

func init() {
	file_nova_icacontrol_v1_icacontrol_proto_init()
	md_IcaAccount = File_nova_icacontrol_v1_icacontrol_proto.Messages().ByName("IcaAccount")
	fd_IcaAccount_controller_address = md_IcaAccount.Fields().ByName("controller_address")
	fd_IcaAccount_host_address = md_IcaAccount.Fields().ByName("host_address")
}

var _ protoreflect.Message = (*fastReflection_IcaAccount)(nil)

type fastReflection_IcaAccount IcaAccount

func (x *IcaAccount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IcaAccount)(x)
}

func (x *IcaAccount) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IcaAccount_messageType fastReflection_IcaAccount_messageType
var _ protoreflect.MessageType = fastReflection_IcaAccount_messageType{}

type fastReflection_IcaAccount_messageType struct{}

func (x fastReflection_IcaAccount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IcaAccount)(nil)
}
func (x fastReflection_IcaAccount_messageType) New() protoreflect.Message {
	return new(fastReflection_IcaAccount)
}
func (x fastReflection_IcaAccount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IcaAccount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IcaAccount) Descriptor() protoreflect.MessageDescriptor {
	return md_IcaAccount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IcaAccount) Type() protoreflect.MessageType {
	return _fastReflection_IcaAccount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IcaAccount) New() protoreflect.Message {
	return new(fastReflection_IcaAccount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IcaAccount) Interface() protoreflect.ProtoMessage {
	return (*IcaAccount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IcaAccount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ControllerAddress != "" {
		value := protoreflect.ValueOfString(x.ControllerAddress)
		if !f(fd_IcaAccount_controller_address, value) {
			return
		}
	}
	if x.HostAddress != "" {
		value := protoreflect.ValueOfString(x.HostAddress)
		if !f(fd_IcaAccount_host_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IcaAccount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaAccount.controller_address":
		return x.ControllerAddress != ""
	case "nova.icacontrol.v1.IcaAccount.host_address":
		return x.HostAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaAccount"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaAccount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaAccount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaAccount.controller_address":
		x.ControllerAddress = ""
	case "nova.icacontrol.v1.IcaAccount.host_address":
		x.HostAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaAccount"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaAccount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IcaAccount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.icacontrol.v1.IcaAccount.controller_address":
		value := x.ControllerAddress
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.IcaAccount.host_address":
		value := x.HostAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaAccount"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaAccount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaAccount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaAccount.controller_address":
		x.ControllerAddress = value.Interface().(string)
	case "nova.icacontrol.v1.IcaAccount.host_address":
		x.HostAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaAccount"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaAccount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaAccount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaAccount.controller_address":
		panic(fmt.Errorf("field controller_address of message nova.icacontrol.v1.IcaAccount is not mutable"))
	case "nova.icacontrol.v1.IcaAccount.host_address":
		panic(fmt.Errorf("field host_address of message nova.icacontrol.v1.IcaAccount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaAccount"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaAccount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IcaAccount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaAccount.controller_address":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.IcaAccount.host_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaAccount"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaAccount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IcaAccount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.icacontrol.v1.IcaAccount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IcaAccount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaAccount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IcaAccount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IcaAccount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IcaAccount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ControllerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HostAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IcaAccount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.HostAddress) > 0 {
			i -= len(x.HostAddress)
			copy(dAtA[i:], x.HostAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HostAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ControllerAddress) > 0 {
			i -= len(x.ControllerAddress)
			copy(dAtA[i:], x.ControllerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ControllerAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IcaAccount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IcaAccount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IcaAccount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ControllerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HostAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IcaConnectionInfo               protoreflect.MessageDescriptor
	fd_IcaConnectionInfo_connection_id protoreflect.FieldDescriptor
	fd_IcaConnectionInfo_port_id       protoreflect.FieldDescriptor
)

func init() {
	file_nova_icacontrol_v1_icacontrol_proto_init()
	md_IcaConnectionInfo = File_nova_icacontrol_v1_icacontrol_proto.Messages().ByName("IcaConnectionInfo")
	fd_IcaConnectionInfo_connection_id = md_IcaConnectionInfo.Fields().ByName("connection_id")
	fd_IcaConnectionInfo_port_id = md_IcaConnectionInfo.Fields().ByName("port_id")
}

var _ protoreflect.Message = (*fastReflection_IcaConnectionInfo)(nil)

type fastReflection_IcaConnectionInfo IcaConnectionInfo

func (x *IcaConnectionInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IcaConnectionInfo)(x)
}

func (x *IcaConnectionInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IcaConnectionInfo_messageType fastReflection_IcaConnectionInfo_messageType
var _ protoreflect.MessageType = fastReflection_IcaConnectionInfo_messageType{}

type fastReflection_IcaConnectionInfo_messageType struct{}

func (x fastReflection_IcaConnectionInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IcaConnectionInfo)(nil)
}
func (x fastReflection_IcaConnectionInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_IcaConnectionInfo)
}
func (x fastReflection_IcaConnectionInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IcaConnectionInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IcaConnectionInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_IcaConnectionInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IcaConnectionInfo) Type() protoreflect.MessageType {
	return _fastReflection_IcaConnectionInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IcaConnectionInfo) New() protoreflect.Message {
	return new(fastReflection_IcaConnectionInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IcaConnectionInfo) Interface() protoreflect.ProtoMessage {
	return (*IcaConnectionInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IcaConnectionInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_IcaConnectionInfo_connection_id, value) {
			return
		}
	}
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_IcaConnectionInfo_port_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IcaConnectionInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaConnectionInfo.connection_id":
		return x.ConnectionId != ""
	case "nova.icacontrol.v1.IcaConnectionInfo.port_id":
		return x.PortId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaConnectionInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaConnectionInfo.connection_id":
		x.ConnectionId = ""
	case "nova.icacontrol.v1.IcaConnectionInfo.port_id":
		x.PortId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IcaConnectionInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.icacontrol.v1.IcaConnectionInfo.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.IcaConnectionInfo.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaConnectionInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaConnectionInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaConnectionInfo.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "nova.icacontrol.v1.IcaConnectionInfo.port_id":
		x.PortId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaConnectionInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaConnectionInfo.connection_id":
		panic(fmt.Errorf("field connection_id of message nova.icacontrol.v1.IcaConnectionInfo is not mutable"))
	case "nova.icacontrol.v1.IcaConnectionInfo.port_id":
		panic(fmt.Errorf("field port_id of message nova.icacontrol.v1.IcaConnectionInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IcaConnectionInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.IcaConnectionInfo.connection_id":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.IcaConnectionInfo.port_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.IcaConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.IcaConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IcaConnectionInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.icacontrol.v1.IcaConnectionInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IcaConnectionInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IcaConnectionInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IcaConnectionInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IcaConnectionInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IcaConnectionInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IcaConnectionInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IcaConnectionInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IcaConnectionInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IcaConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TransferConnectionInfo            protoreflect.MessageDescriptor
	fd_TransferConnectionInfo_channel_id protoreflect.FieldDescriptor
	fd_TransferConnectionInfo_port_id    protoreflect.FieldDescriptor
)

func init() {
	file_nova_icacontrol_v1_icacontrol_proto_init()
	md_TransferConnectionInfo = File_nova_icacontrol_v1_icacontrol_proto.Messages().ByName("TransferConnectionInfo")
	fd_TransferConnectionInfo_channel_id = md_TransferConnectionInfo.Fields().ByName("channel_id")
	fd_TransferConnectionInfo_port_id = md_TransferConnectionInfo.Fields().ByName("port_id")
}

var _ protoreflect.Message = (*fastReflection_TransferConnectionInfo)(nil)

type fastReflection_TransferConnectionInfo TransferConnectionInfo

func (x *TransferConnectionInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TransferConnectionInfo)(x)
}

func (x *TransferConnectionInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TransferConnectionInfo_messageType fastReflection_TransferConnectionInfo_messageType
var _ protoreflect.MessageType = fastReflection_TransferConnectionInfo_messageType{}

type fastReflection_TransferConnectionInfo_messageType struct{}

func (x fastReflection_TransferConnectionInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TransferConnectionInfo)(nil)
}
func (x fastReflection_TransferConnectionInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_TransferConnectionInfo)
}
func (x fastReflection_TransferConnectionInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TransferConnectionInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TransferConnectionInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_TransferConnectionInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TransferConnectionInfo) Type() protoreflect.MessageType {
	return _fastReflection_TransferConnectionInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TransferConnectionInfo) New() protoreflect.Message {
	return new(fastReflection_TransferConnectionInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TransferConnectionInfo) Interface() protoreflect.ProtoMessage {
	return (*TransferConnectionInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TransferConnectionInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ChannelId != "" {
		value := protoreflect.ValueOfString(x.ChannelId)
		if !f(fd_TransferConnectionInfo_channel_id, value) {
			return
		}
	}
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_TransferConnectionInfo_port_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TransferConnectionInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.icacontrol.v1.TransferConnectionInfo.channel_id":
		return x.ChannelId != ""
	case "nova.icacontrol.v1.TransferConnectionInfo.port_id":
		return x.PortId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.TransferConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.TransferConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TransferConnectionInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.TransferConnectionInfo.channel_id":
		x.ChannelId = ""
	case "nova.icacontrol.v1.TransferConnectionInfo.port_id":
		x.PortId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.TransferConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.TransferConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TransferConnectionInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.icacontrol.v1.TransferConnectionInfo.channel_id":
		value := x.ChannelId
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.TransferConnectionInfo.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.TransferConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.TransferConnectionInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TransferConnectionInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.TransferConnectionInfo.channel_id":
		x.ChannelId = value.Interface().(string)
	case "nova.icacontrol.v1.TransferConnectionInfo.port_id":
		x.PortId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.TransferConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.TransferConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TransferConnectionInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.TransferConnectionInfo.channel_id":
		panic(fmt.Errorf("field channel_id of message nova.icacontrol.v1.TransferConnectionInfo is not mutable"))
	case "nova.icacontrol.v1.TransferConnectionInfo.port_id":
		panic(fmt.Errorf("field port_id of message nova.icacontrol.v1.TransferConnectionInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.TransferConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.TransferConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TransferConnectionInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.TransferConnectionInfo.channel_id":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.TransferConnectionInfo.port_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.TransferConnectionInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.TransferConnectionInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TransferConnectionInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.icacontrol.v1.TransferConnectionInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TransferConnectionInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TransferConnectionInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TransferConnectionInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TransferConnectionInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TransferConnectionInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TransferConnectionInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ChannelId) > 0 {
			i -= len(x.ChannelId)
			copy(dAtA[i:], x.ChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChannelId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TransferConnectionInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TransferConnectionInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TransferConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ControllerAddressInfo_2_list)(nil)

type _ControllerAddressInfo_2_list struct {
	list *[]string
}

func (x *_ControllerAddressInfo_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ControllerAddressInfo_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ControllerAddressInfo_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ControllerAddressInfo_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ControllerAddressInfo_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ControllerAddressInfo at list field ControllerAddress as it is not of Message kind"))
}

func (x *_ControllerAddressInfo_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ControllerAddressInfo_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ControllerAddressInfo_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ControllerAddressInfo                    protoreflect.MessageDescriptor
	fd_ControllerAddressInfo_zone_id            protoreflect.FieldDescriptor
	fd_ControllerAddressInfo_controller_address protoreflect.FieldDescriptor
)

func init() {
	file_nova_icacontrol_v1_icacontrol_proto_init()
	md_ControllerAddressInfo = File_nova_icacontrol_v1_icacontrol_proto.Messages().ByName("ControllerAddressInfo")
	fd_ControllerAddressInfo_zone_id = md_ControllerAddressInfo.Fields().ByName("zone_id")
	fd_ControllerAddressInfo_controller_address = md_ControllerAddressInfo.Fields().ByName("controller_address")
}

var _ protoreflect.Message = (*fastReflection_ControllerAddressInfo)(nil)

type fastReflection_ControllerAddressInfo ControllerAddressInfo

func (x *ControllerAddressInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ControllerAddressInfo)(x)
}

func (x *ControllerAddressInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ControllerAddressInfo_messageType fastReflection_ControllerAddressInfo_messageType
var _ protoreflect.MessageType = fastReflection_ControllerAddressInfo_messageType{}

type fastReflection_ControllerAddressInfo_messageType struct{}

func (x fastReflection_ControllerAddressInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ControllerAddressInfo)(nil)
}
func (x fastReflection_ControllerAddressInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_ControllerAddressInfo)
}
func (x fastReflection_ControllerAddressInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ControllerAddressInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ControllerAddressInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_ControllerAddressInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ControllerAddressInfo) Type() protoreflect.MessageType {
	return _fastReflection_ControllerAddressInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ControllerAddressInfo) New() protoreflect.Message {
	return new(fastReflection_ControllerAddressInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ControllerAddressInfo) Interface() protoreflect.ProtoMessage {
	return (*ControllerAddressInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ControllerAddressInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ZoneId != "" {
		value := protoreflect.ValueOfString(x.ZoneId)
		if !f(fd_ControllerAddressInfo_zone_id, value) {
			return
		}
	}
	if len(x.ControllerAddress) != 0 {
		value := protoreflect.ValueOfList(&_ControllerAddressInfo_2_list{list: &x.ControllerAddress})
		if !f(fd_ControllerAddressInfo_controller_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ControllerAddressInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.icacontrol.v1.ControllerAddressInfo.zone_id":
		return x.ZoneId != ""
	case "nova.icacontrol.v1.ControllerAddressInfo.controller_address":
		return len(x.ControllerAddress) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.ControllerAddressInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.ControllerAddressInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ControllerAddressInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.ControllerAddressInfo.zone_id":
		x.ZoneId = ""
	case "nova.icacontrol.v1.ControllerAddressInfo.controller_address":
		x.ControllerAddress = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.ControllerAddressInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.ControllerAddressInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ControllerAddressInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.icacontrol.v1.ControllerAddressInfo.zone_id":
		value := x.ZoneId
		return protoreflect.ValueOfString(value)
	case "nova.icacontrol.v1.ControllerAddressInfo.controller_address":
		if len(x.ControllerAddress) == 0 {
			return protoreflect.ValueOfList(&_ControllerAddressInfo_2_list{})
		}
		listValue := &_ControllerAddressInfo_2_list{list: &x.ControllerAddress}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.ControllerAddressInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.ControllerAddressInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ControllerAddressInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.icacontrol.v1.ControllerAddressInfo.zone_id":
		x.ZoneId = value.Interface().(string)
	case "nova.icacontrol.v1.ControllerAddressInfo.controller_address":
		lv := value.List()
		clv := lv.(*_ControllerAddressInfo_2_list)
		x.ControllerAddress = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.ControllerAddressInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.ControllerAddressInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ControllerAddressInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.ControllerAddressInfo.controller_address":
		if x.ControllerAddress == nil {
			x.ControllerAddress = []string{}
		}
		value := &_ControllerAddressInfo_2_list{list: &x.ControllerAddress}
		return protoreflect.ValueOfList(value)
	case "nova.icacontrol.v1.ControllerAddressInfo.zone_id":
		panic(fmt.Errorf("field zone_id of message nova.icacontrol.v1.ControllerAddressInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.ControllerAddressInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.ControllerAddressInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ControllerAddressInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.icacontrol.v1.ControllerAddressInfo.zone_id":
		return protoreflect.ValueOfString("")
	case "nova.icacontrol.v1.ControllerAddressInfo.controller_address":
		list := []string{}
		return protoreflect.ValueOfList(&_ControllerAddressInfo_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.icacontrol.v1.ControllerAddressInfo"))
		}
		panic(fmt.Errorf("message nova.icacontrol.v1.ControllerAddressInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ControllerAddressInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.icacontrol.v1.ControllerAddressInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ControllerAddressInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ControllerAddressInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ControllerAddressInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ControllerAddressInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ControllerAddressInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ZoneId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ControllerAddress) > 0 {
			for _, s := range x.ControllerAddress {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ControllerAddressInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ControllerAddress) > 0 {
			for iNdEx := len(x.ControllerAddress) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ControllerAddress[iNdEx])
				copy(dAtA[i:], x.ControllerAddress[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ControllerAddress[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.ZoneId) > 0 {
			i -= len(x.ZoneId)
			copy(dAtA[i:], x.ZoneId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZoneId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ControllerAddressInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ControllerAddressInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ControllerAddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZoneId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ControllerAddress = append(x.ControllerAddress, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: nova/icacontrol/v1/icacontrol.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisteredZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId            string                  `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	IcaConnectionInfo *IcaConnectionInfo      `protobuf:"bytes,2,opt,name=ica_connection_info,json=icaConnectionInfo,proto3" json:"ica_connection_info,omitempty"`
	IcaAccount        *IcaAccount             `protobuf:"bytes,3,opt,name=ica_account,json=icaAccount,proto3" json:"ica_account,omitempty"`
	TransferInfo      *TransferConnectionInfo `protobuf:"bytes,4,opt,name=transfer_info,json=transferInfo,proto3" json:"transfer_info,omitempty"`
	ValidatorAddress  string                  `protobuf:"bytes,5,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	BaseDenom         string                  `protobuf:"bytes,6,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	SnDenom           string                  `protobuf:"bytes,7,opt,name=sn_denom,json=snDenom,proto3" json:"sn_denom,omitempty"`
	Decimal           int64                   `protobuf:"varint,8,opt,name=decimal,proto3" json:"decimal,omitempty"`
	MaxEntries        int64                   `protobuf:"varint,9,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
}

func (x *RegisteredZone) Reset() {
	*x = RegisteredZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredZone) ProtoMessage() {}

// Deprecated: Use RegisteredZone.ProtoReflect.Descriptor instead.
func (*RegisteredZone) Descriptor() ([]byte, []int) {
	return file_nova_icacontrol_v1_icacontrol_proto_rawDescGZIP(), []int{0}
}

func (x *RegisteredZone) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *RegisteredZone) GetIcaConnectionInfo() *IcaConnectionInfo {
	if x != nil {
		return x.IcaConnectionInfo
	}
	return nil
}

func (x *RegisteredZone) GetIcaAccount() *IcaAccount {
	if x != nil {
		return x.IcaAccount
	}
	return nil
}

func (x *RegisteredZone) GetTransferInfo() *TransferConnectionInfo {
	if x != nil {
		return x.TransferInfo
	}
	return nil
}

func (x *RegisteredZone) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *RegisteredZone) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *RegisteredZone) GetSnDenom() string {
	if x != nil {
		return x.SnDenom
	}
	return ""
}

func (x *RegisteredZone) GetDecimal() int64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *RegisteredZone) GetMaxEntries() int64 {
	if x != nil {
		return x.MaxEntries
	}
	return 0
}

type IcaAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerAddress string `protobuf:"bytes,1,opt,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
	HostAddress       string `protobuf:"bytes,2,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty"`
}

func (x *IcaAccount) Reset() {
	*x = IcaAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcaAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcaAccount) ProtoMessage() {}

// Deprecated: Use IcaAccount.ProtoReflect.Descriptor instead.
func (*IcaAccount) Descriptor() ([]byte, []int) {
	return file_nova_icacontrol_v1_icacontrol_proto_rawDescGZIP(), []int{1}
}

func (x *IcaAccount) GetControllerAddress() string {
	if x != nil {
		return x.ControllerAddress
	}
	return ""
}

func (x *IcaAccount) GetHostAddress() string {
	if x != nil {
		return x.HostAddress
	}
	return ""
}

//zone name, connection id, portID(owner address)
type IcaConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	PortId       string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *IcaConnectionInfo) Reset() {
	*x = IcaConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcaConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcaConnectionInfo) ProtoMessage() {}

// Deprecated: Use IcaConnectionInfo.ProtoReflect.Descriptor instead.
func (*IcaConnectionInfo) Descriptor() ([]byte, []int) {
	return file_nova_icacontrol_v1_icacontrol_proto_rawDescGZIP(), []int{2}
}

func (x *IcaConnectionInfo) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *IcaConnectionInfo) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

//transfer connection info
type TransferConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *TransferConnectionInfo) Reset() {
	*x = TransferConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferConnectionInfo) ProtoMessage() {}

// Deprecated: Use TransferConnectionInfo.ProtoReflect.Descriptor instead.
func (*TransferConnectionInfo) Descriptor() ([]byte, []int) {
	return file_nova_icacontrol_v1_icacontrol_proto_rawDescGZIP(), []int{3}
}

func (x *TransferConnectionInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *TransferConnectionInfo) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

type ControllerAddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId            string   `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ControllerAddress []string `protobuf:"bytes,2,rep,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
}

func (x *ControllerAddressInfo) Reset() {
	*x = ControllerAddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_icacontrol_v1_icacontrol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerAddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerAddressInfo) ProtoMessage() {}

// Deprecated: Use ControllerAddressInfo.ProtoReflect.Descriptor instead.
func (*ControllerAddressInfo) Descriptor() ([]byte, []int) {
	return file_nova_icacontrol_v1_icacontrol_proto_rawDescGZIP(), []int{4}
}

func (x *ControllerAddressInfo) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *ControllerAddressInfo) GetControllerAddress() []string {
	if x != nil {
		return x.ControllerAddress
	}
	return nil
}

var File_nova_icacontrol_v1_icacontrol_proto protoreflect.FileDescriptor

var file_nova_icacontrol_v1_icacontrol_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x69, 0x63, 0x61, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x03, 0x0a, 0x0e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x69, 0x63, 0x61, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x69, 0x63, 0x61, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x0b, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x63, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0a, 0x69, 0x63, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x69, 0x63, 0x61,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x49, 0x63, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x51, 0x0a, 0x11, 0x49, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0xd4, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x42, 0x0f, 0x49, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x61, 0x72, 0x69, 0x6e, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6e, 0x6f,
	0x76, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x69, 0x63, 0x61, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x49, 0x58, 0xaa, 0x02, 0x12, 0x4e,
	0x6f, 0x76, 0x61, 0x2e, 0x49, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x12, 0x4e, 0x6f, 0x76, 0x61, 0x5c, 0x49, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x4e, 0x6f, 0x76, 0x61, 0x5c, 0x49, 0x63,
	0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x4e, 0x6f, 0x76, 0x61, 0x3a, 0x3a,
	0x49, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nova_icacontrol_v1_icacontrol_proto_rawDescOnce sync.Once
	file_nova_icacontrol_v1_icacontrol_proto_rawDescData = file_nova_icacontrol_v1_icacontrol_proto_rawDesc
)

func file_nova_icacontrol_v1_icacontrol_proto_rawDescGZIP() []byte {
	file_nova_icacontrol_v1_icacontrol_proto_rawDescOnce.Do(func() {
		file_nova_icacontrol_v1_icacontrol_proto_rawDescData = protoimpl.X.CompressGZIP(file_nova_icacontrol_v1_icacontrol_proto_rawDescData)
	})
	return file_nova_icacontrol_v1_icacontrol_proto_rawDescData
}

var file_nova_icacontrol_v1_icacontrol_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nova_icacontrol_v1_icacontrol_proto_goTypes = []interface{}{
	(*RegisteredZone)(nil),         // 0: nova.icacontrol.v1.RegisteredZone
	(*IcaAccount)(nil),             // 1: nova.icacontrol.v1.IcaAccount
	(*IcaConnectionInfo)(nil),      // 2: nova.icacontrol.v1.IcaConnectionInfo
	(*TransferConnectionInfo)(nil), // 3: nova.icacontrol.v1.TransferConnectionInfo
	(*ControllerAddressInfo)(nil),  // 4: nova.icacontrol.v1.ControllerAddressInfo
}
var file_nova_icacontrol_v1_icacontrol_proto_depIdxs = []int32{
	2, // 0: nova.icacontrol.v1.RegisteredZone.ica_connection_info:type_name -> nova.icacontrol.v1.IcaConnectionInfo
	1, // 1: nova.icacontrol.v1.RegisteredZone.ica_account:type_name -> nova.icacontrol.v1.IcaAccount
	3, // 2: nova.icacontrol.v1.RegisteredZone.transfer_info:type_name -> nova.icacontrol.v1.TransferConnectionInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_nova_icacontrol_v1_icacontrol_proto_init() }
func file_nova_icacontrol_v1_icacontrol_proto_init() {
	if File_nova_icacontrol_v1_icacontrol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nova_icacontrol_v1_icacontrol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_icacontrol_v1_icacontrol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcaAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_icacontrol_v1_icacontrol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcaConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_icacontrol_v1_icacontrol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_icacontrol_v1_icacontrol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerAddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nova_icacontrol_v1_icacontrol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nova_icacontrol_v1_icacontrol_proto_goTypes,
		DependencyIndexes: file_nova_icacontrol_v1_icacontrol_proto_depIdxs,
		MessageInfos:      file_nova_icacontrol_v1_icacontrol_proto_msgTypes,
	}.Build()
	File_nova_icacontrol_v1_icacontrol_proto = out.File
	file_nova_icacontrol_v1_icacontrol_proto_rawDesc = nil
	file_nova_icacontrol_v1_icacontrol_proto_goTypes = nil
	file_nova_icacontrol_v1_icacontrol_proto_depIdxs = nil
}
