// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package galv1

import (
	fmt "fmt"
	v1beta1 "github.com/Carina-labs/nova/api/cosmos/base/v1beta1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.List = (*_DepositRecord_3_list)(nil)

type _DepositRecord_3_list struct {
	list *[]*DepositRecordContent
}

func (x *_DepositRecord_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DepositRecord_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DepositRecord_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DepositRecordContent)
	(*x.list)[i] = concreteValue
}

func (x *_DepositRecord_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DepositRecordContent)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DepositRecord_3_list) AppendMutable() protoreflect.Value {
	v := new(DepositRecordContent)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DepositRecord_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DepositRecord_3_list) NewElement() protoreflect.Value {
	v := new(DepositRecordContent)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DepositRecord_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DepositRecord           protoreflect.MessageDescriptor
	fd_DepositRecord_zone_id   protoreflect.FieldDescriptor
	fd_DepositRecord_depositor protoreflect.FieldDescriptor
	fd_DepositRecord_records   protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_DepositRecord = File_nova_gal_v1_gal_proto.Messages().ByName("DepositRecord")
	fd_DepositRecord_zone_id = md_DepositRecord.Fields().ByName("zone_id")
	fd_DepositRecord_depositor = md_DepositRecord.Fields().ByName("depositor")
	fd_DepositRecord_records = md_DepositRecord.Fields().ByName("records")
}

var _ protoreflect.Message = (*fastReflection_DepositRecord)(nil)

type fastReflection_DepositRecord DepositRecord

func (x *DepositRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DepositRecord)(x)
}

func (x *DepositRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DepositRecord_messageType fastReflection_DepositRecord_messageType
var _ protoreflect.MessageType = fastReflection_DepositRecord_messageType{}

type fastReflection_DepositRecord_messageType struct{}

func (x fastReflection_DepositRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DepositRecord)(nil)
}
func (x fastReflection_DepositRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_DepositRecord)
}
func (x fastReflection_DepositRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DepositRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DepositRecord) Type() protoreflect.MessageType {
	return _fastReflection_DepositRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DepositRecord) New() protoreflect.Message {
	return new(fastReflection_DepositRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DepositRecord) Interface() protoreflect.ProtoMessage {
	return (*DepositRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DepositRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ZoneId != "" {
		value := protoreflect.ValueOfString(x.ZoneId)
		if !f(fd_DepositRecord_zone_id, value) {
			return
		}
	}
	if x.Depositor != "" {
		value := protoreflect.ValueOfString(x.Depositor)
		if !f(fd_DepositRecord_depositor, value) {
			return
		}
	}
	if len(x.Records) != 0 {
		value := protoreflect.ValueOfList(&_DepositRecord_3_list{list: &x.Records})
		if !f(fd_DepositRecord_records, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DepositRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecord.zone_id":
		return x.ZoneId != ""
	case "nova.gal.v1.DepositRecord.depositor":
		return x.Depositor != ""
	case "nova.gal.v1.DepositRecord.records":
		return len(x.Records) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecord.zone_id":
		x.ZoneId = ""
	case "nova.gal.v1.DepositRecord.depositor":
		x.Depositor = ""
	case "nova.gal.v1.DepositRecord.records":
		x.Records = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DepositRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.DepositRecord.zone_id":
		value := x.ZoneId
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.DepositRecord.depositor":
		value := x.Depositor
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.DepositRecord.records":
		if len(x.Records) == 0 {
			return protoreflect.ValueOfList(&_DepositRecord_3_list{})
		}
		listValue := &_DepositRecord_3_list{list: &x.Records}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecord.zone_id":
		x.ZoneId = value.Interface().(string)
	case "nova.gal.v1.DepositRecord.depositor":
		x.Depositor = value.Interface().(string)
	case "nova.gal.v1.DepositRecord.records":
		lv := value.List()
		clv := lv.(*_DepositRecord_3_list)
		x.Records = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecord.records":
		if x.Records == nil {
			x.Records = []*DepositRecordContent{}
		}
		value := &_DepositRecord_3_list{list: &x.Records}
		return protoreflect.ValueOfList(value)
	case "nova.gal.v1.DepositRecord.zone_id":
		panic(fmt.Errorf("field zone_id of message nova.gal.v1.DepositRecord is not mutable"))
	case "nova.gal.v1.DepositRecord.depositor":
		panic(fmt.Errorf("field depositor of message nova.gal.v1.DepositRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DepositRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecord.zone_id":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.DepositRecord.depositor":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.DepositRecord.records":
		list := []*DepositRecordContent{}
		return protoreflect.ValueOfList(&_DepositRecord_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DepositRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.DepositRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DepositRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DepositRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DepositRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DepositRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ZoneId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Depositor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Records) > 0 {
			for _, e := range x.Records {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DepositRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Records) > 0 {
			for iNdEx := len(x.Records) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Records[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Depositor) > 0 {
			i -= len(x.Depositor)
			copy(dAtA[i:], x.Depositor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Depositor)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ZoneId) > 0 {
			i -= len(x.ZoneId)
			copy(dAtA[i:], x.ZoneId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZoneId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DepositRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZoneId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Depositor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Records = append(x.Records, &DepositRecordContent{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Records[len(x.Records)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DepositRecordContent         protoreflect.MessageDescriptor
	fd_DepositRecordContent_claimer protoreflect.FieldDescriptor
	fd_DepositRecordContent_amount  protoreflect.FieldDescriptor
	fd_DepositRecordContent_state   protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_DepositRecordContent = File_nova_gal_v1_gal_proto.Messages().ByName("DepositRecordContent")
	fd_DepositRecordContent_claimer = md_DepositRecordContent.Fields().ByName("claimer")
	fd_DepositRecordContent_amount = md_DepositRecordContent.Fields().ByName("amount")
	fd_DepositRecordContent_state = md_DepositRecordContent.Fields().ByName("state")
}

var _ protoreflect.Message = (*fastReflection_DepositRecordContent)(nil)

type fastReflection_DepositRecordContent DepositRecordContent

func (x *DepositRecordContent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DepositRecordContent)(x)
}

func (x *DepositRecordContent) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DepositRecordContent_messageType fastReflection_DepositRecordContent_messageType
var _ protoreflect.MessageType = fastReflection_DepositRecordContent_messageType{}

type fastReflection_DepositRecordContent_messageType struct{}

func (x fastReflection_DepositRecordContent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DepositRecordContent)(nil)
}
func (x fastReflection_DepositRecordContent_messageType) New() protoreflect.Message {
	return new(fastReflection_DepositRecordContent)
}
func (x fastReflection_DepositRecordContent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositRecordContent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DepositRecordContent) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositRecordContent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DepositRecordContent) Type() protoreflect.MessageType {
	return _fastReflection_DepositRecordContent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DepositRecordContent) New() protoreflect.Message {
	return new(fastReflection_DepositRecordContent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DepositRecordContent) Interface() protoreflect.ProtoMessage {
	return (*DepositRecordContent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DepositRecordContent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Claimer != "" {
		value := protoreflect.ValueOfString(x.Claimer)
		if !f(fd_DepositRecordContent_claimer, value) {
			return
		}
	}
	if x.Amount != nil {
		value := protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
		if !f(fd_DepositRecordContent_amount, value) {
			return
		}
	}
	if x.State != int64(0) {
		value := protoreflect.ValueOfInt64(x.State)
		if !f(fd_DepositRecordContent_state, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DepositRecordContent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecordContent.claimer":
		return x.Claimer != ""
	case "nova.gal.v1.DepositRecordContent.amount":
		return x.Amount != nil
	case "nova.gal.v1.DepositRecordContent.state":
		return x.State != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecordContent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecordContent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecordContent.claimer":
		x.Claimer = ""
	case "nova.gal.v1.DepositRecordContent.amount":
		x.Amount = nil
	case "nova.gal.v1.DepositRecordContent.state":
		x.State = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecordContent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DepositRecordContent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.DepositRecordContent.claimer":
		value := x.Claimer
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.DepositRecordContent.amount":
		value := x.Amount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.gal.v1.DepositRecordContent.state":
		value := x.State
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecordContent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecordContent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecordContent.claimer":
		x.Claimer = value.Interface().(string)
	case "nova.gal.v1.DepositRecordContent.amount":
		x.Amount = value.Message().Interface().(*v1beta1.Coin)
	case "nova.gal.v1.DepositRecordContent.state":
		x.State = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecordContent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecordContent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecordContent.amount":
		if x.Amount == nil {
			x.Amount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
	case "nova.gal.v1.DepositRecordContent.claimer":
		panic(fmt.Errorf("field claimer of message nova.gal.v1.DepositRecordContent is not mutable"))
	case "nova.gal.v1.DepositRecordContent.state":
		panic(fmt.Errorf("field state of message nova.gal.v1.DepositRecordContent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecordContent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DepositRecordContent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DepositRecordContent.claimer":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.DepositRecordContent.amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.gal.v1.DepositRecordContent.state":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DepositRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DepositRecordContent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DepositRecordContent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.DepositRecordContent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DepositRecordContent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRecordContent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DepositRecordContent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DepositRecordContent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DepositRecordContent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Claimer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != nil {
			l = options.Size(x.Amount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DepositRecordContent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x18
		}
		if x.Amount != nil {
			encoded, err := options.Marshal(x.Amount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Claimer) > 0 {
			i -= len(x.Claimer)
			copy(dAtA[i:], x.Claimer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Claimer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DepositRecordContent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositRecordContent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Claimer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Amount == nil {
					x.Amount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.Map = (*_DelegateRecord_3_map)(nil)

type _DelegateRecord_3_map struct {
	m *map[uint64]*DelegateRecordContent
}

func (x *_DelegateRecord_3_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_DelegateRecord_3_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfUint64(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_DelegateRecord_3_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Uint()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_DelegateRecord_3_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_DelegateRecord_3_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DelegateRecord_3_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DelegateRecordContent)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_DelegateRecord_3_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(DelegateRecordContent)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_DelegateRecord_3_map) NewValue() protoreflect.Value {
	v := new(DelegateRecordContent)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DelegateRecord_3_map) IsValid() bool {
	return x.m != nil
}

var (
	md_DelegateRecord         protoreflect.MessageDescriptor
	fd_DelegateRecord_zone_id protoreflect.FieldDescriptor
	fd_DelegateRecord_claimer protoreflect.FieldDescriptor
	fd_DelegateRecord_records protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_DelegateRecord = File_nova_gal_v1_gal_proto.Messages().ByName("DelegateRecord")
	fd_DelegateRecord_zone_id = md_DelegateRecord.Fields().ByName("zone_id")
	fd_DelegateRecord_claimer = md_DelegateRecord.Fields().ByName("claimer")
	fd_DelegateRecord_records = md_DelegateRecord.Fields().ByName("records")
}

var _ protoreflect.Message = (*fastReflection_DelegateRecord)(nil)

type fastReflection_DelegateRecord DelegateRecord

func (x *DelegateRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DelegateRecord)(x)
}

func (x *DelegateRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DelegateRecord_messageType fastReflection_DelegateRecord_messageType
var _ protoreflect.MessageType = fastReflection_DelegateRecord_messageType{}

type fastReflection_DelegateRecord_messageType struct{}

func (x fastReflection_DelegateRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DelegateRecord)(nil)
}
func (x fastReflection_DelegateRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_DelegateRecord)
}
func (x fastReflection_DelegateRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegateRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DelegateRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegateRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DelegateRecord) Type() protoreflect.MessageType {
	return _fastReflection_DelegateRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DelegateRecord) New() protoreflect.Message {
	return new(fastReflection_DelegateRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DelegateRecord) Interface() protoreflect.ProtoMessage {
	return (*DelegateRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DelegateRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ZoneId != "" {
		value := protoreflect.ValueOfString(x.ZoneId)
		if !f(fd_DelegateRecord_zone_id, value) {
			return
		}
	}
	if x.Claimer != "" {
		value := protoreflect.ValueOfString(x.Claimer)
		if !f(fd_DelegateRecord_claimer, value) {
			return
		}
	}
	if len(x.Records) != 0 {
		value := protoreflect.ValueOfMap(&_DelegateRecord_3_map{m: &x.Records})
		if !f(fd_DelegateRecord_records, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DelegateRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecord.zone_id":
		return x.ZoneId != ""
	case "nova.gal.v1.DelegateRecord.claimer":
		return x.Claimer != ""
	case "nova.gal.v1.DelegateRecord.records":
		return len(x.Records) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecord.zone_id":
		x.ZoneId = ""
	case "nova.gal.v1.DelegateRecord.claimer":
		x.Claimer = ""
	case "nova.gal.v1.DelegateRecord.records":
		x.Records = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DelegateRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.DelegateRecord.zone_id":
		value := x.ZoneId
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.DelegateRecord.claimer":
		value := x.Claimer
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.DelegateRecord.records":
		if len(x.Records) == 0 {
			return protoreflect.ValueOfMap(&_DelegateRecord_3_map{})
		}
		mapValue := &_DelegateRecord_3_map{m: &x.Records}
		return protoreflect.ValueOfMap(mapValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecord.zone_id":
		x.ZoneId = value.Interface().(string)
	case "nova.gal.v1.DelegateRecord.claimer":
		x.Claimer = value.Interface().(string)
	case "nova.gal.v1.DelegateRecord.records":
		mv := value.Map()
		cmv := mv.(*_DelegateRecord_3_map)
		x.Records = *cmv.m
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecord.records":
		if x.Records == nil {
			x.Records = make(map[uint64]*DelegateRecordContent)
		}
		value := &_DelegateRecord_3_map{m: &x.Records}
		return protoreflect.ValueOfMap(value)
	case "nova.gal.v1.DelegateRecord.zone_id":
		panic(fmt.Errorf("field zone_id of message nova.gal.v1.DelegateRecord is not mutable"))
	case "nova.gal.v1.DelegateRecord.claimer":
		panic(fmt.Errorf("field claimer of message nova.gal.v1.DelegateRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DelegateRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecord.zone_id":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.DelegateRecord.claimer":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.DelegateRecord.records":
		m := make(map[uint64]*DelegateRecordContent)
		return protoreflect.ValueOfMap(&_DelegateRecord_3_map{m: &m})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DelegateRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.DelegateRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DelegateRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DelegateRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DelegateRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DelegateRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ZoneId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Claimer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Records) > 0 {
			SiZeMaP := func(k uint64, v *DelegateRecordContent) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]uint64, 0, len(x.Records))
				for k := range x.Records {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.Records[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Records {
					SiZeMaP(k, v)
				}
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DelegateRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Records) > 0 {
			MaRsHaLmAp := func(k uint64, v *DelegateRecordContent) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x1a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForRecords := make([]uint64, 0, len(x.Records))
				for k := range x.Records {
					keysForRecords = append(keysForRecords, uint64(k))
				}
				sort.Slice(keysForRecords, func(i, j int) bool {
					return keysForRecords[i] < keysForRecords[j]
				})
				for iNdEx := len(keysForRecords) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Records[uint64(keysForRecords[iNdEx])]
					out, err := MaRsHaLmAp(keysForRecords[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Records {
					v := x.Records[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.Claimer) > 0 {
			i -= len(x.Claimer)
			copy(dAtA[i:], x.Claimer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Claimer)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ZoneId) > 0 {
			i -= len(x.ZoneId)
			copy(dAtA[i:], x.ZoneId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZoneId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DelegateRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegateRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZoneId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Claimer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Records == nil {
					x.Records = make(map[uint64]*DelegateRecordContent)
				}
				var mapkey uint64
				var mapvalue *DelegateRecordContent
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &DelegateRecordContent{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Records[mapkey] = mapvalue
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DelegateRecordContent                protoreflect.MessageDescriptor
	fd_DelegateRecordContent_amount         protoreflect.FieldDescriptor
	fd_DelegateRecordContent_state          protoreflect.FieldDescriptor
	fd_DelegateRecordContent_oracle_version protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_DelegateRecordContent = File_nova_gal_v1_gal_proto.Messages().ByName("DelegateRecordContent")
	fd_DelegateRecordContent_amount = md_DelegateRecordContent.Fields().ByName("amount")
	fd_DelegateRecordContent_state = md_DelegateRecordContent.Fields().ByName("state")
	fd_DelegateRecordContent_oracle_version = md_DelegateRecordContent.Fields().ByName("oracle_version")
}

var _ protoreflect.Message = (*fastReflection_DelegateRecordContent)(nil)

type fastReflection_DelegateRecordContent DelegateRecordContent

func (x *DelegateRecordContent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DelegateRecordContent)(x)
}

func (x *DelegateRecordContent) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DelegateRecordContent_messageType fastReflection_DelegateRecordContent_messageType
var _ protoreflect.MessageType = fastReflection_DelegateRecordContent_messageType{}

type fastReflection_DelegateRecordContent_messageType struct{}

func (x fastReflection_DelegateRecordContent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DelegateRecordContent)(nil)
}
func (x fastReflection_DelegateRecordContent_messageType) New() protoreflect.Message {
	return new(fastReflection_DelegateRecordContent)
}
func (x fastReflection_DelegateRecordContent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegateRecordContent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DelegateRecordContent) Descriptor() protoreflect.MessageDescriptor {
	return md_DelegateRecordContent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DelegateRecordContent) Type() protoreflect.MessageType {
	return _fastReflection_DelegateRecordContent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DelegateRecordContent) New() protoreflect.Message {
	return new(fastReflection_DelegateRecordContent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DelegateRecordContent) Interface() protoreflect.ProtoMessage {
	return (*DelegateRecordContent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DelegateRecordContent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Amount != nil {
		value := protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
		if !f(fd_DelegateRecordContent_amount, value) {
			return
		}
	}
	if x.State != int64(0) {
		value := protoreflect.ValueOfInt64(x.State)
		if !f(fd_DelegateRecordContent_state, value) {
			return
		}
	}
	if x.OracleVersion != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OracleVersion)
		if !f(fd_DelegateRecordContent_oracle_version, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DelegateRecordContent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecordContent.amount":
		return x.Amount != nil
	case "nova.gal.v1.DelegateRecordContent.state":
		return x.State != int64(0)
	case "nova.gal.v1.DelegateRecordContent.oracle_version":
		return x.OracleVersion != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecordContent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecordContent.amount":
		x.Amount = nil
	case "nova.gal.v1.DelegateRecordContent.state":
		x.State = int64(0)
	case "nova.gal.v1.DelegateRecordContent.oracle_version":
		x.OracleVersion = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DelegateRecordContent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.DelegateRecordContent.amount":
		value := x.Amount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.gal.v1.DelegateRecordContent.state":
		value := x.State
		return protoreflect.ValueOfInt64(value)
	case "nova.gal.v1.DelegateRecordContent.oracle_version":
		value := x.OracleVersion
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecordContent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecordContent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecordContent.amount":
		x.Amount = value.Message().Interface().(*v1beta1.Coin)
	case "nova.gal.v1.DelegateRecordContent.state":
		x.State = value.Int()
	case "nova.gal.v1.DelegateRecordContent.oracle_version":
		x.OracleVersion = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecordContent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecordContent.amount":
		if x.Amount == nil {
			x.Amount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
	case "nova.gal.v1.DelegateRecordContent.state":
		panic(fmt.Errorf("field state of message nova.gal.v1.DelegateRecordContent is not mutable"))
	case "nova.gal.v1.DelegateRecordContent.oracle_version":
		panic(fmt.Errorf("field oracle_version of message nova.gal.v1.DelegateRecordContent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DelegateRecordContent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.DelegateRecordContent.amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.gal.v1.DelegateRecordContent.state":
		return protoreflect.ValueOfInt64(int64(0))
	case "nova.gal.v1.DelegateRecordContent.oracle_version":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.DelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.DelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DelegateRecordContent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.DelegateRecordContent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DelegateRecordContent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DelegateRecordContent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DelegateRecordContent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DelegateRecordContent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DelegateRecordContent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Amount != nil {
			l = options.Size(x.Amount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.OracleVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.OracleVersion))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DelegateRecordContent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.OracleVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OracleVersion))
			i--
			dAtA[i] = 0x18
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x10
		}
		if x.Amount != nil {
			encoded, err := options.Marshal(x.Amount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DelegateRecordContent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegateRecordContent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DelegateRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Amount == nil {
					x.Amount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleVersion", wireType)
				}
				x.OracleVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OracleVersion |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_UndelegateRecord_3_list)(nil)

type _UndelegateRecord_3_list struct {
	list *[]*UndelegateRecordContent
}

func (x *_UndelegateRecord_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UndelegateRecord_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_UndelegateRecord_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UndelegateRecordContent)
	(*x.list)[i] = concreteValue
}

func (x *_UndelegateRecord_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UndelegateRecordContent)
	*x.list = append(*x.list, concreteValue)
}

func (x *_UndelegateRecord_3_list) AppendMutable() protoreflect.Value {
	v := new(UndelegateRecordContent)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UndelegateRecord_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_UndelegateRecord_3_list) NewElement() protoreflect.Value {
	v := new(UndelegateRecordContent)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_UndelegateRecord_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_UndelegateRecord           protoreflect.MessageDescriptor
	fd_UndelegateRecord_zone_id   protoreflect.FieldDescriptor
	fd_UndelegateRecord_delegator protoreflect.FieldDescriptor
	fd_UndelegateRecord_records   protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_UndelegateRecord = File_nova_gal_v1_gal_proto.Messages().ByName("UndelegateRecord")
	fd_UndelegateRecord_zone_id = md_UndelegateRecord.Fields().ByName("zone_id")
	fd_UndelegateRecord_delegator = md_UndelegateRecord.Fields().ByName("delegator")
	fd_UndelegateRecord_records = md_UndelegateRecord.Fields().ByName("records")
}

var _ protoreflect.Message = (*fastReflection_UndelegateRecord)(nil)

type fastReflection_UndelegateRecord UndelegateRecord

func (x *UndelegateRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UndelegateRecord)(x)
}

func (x *UndelegateRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UndelegateRecord_messageType fastReflection_UndelegateRecord_messageType
var _ protoreflect.MessageType = fastReflection_UndelegateRecord_messageType{}

type fastReflection_UndelegateRecord_messageType struct{}

func (x fastReflection_UndelegateRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UndelegateRecord)(nil)
}
func (x fastReflection_UndelegateRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_UndelegateRecord)
}
func (x fastReflection_UndelegateRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UndelegateRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UndelegateRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_UndelegateRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UndelegateRecord) Type() protoreflect.MessageType {
	return _fastReflection_UndelegateRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UndelegateRecord) New() protoreflect.Message {
	return new(fastReflection_UndelegateRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UndelegateRecord) Interface() protoreflect.ProtoMessage {
	return (*UndelegateRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UndelegateRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ZoneId != "" {
		value := protoreflect.ValueOfString(x.ZoneId)
		if !f(fd_UndelegateRecord_zone_id, value) {
			return
		}
	}
	if x.Delegator != "" {
		value := protoreflect.ValueOfString(x.Delegator)
		if !f(fd_UndelegateRecord_delegator, value) {
			return
		}
	}
	if len(x.Records) != 0 {
		value := protoreflect.ValueOfList(&_UndelegateRecord_3_list{list: &x.Records})
		if !f(fd_UndelegateRecord_records, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UndelegateRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecord.zone_id":
		return x.ZoneId != ""
	case "nova.gal.v1.UndelegateRecord.delegator":
		return x.Delegator != ""
	case "nova.gal.v1.UndelegateRecord.records":
		return len(x.Records) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecord.zone_id":
		x.ZoneId = ""
	case "nova.gal.v1.UndelegateRecord.delegator":
		x.Delegator = ""
	case "nova.gal.v1.UndelegateRecord.records":
		x.Records = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UndelegateRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.UndelegateRecord.zone_id":
		value := x.ZoneId
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.UndelegateRecord.delegator":
		value := x.Delegator
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.UndelegateRecord.records":
		if len(x.Records) == 0 {
			return protoreflect.ValueOfList(&_UndelegateRecord_3_list{})
		}
		listValue := &_UndelegateRecord_3_list{list: &x.Records}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecord.zone_id":
		x.ZoneId = value.Interface().(string)
	case "nova.gal.v1.UndelegateRecord.delegator":
		x.Delegator = value.Interface().(string)
	case "nova.gal.v1.UndelegateRecord.records":
		lv := value.List()
		clv := lv.(*_UndelegateRecord_3_list)
		x.Records = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecord.records":
		if x.Records == nil {
			x.Records = []*UndelegateRecordContent{}
		}
		value := &_UndelegateRecord_3_list{list: &x.Records}
		return protoreflect.ValueOfList(value)
	case "nova.gal.v1.UndelegateRecord.zone_id":
		panic(fmt.Errorf("field zone_id of message nova.gal.v1.UndelegateRecord is not mutable"))
	case "nova.gal.v1.UndelegateRecord.delegator":
		panic(fmt.Errorf("field delegator of message nova.gal.v1.UndelegateRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UndelegateRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecord.zone_id":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.UndelegateRecord.delegator":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.UndelegateRecord.records":
		list := []*UndelegateRecordContent{}
		return protoreflect.ValueOfList(&_UndelegateRecord_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UndelegateRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.UndelegateRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UndelegateRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UndelegateRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UndelegateRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UndelegateRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ZoneId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Delegator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Records) > 0 {
			for _, e := range x.Records {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UndelegateRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Records) > 0 {
			for iNdEx := len(x.Records) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Records[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Delegator) > 0 {
			i -= len(x.Delegator)
			copy(dAtA[i:], x.Delegator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Delegator)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ZoneId) > 0 {
			i -= len(x.ZoneId)
			copy(dAtA[i:], x.ZoneId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZoneId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UndelegateRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UndelegateRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UndelegateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZoneId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Delegator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Records = append(x.Records, &UndelegateRecordContent{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Records[len(x.Records)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UndelegateRecordContent                    protoreflect.MessageDescriptor
	fd_UndelegateRecordContent_withdrawer         protoreflect.FieldDescriptor
	fd_UndelegateRecordContent_sn_asset_amount    protoreflect.FieldDescriptor
	fd_UndelegateRecordContent_withdraw_amount    protoreflect.FieldDescriptor
	fd_UndelegateRecordContent_state              protoreflect.FieldDescriptor
	fd_UndelegateRecordContent_oracle_version     protoreflect.FieldDescriptor
	fd_UndelegateRecordContent_undelegate_version protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_UndelegateRecordContent = File_nova_gal_v1_gal_proto.Messages().ByName("UndelegateRecordContent")
	fd_UndelegateRecordContent_withdrawer = md_UndelegateRecordContent.Fields().ByName("withdrawer")
	fd_UndelegateRecordContent_sn_asset_amount = md_UndelegateRecordContent.Fields().ByName("sn_asset_amount")
	fd_UndelegateRecordContent_withdraw_amount = md_UndelegateRecordContent.Fields().ByName("withdraw_amount")
	fd_UndelegateRecordContent_state = md_UndelegateRecordContent.Fields().ByName("state")
	fd_UndelegateRecordContent_oracle_version = md_UndelegateRecordContent.Fields().ByName("oracle_version")
	fd_UndelegateRecordContent_undelegate_version = md_UndelegateRecordContent.Fields().ByName("undelegate_version")
}

var _ protoreflect.Message = (*fastReflection_UndelegateRecordContent)(nil)

type fastReflection_UndelegateRecordContent UndelegateRecordContent

func (x *UndelegateRecordContent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UndelegateRecordContent)(x)
}

func (x *UndelegateRecordContent) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UndelegateRecordContent_messageType fastReflection_UndelegateRecordContent_messageType
var _ protoreflect.MessageType = fastReflection_UndelegateRecordContent_messageType{}

type fastReflection_UndelegateRecordContent_messageType struct{}

func (x fastReflection_UndelegateRecordContent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UndelegateRecordContent)(nil)
}
func (x fastReflection_UndelegateRecordContent_messageType) New() protoreflect.Message {
	return new(fastReflection_UndelegateRecordContent)
}
func (x fastReflection_UndelegateRecordContent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UndelegateRecordContent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UndelegateRecordContent) Descriptor() protoreflect.MessageDescriptor {
	return md_UndelegateRecordContent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UndelegateRecordContent) Type() protoreflect.MessageType {
	return _fastReflection_UndelegateRecordContent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UndelegateRecordContent) New() protoreflect.Message {
	return new(fastReflection_UndelegateRecordContent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UndelegateRecordContent) Interface() protoreflect.ProtoMessage {
	return (*UndelegateRecordContent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UndelegateRecordContent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Withdrawer != "" {
		value := protoreflect.ValueOfString(x.Withdrawer)
		if !f(fd_UndelegateRecordContent_withdrawer, value) {
			return
		}
	}
	if x.SnAssetAmount != nil {
		value := protoreflect.ValueOfMessage(x.SnAssetAmount.ProtoReflect())
		if !f(fd_UndelegateRecordContent_sn_asset_amount, value) {
			return
		}
	}
	if x.WithdrawAmount != "" {
		value := protoreflect.ValueOfString(x.WithdrawAmount)
		if !f(fd_UndelegateRecordContent_withdraw_amount, value) {
			return
		}
	}
	if x.State != int64(0) {
		value := protoreflect.ValueOfInt64(x.State)
		if !f(fd_UndelegateRecordContent_state, value) {
			return
		}
	}
	if x.OracleVersion != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OracleVersion)
		if !f(fd_UndelegateRecordContent_oracle_version, value) {
			return
		}
	}
	if x.UndelegateVersion != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UndelegateVersion)
		if !f(fd_UndelegateRecordContent_undelegate_version, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UndelegateRecordContent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecordContent.withdrawer":
		return x.Withdrawer != ""
	case "nova.gal.v1.UndelegateRecordContent.sn_asset_amount":
		return x.SnAssetAmount != nil
	case "nova.gal.v1.UndelegateRecordContent.withdraw_amount":
		return x.WithdrawAmount != ""
	case "nova.gal.v1.UndelegateRecordContent.state":
		return x.State != int64(0)
	case "nova.gal.v1.UndelegateRecordContent.oracle_version":
		return x.OracleVersion != uint64(0)
	case "nova.gal.v1.UndelegateRecordContent.undelegate_version":
		return x.UndelegateVersion != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecordContent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecordContent.withdrawer":
		x.Withdrawer = ""
	case "nova.gal.v1.UndelegateRecordContent.sn_asset_amount":
		x.SnAssetAmount = nil
	case "nova.gal.v1.UndelegateRecordContent.withdraw_amount":
		x.WithdrawAmount = ""
	case "nova.gal.v1.UndelegateRecordContent.state":
		x.State = int64(0)
	case "nova.gal.v1.UndelegateRecordContent.oracle_version":
		x.OracleVersion = uint64(0)
	case "nova.gal.v1.UndelegateRecordContent.undelegate_version":
		x.UndelegateVersion = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UndelegateRecordContent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.UndelegateRecordContent.withdrawer":
		value := x.Withdrawer
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.UndelegateRecordContent.sn_asset_amount":
		value := x.SnAssetAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.gal.v1.UndelegateRecordContent.withdraw_amount":
		value := x.WithdrawAmount
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.UndelegateRecordContent.state":
		value := x.State
		return protoreflect.ValueOfInt64(value)
	case "nova.gal.v1.UndelegateRecordContent.oracle_version":
		value := x.OracleVersion
		return protoreflect.ValueOfUint64(value)
	case "nova.gal.v1.UndelegateRecordContent.undelegate_version":
		value := x.UndelegateVersion
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecordContent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecordContent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecordContent.withdrawer":
		x.Withdrawer = value.Interface().(string)
	case "nova.gal.v1.UndelegateRecordContent.sn_asset_amount":
		x.SnAssetAmount = value.Message().Interface().(*v1beta1.Coin)
	case "nova.gal.v1.UndelegateRecordContent.withdraw_amount":
		x.WithdrawAmount = value.Interface().(string)
	case "nova.gal.v1.UndelegateRecordContent.state":
		x.State = value.Int()
	case "nova.gal.v1.UndelegateRecordContent.oracle_version":
		x.OracleVersion = value.Uint()
	case "nova.gal.v1.UndelegateRecordContent.undelegate_version":
		x.UndelegateVersion = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecordContent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecordContent.sn_asset_amount":
		if x.SnAssetAmount == nil {
			x.SnAssetAmount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.SnAssetAmount.ProtoReflect())
	case "nova.gal.v1.UndelegateRecordContent.withdrawer":
		panic(fmt.Errorf("field withdrawer of message nova.gal.v1.UndelegateRecordContent is not mutable"))
	case "nova.gal.v1.UndelegateRecordContent.withdraw_amount":
		panic(fmt.Errorf("field withdraw_amount of message nova.gal.v1.UndelegateRecordContent is not mutable"))
	case "nova.gal.v1.UndelegateRecordContent.state":
		panic(fmt.Errorf("field state of message nova.gal.v1.UndelegateRecordContent is not mutable"))
	case "nova.gal.v1.UndelegateRecordContent.oracle_version":
		panic(fmt.Errorf("field oracle_version of message nova.gal.v1.UndelegateRecordContent is not mutable"))
	case "nova.gal.v1.UndelegateRecordContent.undelegate_version":
		panic(fmt.Errorf("field undelegate_version of message nova.gal.v1.UndelegateRecordContent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UndelegateRecordContent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.UndelegateRecordContent.withdrawer":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.UndelegateRecordContent.sn_asset_amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.gal.v1.UndelegateRecordContent.withdraw_amount":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.UndelegateRecordContent.state":
		return protoreflect.ValueOfInt64(int64(0))
	case "nova.gal.v1.UndelegateRecordContent.oracle_version":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nova.gal.v1.UndelegateRecordContent.undelegate_version":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.UndelegateRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.UndelegateRecordContent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UndelegateRecordContent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.UndelegateRecordContent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UndelegateRecordContent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UndelegateRecordContent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UndelegateRecordContent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UndelegateRecordContent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UndelegateRecordContent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Withdrawer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SnAssetAmount != nil {
			l = options.Size(x.SnAssetAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.WithdrawAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.OracleVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.OracleVersion))
		}
		if x.UndelegateVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.UndelegateVersion))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UndelegateRecordContent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UndelegateVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UndelegateVersion))
			i--
			dAtA[i] = 0x30
		}
		if x.OracleVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OracleVersion))
			i--
			dAtA[i] = 0x28
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x20
		}
		if len(x.WithdrawAmount) > 0 {
			i -= len(x.WithdrawAmount)
			copy(dAtA[i:], x.WithdrawAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WithdrawAmount)))
			i--
			dAtA[i] = 0x1a
		}
		if x.SnAssetAmount != nil {
			encoded, err := options.Marshal(x.SnAssetAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Withdrawer) > 0 {
			i -= len(x.Withdrawer)
			copy(dAtA[i:], x.Withdrawer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Withdrawer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UndelegateRecordContent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UndelegateRecordContent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UndelegateRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Withdrawer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SnAssetAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SnAssetAmount == nil {
					x.SnAssetAmount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SnAssetAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WithdrawAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleVersion", wireType)
				}
				x.OracleVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OracleVersion |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UndelegateVersion", wireType)
				}
				x.UndelegateVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UndelegateVersion |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.Map = (*_WithdrawRecord_3_map)(nil)

type _WithdrawRecord_3_map struct {
	m *map[uint64]*WithdrawRecordContent
}

func (x *_WithdrawRecord_3_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_WithdrawRecord_3_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfUint64(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_WithdrawRecord_3_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Uint()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_WithdrawRecord_3_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_WithdrawRecord_3_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_WithdrawRecord_3_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WithdrawRecordContent)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_WithdrawRecord_3_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(WithdrawRecordContent)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_WithdrawRecord_3_map) NewValue() protoreflect.Value {
	v := new(WithdrawRecordContent)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_WithdrawRecord_3_map) IsValid() bool {
	return x.m != nil
}

var (
	md_WithdrawRecord            protoreflect.MessageDescriptor
	fd_WithdrawRecord_zone_id    protoreflect.FieldDescriptor
	fd_WithdrawRecord_withdrawer protoreflect.FieldDescriptor
	fd_WithdrawRecord_records    protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_WithdrawRecord = File_nova_gal_v1_gal_proto.Messages().ByName("WithdrawRecord")
	fd_WithdrawRecord_zone_id = md_WithdrawRecord.Fields().ByName("zone_id")
	fd_WithdrawRecord_withdrawer = md_WithdrawRecord.Fields().ByName("withdrawer")
	fd_WithdrawRecord_records = md_WithdrawRecord.Fields().ByName("records")
}

var _ protoreflect.Message = (*fastReflection_WithdrawRecord)(nil)

type fastReflection_WithdrawRecord WithdrawRecord

func (x *WithdrawRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WithdrawRecord)(x)
}

func (x *WithdrawRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WithdrawRecord_messageType fastReflection_WithdrawRecord_messageType
var _ protoreflect.MessageType = fastReflection_WithdrawRecord_messageType{}

type fastReflection_WithdrawRecord_messageType struct{}

func (x fastReflection_WithdrawRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WithdrawRecord)(nil)
}
func (x fastReflection_WithdrawRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_WithdrawRecord)
}
func (x fastReflection_WithdrawRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WithdrawRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WithdrawRecord) Type() protoreflect.MessageType {
	return _fastReflection_WithdrawRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WithdrawRecord) New() protoreflect.Message {
	return new(fastReflection_WithdrawRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WithdrawRecord) Interface() protoreflect.ProtoMessage {
	return (*WithdrawRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WithdrawRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ZoneId != "" {
		value := protoreflect.ValueOfString(x.ZoneId)
		if !f(fd_WithdrawRecord_zone_id, value) {
			return
		}
	}
	if x.Withdrawer != "" {
		value := protoreflect.ValueOfString(x.Withdrawer)
		if !f(fd_WithdrawRecord_withdrawer, value) {
			return
		}
	}
	if len(x.Records) != 0 {
		value := protoreflect.ValueOfMap(&_WithdrawRecord_3_map{m: &x.Records})
		if !f(fd_WithdrawRecord_records, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WithdrawRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecord.zone_id":
		return x.ZoneId != ""
	case "nova.gal.v1.WithdrawRecord.withdrawer":
		return x.Withdrawer != ""
	case "nova.gal.v1.WithdrawRecord.records":
		return len(x.Records) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecord.zone_id":
		x.ZoneId = ""
	case "nova.gal.v1.WithdrawRecord.withdrawer":
		x.Withdrawer = ""
	case "nova.gal.v1.WithdrawRecord.records":
		x.Records = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WithdrawRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.WithdrawRecord.zone_id":
		value := x.ZoneId
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.WithdrawRecord.withdrawer":
		value := x.Withdrawer
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.WithdrawRecord.records":
		if len(x.Records) == 0 {
			return protoreflect.ValueOfMap(&_WithdrawRecord_3_map{})
		}
		mapValue := &_WithdrawRecord_3_map{m: &x.Records}
		return protoreflect.ValueOfMap(mapValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecord.zone_id":
		x.ZoneId = value.Interface().(string)
	case "nova.gal.v1.WithdrawRecord.withdrawer":
		x.Withdrawer = value.Interface().(string)
	case "nova.gal.v1.WithdrawRecord.records":
		mv := value.Map()
		cmv := mv.(*_WithdrawRecord_3_map)
		x.Records = *cmv.m
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecord.records":
		if x.Records == nil {
			x.Records = make(map[uint64]*WithdrawRecordContent)
		}
		value := &_WithdrawRecord_3_map{m: &x.Records}
		return protoreflect.ValueOfMap(value)
	case "nova.gal.v1.WithdrawRecord.zone_id":
		panic(fmt.Errorf("field zone_id of message nova.gal.v1.WithdrawRecord is not mutable"))
	case "nova.gal.v1.WithdrawRecord.withdrawer":
		panic(fmt.Errorf("field withdrawer of message nova.gal.v1.WithdrawRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WithdrawRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecord.zone_id":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.WithdrawRecord.withdrawer":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.WithdrawRecord.records":
		m := make(map[uint64]*WithdrawRecordContent)
		return protoreflect.ValueOfMap(&_WithdrawRecord_3_map{m: &m})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecord"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WithdrawRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.WithdrawRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WithdrawRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WithdrawRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WithdrawRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WithdrawRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ZoneId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Withdrawer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Records) > 0 {
			SiZeMaP := func(k uint64, v *WithdrawRecordContent) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]uint64, 0, len(x.Records))
				for k := range x.Records {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.Records[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Records {
					SiZeMaP(k, v)
				}
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Records) > 0 {
			MaRsHaLmAp := func(k uint64, v *WithdrawRecordContent) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x1a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForRecords := make([]uint64, 0, len(x.Records))
				for k := range x.Records {
					keysForRecords = append(keysForRecords, uint64(k))
				}
				sort.Slice(keysForRecords, func(i, j int) bool {
					return keysForRecords[i] < keysForRecords[j]
				})
				for iNdEx := len(keysForRecords) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Records[uint64(keysForRecords[iNdEx])]
					out, err := MaRsHaLmAp(keysForRecords[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Records {
					v := x.Records[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.Withdrawer) > 0 {
			i -= len(x.Withdrawer)
			copy(dAtA[i:], x.Withdrawer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Withdrawer)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ZoneId) > 0 {
			i -= len(x.ZoneId)
			copy(dAtA[i:], x.ZoneId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ZoneId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ZoneId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Withdrawer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Records == nil {
					x.Records = make(map[uint64]*WithdrawRecordContent)
				}
				var mapkey uint64
				var mapvalue *WithdrawRecordContent
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &WithdrawRecordContent{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Records[mapkey] = mapvalue
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_WithdrawRecordContent                  protoreflect.MessageDescriptor
	fd_WithdrawRecordContent_amount           protoreflect.FieldDescriptor
	fd_WithdrawRecordContent_unstaking_amount protoreflect.FieldDescriptor
	fd_WithdrawRecordContent_state            protoreflect.FieldDescriptor
	fd_WithdrawRecordContent_oracle_version   protoreflect.FieldDescriptor
	fd_WithdrawRecordContent_withdraw_version protoreflect.FieldDescriptor
	fd_WithdrawRecordContent_completion_time  protoreflect.FieldDescriptor
)

func init() {
	file_nova_gal_v1_gal_proto_init()
	md_WithdrawRecordContent = File_nova_gal_v1_gal_proto.Messages().ByName("WithdrawRecordContent")
	fd_WithdrawRecordContent_amount = md_WithdrawRecordContent.Fields().ByName("amount")
	fd_WithdrawRecordContent_unstaking_amount = md_WithdrawRecordContent.Fields().ByName("unstaking_amount")
	fd_WithdrawRecordContent_state = md_WithdrawRecordContent.Fields().ByName("state")
	fd_WithdrawRecordContent_oracle_version = md_WithdrawRecordContent.Fields().ByName("oracle_version")
	fd_WithdrawRecordContent_withdraw_version = md_WithdrawRecordContent.Fields().ByName("withdraw_version")
	fd_WithdrawRecordContent_completion_time = md_WithdrawRecordContent.Fields().ByName("completion_time")
}

var _ protoreflect.Message = (*fastReflection_WithdrawRecordContent)(nil)

type fastReflection_WithdrawRecordContent WithdrawRecordContent

func (x *WithdrawRecordContent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WithdrawRecordContent)(x)
}

func (x *WithdrawRecordContent) slowProtoReflect() protoreflect.Message {
	mi := &file_nova_gal_v1_gal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WithdrawRecordContent_messageType fastReflection_WithdrawRecordContent_messageType
var _ protoreflect.MessageType = fastReflection_WithdrawRecordContent_messageType{}

type fastReflection_WithdrawRecordContent_messageType struct{}

func (x fastReflection_WithdrawRecordContent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WithdrawRecordContent)(nil)
}
func (x fastReflection_WithdrawRecordContent_messageType) New() protoreflect.Message {
	return new(fastReflection_WithdrawRecordContent)
}
func (x fastReflection_WithdrawRecordContent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawRecordContent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WithdrawRecordContent) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawRecordContent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WithdrawRecordContent) Type() protoreflect.MessageType {
	return _fastReflection_WithdrawRecordContent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WithdrawRecordContent) New() protoreflect.Message {
	return new(fastReflection_WithdrawRecordContent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WithdrawRecordContent) Interface() protoreflect.ProtoMessage {
	return (*WithdrawRecordContent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WithdrawRecordContent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_WithdrawRecordContent_amount, value) {
			return
		}
	}
	if x.UnstakingAmount != nil {
		value := protoreflect.ValueOfMessage(x.UnstakingAmount.ProtoReflect())
		if !f(fd_WithdrawRecordContent_unstaking_amount, value) {
			return
		}
	}
	if x.State != int64(0) {
		value := protoreflect.ValueOfInt64(x.State)
		if !f(fd_WithdrawRecordContent_state, value) {
			return
		}
	}
	if x.OracleVersion != int64(0) {
		value := protoreflect.ValueOfInt64(x.OracleVersion)
		if !f(fd_WithdrawRecordContent_oracle_version, value) {
			return
		}
	}
	if x.WithdrawVersion != uint64(0) {
		value := protoreflect.ValueOfUint64(x.WithdrawVersion)
		if !f(fd_WithdrawRecordContent_withdraw_version, value) {
			return
		}
	}
	if x.CompletionTime != nil {
		value := protoreflect.ValueOfMessage(x.CompletionTime.ProtoReflect())
		if !f(fd_WithdrawRecordContent_completion_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WithdrawRecordContent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecordContent.amount":
		return x.Amount != ""
	case "nova.gal.v1.WithdrawRecordContent.unstaking_amount":
		return x.UnstakingAmount != nil
	case "nova.gal.v1.WithdrawRecordContent.state":
		return x.State != int64(0)
	case "nova.gal.v1.WithdrawRecordContent.oracle_version":
		return x.OracleVersion != int64(0)
	case "nova.gal.v1.WithdrawRecordContent.withdraw_version":
		return x.WithdrawVersion != uint64(0)
	case "nova.gal.v1.WithdrawRecordContent.completion_time":
		return x.CompletionTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecordContent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecordContent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecordContent.amount":
		x.Amount = ""
	case "nova.gal.v1.WithdrawRecordContent.unstaking_amount":
		x.UnstakingAmount = nil
	case "nova.gal.v1.WithdrawRecordContent.state":
		x.State = int64(0)
	case "nova.gal.v1.WithdrawRecordContent.oracle_version":
		x.OracleVersion = int64(0)
	case "nova.gal.v1.WithdrawRecordContent.withdraw_version":
		x.WithdrawVersion = uint64(0)
	case "nova.gal.v1.WithdrawRecordContent.completion_time":
		x.CompletionTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecordContent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WithdrawRecordContent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "nova.gal.v1.WithdrawRecordContent.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "nova.gal.v1.WithdrawRecordContent.unstaking_amount":
		value := x.UnstakingAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "nova.gal.v1.WithdrawRecordContent.state":
		value := x.State
		return protoreflect.ValueOfInt64(value)
	case "nova.gal.v1.WithdrawRecordContent.oracle_version":
		value := x.OracleVersion
		return protoreflect.ValueOfInt64(value)
	case "nova.gal.v1.WithdrawRecordContent.withdraw_version":
		value := x.WithdrawVersion
		return protoreflect.ValueOfUint64(value)
	case "nova.gal.v1.WithdrawRecordContent.completion_time":
		value := x.CompletionTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecordContent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecordContent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecordContent.amount":
		x.Amount = value.Interface().(string)
	case "nova.gal.v1.WithdrawRecordContent.unstaking_amount":
		x.UnstakingAmount = value.Message().Interface().(*v1beta1.Coin)
	case "nova.gal.v1.WithdrawRecordContent.state":
		x.State = value.Int()
	case "nova.gal.v1.WithdrawRecordContent.oracle_version":
		x.OracleVersion = value.Int()
	case "nova.gal.v1.WithdrawRecordContent.withdraw_version":
		x.WithdrawVersion = value.Uint()
	case "nova.gal.v1.WithdrawRecordContent.completion_time":
		x.CompletionTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecordContent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecordContent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecordContent.unstaking_amount":
		if x.UnstakingAmount == nil {
			x.UnstakingAmount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.UnstakingAmount.ProtoReflect())
	case "nova.gal.v1.WithdrawRecordContent.completion_time":
		if x.CompletionTime == nil {
			x.CompletionTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.CompletionTime.ProtoReflect())
	case "nova.gal.v1.WithdrawRecordContent.amount":
		panic(fmt.Errorf("field amount of message nova.gal.v1.WithdrawRecordContent is not mutable"))
	case "nova.gal.v1.WithdrawRecordContent.state":
		panic(fmt.Errorf("field state of message nova.gal.v1.WithdrawRecordContent is not mutable"))
	case "nova.gal.v1.WithdrawRecordContent.oracle_version":
		panic(fmt.Errorf("field oracle_version of message nova.gal.v1.WithdrawRecordContent is not mutable"))
	case "nova.gal.v1.WithdrawRecordContent.withdraw_version":
		panic(fmt.Errorf("field withdraw_version of message nova.gal.v1.WithdrawRecordContent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecordContent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WithdrawRecordContent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "nova.gal.v1.WithdrawRecordContent.amount":
		return protoreflect.ValueOfString("")
	case "nova.gal.v1.WithdrawRecordContent.unstaking_amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "nova.gal.v1.WithdrawRecordContent.state":
		return protoreflect.ValueOfInt64(int64(0))
	case "nova.gal.v1.WithdrawRecordContent.oracle_version":
		return protoreflect.ValueOfInt64(int64(0))
	case "nova.gal.v1.WithdrawRecordContent.withdraw_version":
		return protoreflect.ValueOfUint64(uint64(0))
	case "nova.gal.v1.WithdrawRecordContent.completion_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: nova.gal.v1.WithdrawRecordContent"))
		}
		panic(fmt.Errorf("message nova.gal.v1.WithdrawRecordContent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WithdrawRecordContent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in nova.gal.v1.WithdrawRecordContent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WithdrawRecordContent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRecordContent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WithdrawRecordContent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WithdrawRecordContent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WithdrawRecordContent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnstakingAmount != nil {
			l = options.Size(x.UnstakingAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.OracleVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.OracleVersion))
		}
		if x.WithdrawVersion != 0 {
			n += 1 + runtime.Sov(uint64(x.WithdrawVersion))
		}
		if x.CompletionTime != nil {
			l = options.Size(x.CompletionTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawRecordContent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CompletionTime != nil {
			encoded, err := options.Marshal(x.CompletionTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.WithdrawVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WithdrawVersion))
			i--
			dAtA[i] = 0x28
		}
		if x.OracleVersion != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OracleVersion))
			i--
			dAtA[i] = 0x20
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x18
		}
		if x.UnstakingAmount != nil {
			encoded, err := options.Marshal(x.UnstakingAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawRecordContent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawRecordContent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnstakingAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UnstakingAmount == nil {
					x.UnstakingAmount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnstakingAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleVersion", wireType)
				}
				x.OracleVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OracleVersion |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawVersion", wireType)
				}
				x.WithdrawVersion = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WithdrawVersion |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CompletionTime == nil {
					x.CompletionTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CompletionTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: nova/gal/v1/gal.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DepositRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId    string                  `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Depositor string                  `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty"`
	Records   []*DepositRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *DepositRecord) Reset() {
	*x = DepositRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecord) ProtoMessage() {}

// Deprecated: Use DepositRecord.ProtoReflect.Descriptor instead.
func (*DepositRecord) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{0}
}

func (x *DepositRecord) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DepositRecord) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *DepositRecord) GetRecords() []*DepositRecordContent {
	if x != nil {
		return x.Records
	}
	return nil
}

type DepositRecordContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claimer string        `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	Amount  *v1beta1.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	State   int64         `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *DepositRecordContent) Reset() {
	*x = DepositRecordContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRecordContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRecordContent) ProtoMessage() {}

// Deprecated: Use DepositRecordContent.ProtoReflect.Descriptor instead.
func (*DepositRecordContent) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{1}
}

func (x *DepositRecordContent) GetClaimer() string {
	if x != nil {
		return x.Claimer
	}
	return ""
}

func (x *DepositRecordContent) GetAmount() *v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *DepositRecordContent) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

type DelegateRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId  string                            `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Claimer string                            `protobuf:"bytes,2,opt,name=claimer,proto3" json:"claimer,omitempty"`
	Records map[uint64]*DelegateRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelegateRecord) Reset() {
	*x = DelegateRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateRecord) ProtoMessage() {}

// Deprecated: Use DelegateRecord.ProtoReflect.Descriptor instead.
func (*DelegateRecord) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{2}
}

func (x *DelegateRecord) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DelegateRecord) GetClaimer() string {
	if x != nil {
		return x.Claimer
	}
	return ""
}

func (x *DelegateRecord) GetRecords() map[uint64]*DelegateRecordContent {
	if x != nil {
		return x.Records
	}
	return nil
}

type DelegateRecordContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount        *v1beta1.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	State         int64         `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	OracleVersion uint64        `protobuf:"varint,3,opt,name=oracle_version,json=oracleVersion,proto3" json:"oracle_version,omitempty"`
}

func (x *DelegateRecordContent) Reset() {
	*x = DelegateRecordContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateRecordContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateRecordContent) ProtoMessage() {}

// Deprecated: Use DelegateRecordContent.ProtoReflect.Descriptor instead.
func (*DelegateRecordContent) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{3}
}

func (x *DelegateRecordContent) GetAmount() *v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *DelegateRecordContent) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DelegateRecordContent) GetOracleVersion() uint64 {
	if x != nil {
		return x.OracleVersion
	}
	return 0
}

type UndelegateRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId    string                     `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Delegator string                     `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Records   []*UndelegateRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *UndelegateRecord) Reset() {
	*x = UndelegateRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateRecord) ProtoMessage() {}

// Deprecated: Use UndelegateRecord.ProtoReflect.Descriptor instead.
func (*UndelegateRecord) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{4}
}

func (x *UndelegateRecord) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *UndelegateRecord) GetDelegator() string {
	if x != nil {
		return x.Delegator
	}
	return ""
}

func (x *UndelegateRecord) GetRecords() []*UndelegateRecordContent {
	if x != nil {
		return x.Records
	}
	return nil
}

type UndelegateRecordContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Withdrawer        string        `protobuf:"bytes,1,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	SnAssetAmount     *v1beta1.Coin `protobuf:"bytes,2,opt,name=sn_asset_amount,json=snAssetAmount,proto3" json:"sn_asset_amount,omitempty"`
	WithdrawAmount    string        `protobuf:"bytes,3,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
	State             int64         `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	OracleVersion     uint64        `protobuf:"varint,5,opt,name=oracle_version,json=oracleVersion,proto3" json:"oracle_version,omitempty"`
	UndelegateVersion uint64        `protobuf:"varint,6,opt,name=undelegate_version,json=undelegateVersion,proto3" json:"undelegate_version,omitempty"`
}

func (x *UndelegateRecordContent) Reset() {
	*x = UndelegateRecordContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateRecordContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateRecordContent) ProtoMessage() {}

// Deprecated: Use UndelegateRecordContent.ProtoReflect.Descriptor instead.
func (*UndelegateRecordContent) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{5}
}

func (x *UndelegateRecordContent) GetWithdrawer() string {
	if x != nil {
		return x.Withdrawer
	}
	return ""
}

func (x *UndelegateRecordContent) GetSnAssetAmount() *v1beta1.Coin {
	if x != nil {
		return x.SnAssetAmount
	}
	return nil
}

func (x *UndelegateRecordContent) GetWithdrawAmount() string {
	if x != nil {
		return x.WithdrawAmount
	}
	return ""
}

func (x *UndelegateRecordContent) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UndelegateRecordContent) GetOracleVersion() uint64 {
	if x != nil {
		return x.OracleVersion
	}
	return 0
}

func (x *UndelegateRecordContent) GetUndelegateVersion() uint64 {
	if x != nil {
		return x.UndelegateVersion
	}
	return 0
}

type WithdrawRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId     string                            `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Withdrawer string                            `protobuf:"bytes,2,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	Records    map[uint64]*WithdrawRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WithdrawRecord) Reset() {
	*x = WithdrawRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRecord) ProtoMessage() {}

// Deprecated: Use WithdrawRecord.ProtoReflect.Descriptor instead.
func (*WithdrawRecord) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{6}
}

func (x *WithdrawRecord) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *WithdrawRecord) GetWithdrawer() string {
	if x != nil {
		return x.Withdrawer
	}
	return ""
}

func (x *WithdrawRecord) GetRecords() map[uint64]*WithdrawRecordContent {
	if x != nil {
		return x.Records
	}
	return nil
}

type WithdrawRecordContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount          string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	UnstakingAmount *v1beta1.Coin          `protobuf:"bytes,2,opt,name=unstaking_amount,json=unstakingAmount,proto3" json:"unstaking_amount,omitempty"`
	State           int64                  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	OracleVersion   int64                  `protobuf:"varint,4,opt,name=oracle_version,json=oracleVersion,proto3" json:"oracle_version,omitempty"`
	WithdrawVersion uint64                 `protobuf:"varint,5,opt,name=withdraw_version,json=withdrawVersion,proto3" json:"withdraw_version,omitempty"`
	CompletionTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
}

func (x *WithdrawRecordContent) Reset() {
	*x = WithdrawRecordContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nova_gal_v1_gal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRecordContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRecordContent) ProtoMessage() {}

// Deprecated: Use WithdrawRecordContent.ProtoReflect.Descriptor instead.
func (*WithdrawRecordContent) Descriptor() ([]byte, []int) {
	return file_nova_gal_v1_gal_proto_rawDescGZIP(), []int{7}
}

func (x *WithdrawRecordContent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WithdrawRecordContent) GetUnstakingAmount() *v1beta1.Coin {
	if x != nil {
		return x.UnstakingAmount
	}
	return nil
}

func (x *WithdrawRecordContent) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *WithdrawRecordContent) GetOracleVersion() int64 {
	if x != nil {
		return x.OracleVersion
	}
	return 0
}

func (x *WithdrawRecordContent) GetWithdrawVersion() uint64 {
	if x != nil {
		return x.WithdrawVersion
	}
	return 0
}

func (x *WithdrawRecordContent) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

var File_nova_gal_v1_gal_proto protoreflect.FileDescriptor

var file_nova_gal_v1_gal_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x67, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x67, 0x61, 0x6c, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe7, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x5e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x89, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc1, 0x02, 0x0a,
	0x17, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x6e, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x6e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xed, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x5e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xdc, 0x02, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x9c, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x67, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x42, 0x08, 0x47, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x72, 0x69,
	0x6e, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x67, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x61, 0x6c,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x47, 0x58, 0xaa, 0x02, 0x0b, 0x4e, 0x6f, 0x76, 0x61, 0x2e,
	0x47, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x4e, 0x6f, 0x76, 0x61, 0x5c, 0x47, 0x61,
	0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x4e, 0x6f, 0x76, 0x61, 0x5c, 0x47, 0x61, 0x6c, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0d, 0x4e, 0x6f, 0x76, 0x61, 0x3a, 0x3a, 0x47, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nova_gal_v1_gal_proto_rawDescOnce sync.Once
	file_nova_gal_v1_gal_proto_rawDescData = file_nova_gal_v1_gal_proto_rawDesc
)

func file_nova_gal_v1_gal_proto_rawDescGZIP() []byte {
	file_nova_gal_v1_gal_proto_rawDescOnce.Do(func() {
		file_nova_gal_v1_gal_proto_rawDescData = protoimpl.X.CompressGZIP(file_nova_gal_v1_gal_proto_rawDescData)
	})
	return file_nova_gal_v1_gal_proto_rawDescData
}

var file_nova_gal_v1_gal_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_nova_gal_v1_gal_proto_goTypes = []interface{}{
	(*DepositRecord)(nil),           // 0: nova.gal.v1.DepositRecord
	(*DepositRecordContent)(nil),    // 1: nova.gal.v1.DepositRecordContent
	(*DelegateRecord)(nil),          // 2: nova.gal.v1.DelegateRecord
	(*DelegateRecordContent)(nil),   // 3: nova.gal.v1.DelegateRecordContent
	(*UndelegateRecord)(nil),        // 4: nova.gal.v1.UndelegateRecord
	(*UndelegateRecordContent)(nil), // 5: nova.gal.v1.UndelegateRecordContent
	(*WithdrawRecord)(nil),          // 6: nova.gal.v1.WithdrawRecord
	(*WithdrawRecordContent)(nil),   // 7: nova.gal.v1.WithdrawRecordContent
	nil,                             // 8: nova.gal.v1.DelegateRecord.RecordsEntry
	nil,                             // 9: nova.gal.v1.WithdrawRecord.RecordsEntry
	(*v1beta1.Coin)(nil),            // 10: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
}
var file_nova_gal_v1_gal_proto_depIdxs = []int32{
	1,  // 0: nova.gal.v1.DepositRecord.records:type_name -> nova.gal.v1.DepositRecordContent
	10, // 1: nova.gal.v1.DepositRecordContent.amount:type_name -> cosmos.base.v1beta1.Coin
	8,  // 2: nova.gal.v1.DelegateRecord.records:type_name -> nova.gal.v1.DelegateRecord.RecordsEntry
	10, // 3: nova.gal.v1.DelegateRecordContent.amount:type_name -> cosmos.base.v1beta1.Coin
	5,  // 4: nova.gal.v1.UndelegateRecord.records:type_name -> nova.gal.v1.UndelegateRecordContent
	10, // 5: nova.gal.v1.UndelegateRecordContent.sn_asset_amount:type_name -> cosmos.base.v1beta1.Coin
	9,  // 6: nova.gal.v1.WithdrawRecord.records:type_name -> nova.gal.v1.WithdrawRecord.RecordsEntry
	10, // 7: nova.gal.v1.WithdrawRecordContent.unstaking_amount:type_name -> cosmos.base.v1beta1.Coin
	11, // 8: nova.gal.v1.WithdrawRecordContent.completion_time:type_name -> google.protobuf.Timestamp
	3,  // 9: nova.gal.v1.DelegateRecord.RecordsEntry.value:type_name -> nova.gal.v1.DelegateRecordContent
	7,  // 10: nova.gal.v1.WithdrawRecord.RecordsEntry.value:type_name -> nova.gal.v1.WithdrawRecordContent
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_nova_gal_v1_gal_proto_init() }
func file_nova_gal_v1_gal_proto_init() {
	if File_nova_gal_v1_gal_proto != nil {
		return
	}
	file_nova_gal_v1_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nova_gal_v1_gal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRecordContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateRecordContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateRecordContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nova_gal_v1_gal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRecordContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nova_gal_v1_gal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nova_gal_v1_gal_proto_goTypes,
		DependencyIndexes: file_nova_gal_v1_gal_proto_depIdxs,
		MessageInfos:      file_nova_gal_v1_gal_proto_msgTypes,
	}.Build()
	File_nova_gal_v1_gal_proto = out.File
	file_nova_gal_v1_gal_proto_rawDesc = nil
	file_nova_gal_v1_gal_proto_goTypes = nil
	file_nova_gal_v1_gal_proto_depIdxs = nil
}
