// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nova/poolincentive/v1/query.proto

package poolincentivev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	SingleCandidatePool(ctx context.Context, in *QuerySingleCandidatePoolRequest, opts ...grpc.CallOption) (*QuerySingleCandidatePoolResponse, error)
	AllCandidatePool(ctx context.Context, in *QueryAllCandidatePoolRequest, opts ...grpc.CallOption) (*QueryAllCandidatePoolResponse, error)
	SingleIncentivePool(ctx context.Context, in *QuerySingleIncentivePoolRequest, opts ...grpc.CallOption) (*QuerySingleIncentivePoolResponse, error)
	AllIncentivePool(ctx context.Context, in *QueryAllIncentivePoolRequest, opts ...grpc.CallOption) (*QueryAllIncentivePoolResponse, error)
	TotalWeight(ctx context.Context, in *QueryTotalWeightRequest, opts ...grpc.CallOption) (*QueryTotalWeightResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SingleCandidatePool(ctx context.Context, in *QuerySingleCandidatePoolRequest, opts ...grpc.CallOption) (*QuerySingleCandidatePoolResponse, error) {
	out := new(QuerySingleCandidatePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Query/SingleCandidatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllCandidatePool(ctx context.Context, in *QueryAllCandidatePoolRequest, opts ...grpc.CallOption) (*QueryAllCandidatePoolResponse, error) {
	out := new(QueryAllCandidatePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Query/AllCandidatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SingleIncentivePool(ctx context.Context, in *QuerySingleIncentivePoolRequest, opts ...grpc.CallOption) (*QuerySingleIncentivePoolResponse, error) {
	out := new(QuerySingleIncentivePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Query/SingleIncentivePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllIncentivePool(ctx context.Context, in *QueryAllIncentivePoolRequest, opts ...grpc.CallOption) (*QueryAllIncentivePoolResponse, error) {
	out := new(QueryAllIncentivePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Query/AllIncentivePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalWeight(ctx context.Context, in *QueryTotalWeightRequest, opts ...grpc.CallOption) (*QueryTotalWeightResponse, error) {
	out := new(QueryTotalWeightResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Query/TotalWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	SingleCandidatePool(context.Context, *QuerySingleCandidatePoolRequest) (*QuerySingleCandidatePoolResponse, error)
	AllCandidatePool(context.Context, *QueryAllCandidatePoolRequest) (*QueryAllCandidatePoolResponse, error)
	SingleIncentivePool(context.Context, *QuerySingleIncentivePoolRequest) (*QuerySingleIncentivePoolResponse, error)
	AllIncentivePool(context.Context, *QueryAllIncentivePoolRequest) (*QueryAllIncentivePoolResponse, error)
	TotalWeight(context.Context, *QueryTotalWeightRequest) (*QueryTotalWeightResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) SingleCandidatePool(context.Context, *QuerySingleCandidatePoolRequest) (*QuerySingleCandidatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleCandidatePool not implemented")
}
func (UnimplementedQueryServer) AllCandidatePool(context.Context, *QueryAllCandidatePoolRequest) (*QueryAllCandidatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCandidatePool not implemented")
}
func (UnimplementedQueryServer) SingleIncentivePool(context.Context, *QuerySingleIncentivePoolRequest) (*QuerySingleIncentivePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleIncentivePool not implemented")
}
func (UnimplementedQueryServer) AllIncentivePool(context.Context, *QueryAllIncentivePoolRequest) (*QueryAllIncentivePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIncentivePool not implemented")
}
func (UnimplementedQueryServer) TotalWeight(context.Context, *QueryTotalWeightRequest) (*QueryTotalWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalWeight not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SingleCandidatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySingleCandidatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SingleCandidatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Query/SingleCandidatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SingleCandidatePool(ctx, req.(*QuerySingleCandidatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllCandidatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCandidatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllCandidatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Query/AllCandidatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllCandidatePool(ctx, req.(*QueryAllCandidatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SingleIncentivePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySingleIncentivePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SingleIncentivePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Query/SingleIncentivePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SingleIncentivePool(ctx, req.(*QuerySingleIncentivePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllIncentivePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIncentivePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIncentivePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Query/AllIncentivePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIncentivePool(ctx, req.(*QueryAllIncentivePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Query/TotalWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalWeight(ctx, req.(*QueryTotalWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nova.poolincentive.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SingleCandidatePool",
			Handler:    _Query_SingleCandidatePool_Handler,
		},
		{
			MethodName: "AllCandidatePool",
			Handler:    _Query_AllCandidatePool_Handler,
		},
		{
			MethodName: "SingleIncentivePool",
			Handler:    _Query_SingleIncentivePool_Handler,
		},
		{
			MethodName: "AllIncentivePool",
			Handler:    _Query_AllIncentivePool_Handler,
		},
		{
			MethodName: "TotalWeight",
			Handler:    _Query_TotalWeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/poolincentive/v1/query.proto",
}
