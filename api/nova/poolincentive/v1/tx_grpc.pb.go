// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nova/poolincentive/v1/tx.proto

package pool_incentivev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCandidatePool creates new "candidate" pool, which can be created by anyone
	CreateCandidatePool(ctx context.Context, in *MsgCreateCandidatePool, opts ...grpc.CallOption) (*MsgCreateCandidatePoolResponse, error)
	// CreateIncentivePool creates new "incentive" pool, which can be created by only operator
	CreateIncentivePool(ctx context.Context, in *MsgCreateIncentivePool, opts ...grpc.CallOption) (*MsgCreateIncentivePoolResponse, error)
	// SetPoolWeight sets new weight of one pool
	SetPoolWeight(ctx context.Context, in *MsgSetPoolWeight, opts ...grpc.CallOption) (*MsgSetPoolWeightResponse, error)
	// SetMultiplePoolWeight sets new weight of multiple pool
	SetMultiplePoolWeight(ctx context.Context, in *MsgSetMultiplePoolWeight, opts ...grpc.CallOption) (*MsgSetMultiplePoolWeightResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCandidatePool(ctx context.Context, in *MsgCreateCandidatePool, opts ...grpc.CallOption) (*MsgCreateCandidatePoolResponse, error) {
	out := new(MsgCreateCandidatePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.pool_incentive.v1.Msg/CreateCandidatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateIncentivePool(ctx context.Context, in *MsgCreateIncentivePool, opts ...grpc.CallOption) (*MsgCreateIncentivePoolResponse, error) {
	out := new(MsgCreateIncentivePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.pool_incentive.v1.Msg/CreateIncentivePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPoolWeight(ctx context.Context, in *MsgSetPoolWeight, opts ...grpc.CallOption) (*MsgSetPoolWeightResponse, error) {
	out := new(MsgSetPoolWeightResponse)
	err := c.cc.Invoke(ctx, "/nova.pool_incentive.v1.Msg/SetPoolWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMultiplePoolWeight(ctx context.Context, in *MsgSetMultiplePoolWeight, opts ...grpc.CallOption) (*MsgSetMultiplePoolWeightResponse, error) {
	out := new(MsgSetMultiplePoolWeightResponse)
	err := c.cc.Invoke(ctx, "/nova.pool_incentive.v1.Msg/SetMultiplePoolWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// CreateCandidatePool creates new "candidate" pool, which can be created by anyone
	CreateCandidatePool(context.Context, *MsgCreateCandidatePool) (*MsgCreateCandidatePoolResponse, error)
	// CreateIncentivePool creates new "incentive" pool, which can be created by only operator
	CreateIncentivePool(context.Context, *MsgCreateIncentivePool) (*MsgCreateIncentivePoolResponse, error)
	// SetPoolWeight sets new weight of one pool
	SetPoolWeight(context.Context, *MsgSetPoolWeight) (*MsgSetPoolWeightResponse, error)
	// SetMultiplePoolWeight sets new weight of multiple pool
	SetMultiplePoolWeight(context.Context, *MsgSetMultiplePoolWeight) (*MsgSetMultiplePoolWeightResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateCandidatePool(context.Context, *MsgCreateCandidatePool) (*MsgCreateCandidatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCandidatePool not implemented")
}
func (UnimplementedMsgServer) CreateIncentivePool(context.Context, *MsgCreateIncentivePool) (*MsgCreateIncentivePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncentivePool not implemented")
}
func (UnimplementedMsgServer) SetPoolWeight(context.Context, *MsgSetPoolWeight) (*MsgSetPoolWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoolWeight not implemented")
}
func (UnimplementedMsgServer) SetMultiplePoolWeight(context.Context, *MsgSetMultiplePoolWeight) (*MsgSetMultiplePoolWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiplePoolWeight not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateCandidatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCandidatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCandidatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.pool_incentive.v1.Msg/CreateCandidatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCandidatePool(ctx, req.(*MsgCreateCandidatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateIncentivePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIncentivePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIncentivePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.pool_incentive.v1.Msg/CreateIncentivePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIncentivePool(ctx, req.(*MsgCreateIncentivePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPoolWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPoolWeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPoolWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.pool_incentive.v1.Msg/SetPoolWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPoolWeight(ctx, req.(*MsgSetPoolWeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMultiplePoolWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMultiplePoolWeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMultiplePoolWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.pool_incentive.v1.Msg/SetMultiplePoolWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMultiplePoolWeight(ctx, req.(*MsgSetMultiplePoolWeight))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nova.pool_incentive.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCandidatePool",
			Handler:    _Msg_CreateCandidatePool_Handler,
		},
		{
			MethodName: "CreateIncentivePool",
			Handler:    _Msg_CreateIncentivePool_Handler,
		},
		{
			MethodName: "SetPoolWeight",
			Handler:    _Msg_SetPoolWeight_Handler,
		},
		{
			MethodName: "SetMultiplePoolWeight",
			Handler:    _Msg_SetMultiplePoolWeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/poolincentive/v1/tx.proto",
}
