syntax = "proto3";
package nova.icacontrol.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/authz/v1beta1/authz.proto";
import "nova/icacontrol/v1/icacontrol.proto";

option go_package = "github.com/Carina-labs/nova/v2/x/icacontrol/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the icacontrol Msg service.
service Msg {
  // RegisterZone defines a rpc handler for MsgRegisterZone
  rpc RegisterZone(MsgRegisterZone) returns (MsgRegisterZoneResponse);
  // IcaDelegate defines a rpc handler for MsgIcaDelegate
  rpc IcaDelegate(MsgIcaDelegate) returns (MsgIcaDelegateResponse);
  // IcaUnDelegate defines a rpc handler for MsgIcaUnDelegate
  rpc IcaUndelegate(MsgIcaUndelegate) returns (MsgIcaUndelegateResponse);
  // IcaTransfer defines a rpc handler for MsgIcaTransfer
  rpc IcaTransfer(MsgIcaTransfer) returns (MsgIcaTransferResponse);
  // IcaAutoStaking defines a rpc handler for MsgIcaAutoStaking
  rpc IcaAutoStaking(MsgIcaAutoStaking) returns (MsgIcaAutoStakingResponse);
  // DeleteRegisteredZone defines a rpc handler for MsgDeleteRegisteredZone
  rpc IcaAuthzGrant(MsgIcaAuthzGrant) returns (MsgIcaAuthzGrantResponse);
  rpc IcaAuthzRevoke(MsgIcaAuthzRevoke) returns (MsgIcaAuthzRevokeResponse);
  rpc DeleteRegisteredZone(MsgDeleteRegisteredZone) returns (MsgDeleteRegisteredZoneResponse);
  rpc ChangeRegisteredZone(MsgChangeRegisteredZone) returns (MsgChangeRegisteredZoneResponse);
  rpc RegisterControllerAddress(MsgRegisterControllerAddr) returns (MsgRegisterControllerAddrResponse);
}

// MsgRegisterZone is the message you use to register a new zone.
message MsgRegisterZone {
  option (gogoproto.equal) = false;

  string zone_id = 1;
  IcaConnectionInfo ica_info = 2;
  IcaAccount ica_account = 3;
  TransferConnectionInfo transfer_info = 4;
  string validator_address = 5;
  string base_denom = 6;
  int64 decimal = 7;
  int64 undelegate_max_entries = 8;
  int64 deposit_max_entries = 9;
}

// MsgRegisterZoneResponse is a response message for MsgRegisterZone
message MsgRegisterZoneResponse {
  string zone_id = 1;
  IcaConnectionInfo ica_info = 2;
  IcaAccount ica_account = 3;
  TransferConnectionInfo transfer_info = 4;
  string validator_address = 5;
  string base_denom = 6;
  string sn_denom = 7;
  int64 decimal = 8;
  int64 undelegate_max_entries = 9;
  int64 deposit_max_entries = 10;
}

// MsgChangeRegisteredZone modifies the information in the registeredZone.
message MsgChangeRegisteredZone{
  option (gogoproto.equal) = false;

  string zone_id = 1;
  IcaConnectionInfo ica_info = 2;
  IcaAccount ica_account = 3;
  TransferConnectionInfo transfer_info = 4;
  string validator_address = 5;
  string base_denom = 6;
  int64 decimal = 7;
  int64 undelegate_max_entries = 8;
  int64 deposit_max_entries = 9;
}

// MsgChangeRegisteredZoneResponse is a response message for MsgChangeRegisteredZone.
message MsgChangeRegisteredZoneResponse{
  string zone_id = 1;
  IcaConnectionInfo ica_info = 2;
  IcaAccount ica_account = 3;
  TransferConnectionInfo transfer_info = 4;
  string validator_address = 5;
  string base_denom = 6;
  string sn_denom = 7;
  int64 decimal = 8;
  int64 undelegate_max_entries = 9;
  int64 deposit_max_entries = 10;
}

// MsgDeleteRegisteredZone deletes registered Zone information.
message MsgDeleteRegisteredZone{
  string zone_id = 1;
  string controller_address = 2;
}

// MsgDeleteRegisteredZoneResponse is a response message for MsgDeleteRegisteredZone.
message MsgDeleteRegisteredZoneResponse{}

// MsgIcaDelegate is a message used for remote delegation using ICA.
message MsgIcaDelegate{
  string zone_id = 1;
  string controller_address = 2;
  cosmos.base.v1beta1.Coin amount = 3[(gogoproto.nullable) = false];
  uint64 timeout_timestamp = 4;
}

// MsgIcaDelegateResponse is a response message for MsgIcaDelegate.
message MsgIcaDelegateResponse{}

// MsgIcaUndelegate is a message used to de-delegate remote using ICA.
message MsgIcaUndelegate{
  string zone_id = 1;
  string controller_address = 2;
  cosmos.base.v1beta1.Coin amount = 3[(gogoproto.nullable) = false];
  uint64 timeout_timestamp = 4;
}

// MsgIcaUndelegateResponse is a response message for MsgIcaUndelegate.
message MsgIcaUndelegateResponse{}

// MsgIcaAutoStaking is a message for remote auto-compound using ICA.
message MsgIcaAutoStaking{
  string zone_id = 1;
  string controller_address = 2;
  cosmos.base.v1beta1.Coin amount = 3[(gogoproto.nullable) = false];
  uint64 version = 4;
  uint64 timeout_timestamp = 5;
}

// MsgIcaAutoStakingResponse is a response message for MsgIcaAutoStaking.
message MsgIcaAutoStakingResponse{}

// MsgIcaTransfer is a message for IBC transfer from the counterpart to the Supernova chain using ICA.
message MsgIcaTransfer{
  string zone_id = 1;
  string controller_address = 2;
  string receiver_address = 3;
  string ica_transfer_port_id = 4;
  string ica_transfer_channel_id = 5;
  cosmos.base.v1beta1.Coin amount = 6[(gogoproto.nullable) = false];
  uint64 timeout_timestamp = 7;
}

// MsgIcaTransferResponse is a response message for MsgIcaTransfer.
message MsgIcaTransferResponse{}

// MsgIcaAuthzGrant is a message used to transfer authority through authz between two accounts in the other chain using ICA.
message MsgIcaAuthzGrant{
  string zone_id = 1;
  string grantee = 2;
  string controller_address = 3;
  cosmos.authz.v1beta1.Grant grant = 4 [(gogoproto.nullable) = false];
  uint64 timeout_timestamp = 5;
}

// MsgIcaAuthzGrantResponse is a response messasge for MsgIcaAuthzGrant.
message MsgIcaAuthzGrantResponse{}

// MsgIcaAuthzRevoke is a message used for proxy execution between accounts linked to authz via ICA.
message MsgIcaAuthzRevoke{
  string zone_id = 1;
  string grantee = 2;
  string controller_address = 3;
  string msg_type_url = 4;
  uint64 timeout_timestamp = 5;
}

// MsgIcaAuthzRevokeResponse is a response message for MsgIcaAuthzRevoke.
message MsgIcaAuthzRevokeResponse{}

// MsgRegisterControllerAddr is a message used for
message MsgRegisterControllerAddr{
  string zone_id = 1;
  string controller_address = 2;
  string from_address = 3;
}

// MsgRegisterControllerAddrResponse is a response message for MsgRegisterControllerAddr.
message MsgRegisterControllerAddrResponse{}