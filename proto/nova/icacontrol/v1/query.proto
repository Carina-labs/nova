syntax = "proto3";
package nova.icacontrol.v1;

import "gogoproto/gogo.proto";
import "nova/icacontrol/v1/icacontrol.proto";
import "nova/icacontrol/v1/store.proto";
import "google/api/annotations.proto";

option go_package = "github.com/Carina-labs/nova/x/icacontrol/types";

// Query defines the gRPC querier service.
service Query {
  // AllZones returns all the zones registered.
  rpc AllZones(QueryAllZonesRequest) returns (QueryAllZonesResponse) {
    option (google.api.http).get = "/nova/icacontrol/v1/zones/all";
  }
  rpc Zone(QueryZoneRequest) returns (QueryZoneResponse) {
    option (google.api.http).get = "/nova/icacontrol/v1/zone/{zone_id}";
  }
  rpc AutoStakingVersion(QueryAutoStakingVersion) returns (QueryAutoStakingVersionResponse) {
    option (google.api.http).get = "/nova/icacontrol/v1/autostaking_version/{zone_id}/{version}";
  }
  rpc AutoStakingCurrentVersion(QueryCurrentAutoStakingVersion) returns (QueryCurrentAutoStakingVersionResponse) {
    option (google.api.http).get = "/nova/icacontrol/v1/autostaking_version/{zone_id}";
  }
}

// QueryAllZonesRequest is the request type for Query/AllZones.
message QueryAllZonesRequest {};

// QueryAllZonesResponse is the response type for Query/AllZones.
message QueryAllZonesResponse {
  repeated RegisteredZone zones = 1;
}

// QueryZoneRequest is the request type for Query/Zone.
message QueryZoneRequest {
  string zone_id = 1;
};

// QueryZoneResponse is the response type for Query/Zone.
message QueryZoneResponse {
  RegisteredZone zone = 1;
}

message QueryAutoStakingVersion {
  string zone_id = 1;
  uint64 version = 2;
}

message QueryAutoStakingVersionResponse {
  IBCTrace version_info = 1;
}

message QueryCurrentAutoStakingVersion {
  string zone_id = 1;
}

message QueryCurrentAutoStakingVersionResponse {
  uint64 version = 1;
}