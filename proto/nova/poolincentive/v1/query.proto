syntax = "proto3";
package nova.poolincentive.v1;

option go_package = "github.com/Carina-labs/nova/x/poolincentive/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nova/poolincentive/v1/params.proto";
import "nova/poolincentive/v1/genesis.proto";

service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nova/poolincentive/v1/params";
  }

  rpc SingleCandidatePool(QuerySingleCandidatePool) returns (QuerySingleCandidatePool);
  rpc AllCandidatePool(QueryAllCandidatePool) returns (QueryAllCandidatePoolResponse);
  rpc SingleIncentivePool(QuerySingleIncentivePool) returns (QueryAllCandidatePoolResponse);
  rpc AllIncentivePool(QueryAllIncentivePool) returns (QueryAllIncentivePoolResponse);
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {

}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QuerySingleCandidatePool {
  string pool_id = 1;
}

message QuerySingleCandidatePoolResponse {
  string pool_id = 1;
  string pool_address = 2;
}

message QuerySingleIncentivePool {
  string pool_id = 1;
}

message QuerySingleIncentivePoolResponse {
  string pool_id = 1;
  string pool_address = 2;
}

message QueryAllCandidatePool {

}

message QueryAllCandidatePoolResponse {
  repeated CandidatePool candidate_pools = 1 [(gogoproto.nullable) = false];
}

message QueryAllIncentivePool {

}

message QueryAllIncentivePoolResponse {
  repeated IncentivePool incentive_pools = 1 [(gogoproto.nullable) = false];
}