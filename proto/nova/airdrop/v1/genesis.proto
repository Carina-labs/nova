syntax = "proto3";
package nova.airdrop.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/Carina-labs/nova/x/airdrop/types";

message GenesisState {
  // states for the airdrop, how much coins are allocated for each address is must be pre-defined.
  repeated UserState states = 2;

  // information for the airdrop
  AirdropInfo airdrop_info = 3;
}

// AirdropInfo stores metadata related to airdrop. This includes airdrop start and end times, maximum acceptable quantity, etc.
message AirdropInfo {
  // The snapshot date based for the distribution of the airdrop.
  google.protobuf.Timestamp snapshot_timestamp = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // THe time when you can claim your airdrop nova tokens.
  google.protobuf.Timestamp airdrop_start_timestamp = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // THe time when the user no longer can claim the airdrop tokens.
  google.protobuf.Timestamp airdrop_end_timestamp = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  string airdrop_amount = 4[(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];

  // The denom for the airdrop coin.
  string airdrop_denom = 5;

  // the number of quests user to do
  int32 quests_count = 6;

  // controller address is responsible to check the user has performed the social quest (e.g. twitter, facebook or etc)
  string controller_address = 7;

  // maximum token allocation for each user, an use cannot claim more than this amount;
  string maximum_token_alloc_per_user = 8;
}

enum QuestType {
  QUEST_NOTHING_TO_DO = 0;
  QUEST_SOCIAL = 1;
  QUEST_SN_ASSET_CLAIM = 2;
  QUEST_PROVIDE_LIQUIDITY = 3;
  QUEST_VOTE_ON_PROPOSALS = 4;
}

enum QuestStateType {
  // quest is not conducted by user yet
  QUEST_STATE_NOT_STARTED = 0;

  // quest is done, now user can claim her/his airdrop reward.
  QUEST_STATE_CLAIMABLE = 1;

  // quest is done, and user has claimed her/his airdrop reward.
  QUEST_STATE_CLAIMED = 2;
};

// UserState indicates the status of the user performing the quest.
message UserState {
  option (gogoproto.marshaler) = true;
  option (gogoproto.stable_marshaler) = true;
  // address of the airdrop recipient.
  string recipient = 1;

  // amount of coins to be allocated to the recipient.
  string total_amount = 2;

  // claim histories
  map<int32, QuestState> quest_states = 3;
}

// QuestState indicates the status of the quest that users perform.
message QuestState {
  // state to indicate that quest is not started, claimable or claimed.
  QuestStateType state = 1;

  // achieve_timestamp is the timestamp when the quest is achieved.
  google.protobuf.Timestamp achieved_at = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // claim_timestamp is the timestamp when the user claimed the amount.
  google.protobuf.Timestamp claimed_at = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // claimed amount, this field is empty if user not claimed for this quest yet
  string claimed_amount = 4;
}