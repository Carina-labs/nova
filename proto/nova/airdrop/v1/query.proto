syntax = "proto3";
package nova.airdrop.v1;

import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

import "nova/airdrop/v1/genesis.proto";

option go_package = "github.com/Carina-labs/nova/x/airdrop/types";

service Query {
  // get airdrop info
  rpc AirdropInfo(QueryAirdropInfoRequest) returns (QueryAirdropInfoResponse) {}

  // get total assets of the airdrop for a given address
  rpc TotalAllocatedAirdropToken(QueryTotalAllocatedAirdropTokenRequest) returns (QueryTotalAllocatedAirdropTokenResponse) {
    option (google.api.http).get = "/nova/airdrop/v1/total_asset_for_airdrop";
  }

  // query for state of quests
  rpc QuestState(QueryQuestStateRequest) returns (QueryQuestStateResponse) {
    option (google.api.http).get = "/nova/airdrop/v1/quest_state";
  }
}

message QueryAirdropInfoRequest {}
message QueryAirdropInfoResponse {
  AirdropInfo airdrop_info = 1;
}

message QueryTotalAllocatedAirdropTokenRequest {
  // address of the airdrop recipient.
  string address = 1;
}

message QueryTotalAllocatedAirdropTokenResponse {
  // total_asset_for_airdrop is the total asset for airdrop.
  cosmos.base.v1beta1.Coin total_assets = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message QueryQuestStateRequest {
  // address of the airdrop recipient.
  string address = 1;
}

message QueryQuestStateResponse {
  map<int32, QuestState> quest_states = 1;
}