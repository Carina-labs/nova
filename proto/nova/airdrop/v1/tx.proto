syntax = "proto3";
package nova.airdrop.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "nova/airdrop/v1/genesis.proto";

option go_package = "github.com/Carina-labs/nova/x/airdrop/types";

service Msg {
  rpc ClaimAirdrop(MsgClaimAirdropRequest) returns (MsgClaimAirdropResponse);

  rpc MarkSocialQuestPerformed(MsgMarkSocialQuestPerformedRequest) returns (MsgMarkSocialQuestPerformedResponse);

  rpc MarkUserProvidedLiquidity(MsgMarkUserProvidedLiquidityRequest) returns (MsgMarkUserProvidedLiquidityResponse);

  rpc ImportAirdropData(MsgImportAirdropDataRequest) returns (MsgImportAirdropDataResponse);
}

// MsgClaimAirdropRequest is an airdrop volume request message.
message MsgClaimAirdropRequest {
  option (cosmos.msg.v1.signer) = "user_address";

  // address of the airdrop recipient.
  string user_address = 1 ;

  // quest type of the airdrop to claim.
  QuestType quest_type = 2;
}

// MsgClaimAirdropResponse is a response message for MsgClaimAirdropRequest.
message MsgClaimAirdropResponse {
}

// MsgMarkSocialQuestPerformedRequest the controller marks social quest performed for the users.
message MsgMarkSocialQuestPerformedRequest {
  option (cosmos.msg.v1.signer) = "controller_address";

  // controller address for the airdrop module.
  string controller_address = 1;

  // the addresses of the users who performed the social quest.
  repeated string user_addresses = 2;
}

// MsgMarkSocialQuestPerformedResponse is a response message for MsgMarkSocialQuestPerformedRequest.
message MsgMarkSocialQuestPerformedResponse {
}

// MsgMarkUserProvidedLiquidityRequest is a message that marks a particular user as having provided liquidity to Supernova.
message MsgMarkUserProvidedLiquidityRequest {
  option (cosmos.msg.v1.signer) = "controller_address";

  // controller address for the airdrop module.
  string controller_address = 1;

  // the addresses of the users who provided the liquidities.
  repeated string user_addresses = 2;
}

// MsgMarkUserProvidedLiquidityResponse is a response message for MsgMarkUserProvidedLiquidityRequest.
message MsgMarkUserProvidedLiquidityResponse {
}

message MsgImportAirdropDataRequest{
  option (cosmos.msg.v1.signer) = "controller_address";

  repeated UserState states = 1;
  string controller_address = 2;
}

message MsgImportAirdropDataResponse{

}