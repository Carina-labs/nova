syntax = "proto3";
package nova.gal.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/Carina-labs/nova/x/gal/types";

// Msg defines the gal Msg service.
service Msg {
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  rpc Delegate(MsgDelegate) returns (MsgDelegateResponse);
  rpc Undelegate(MsgUndelegate) returns (MsgUndelegateResponse);
  rpc PendingUndelegate(MsgPendingUndelegate) returns (MsgPendingUndelegateResponse);
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);
  rpc ClaimSnAsset(MsgClaimSnAsset) returns (MsgClaimSnAssetResponse);
  rpc PendingWithdraw(MsgPendingWithdraw) returns (MsgPendingWithdrawResponse);
}

// MsgDeposit defines user who deposit and amount of coins.
message MsgDeposit {
  string zone_id = 1;
  string depositor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string claimer = 3;
  cosmos.base.v1beta1.Coin amount = 4 [(gogoproto.nullable) = false];
  string transfer_port_id = 5;
  string transfer_channel_id = 6;
}

message MsgDepositResponse {
  string receiver = 1;
  string depositor = 2;
  cosmos.base.v1beta1.Coin deposited_amount = 3 [(gogoproto.nullable) = false];
}

message MsgDelegate {
  string zone_id = 1;
  string controller_address = 2;
  string transfer_port_id = 3;
  string transfer_channel_id = 4;
}

message MsgDelegateResponse {
}

message MsgUndelegate {
  string zone_id = 1;
  string controller_address = 2;
}

message MsgUndelegateResponse{
  string zone_id = 1;
  cosmos.base.v1beta1.Coin total_burn_asset = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin total_undelegate_asset = 3 [(gogoproto.nullable) = false];
}

// MsgUnStaking defines user who want to un-stake his/her asset.
message MsgPendingUndelegate {
  string zone_id = 1;
  string delegator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string withdrawer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 4 [(gogoproto.nullable) = false];
}

message MsgPendingUndelegateResponse {
  string zone_id = 1;
  string delegator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string withdrawer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin burn_asset = 4 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin undelegate_asset = 5 [(gogoproto.nullable) = false];
}

// MsgWithdraw defines user who withdraw and amount of coins.
message MsgWithdraw {
  string zone_id = 1;
  string withdrawer = 2[(cosmos_proto.scalar) = "cosmos.AddressString"];
  string transfer_port_id = 3;
  string transfer_channel_id = 4;
}

message MsgWithdrawResponse {
  string withdrawer = 1;
  string withdraw_amount = 2[(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgClaim defines claim msg used when user want to claim their st token.
message MsgClaimSnAsset {
  string zone_id = 1;
  string claimer = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string transfer_port_id = 3;
  string transfer_channel_id = 4;
}

message MsgClaimSnAssetResponse {
  string claimer = 1;
  cosmos.base.v1beta1.Coin minted = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgPendingWithdraw{
  string zone_id = 1;
  string controller_address = 2;
  string ica_transfer_port_id = 3;
  string ica_transfer_channel_id = 4;
  google.protobuf.Timestamp chain_time = 5[(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message MsgPendingWithdrawResponse{}