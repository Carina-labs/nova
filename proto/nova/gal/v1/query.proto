syntax = "proto3";
package nova.gal.v1;

import "gogoproto/gogo.proto";
import "nova/gal/v1/params.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/Carina-labs/nova/x/gal/types";

// Query defines the gRPC querier service.
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nova/gal/v1/params";
  }

  rpc ClaimableAmount(ClaimableAmountRequest) returns (ClaimableAmountResponse) {
    option (google.api.http).get = "/nova/gal/v1/claimable_amount/{address}/{zone_id}";
  }

  rpc PendingWithdrawals(PendingWithdrawalsRequest) returns (PendingWithdrawalsResponse) {
    option (google.api.http).get = "/nova/gal/v1/pending_withdrawals/{address}/{zone_id}";
  }

  rpc ActiveWithdrawals(ActiveWithdrawalsRequest) returns (ActiveWithdrawalsResponse) {
    option (google.api.http).get = "/nova/gal/v1/active_withdrawals/{address}/{zone_id}";
  }

  rpc Share(QueryMyShareRequest) returns (QueryMyShareResponse) {
    option (google.api.http).get = "/nova/gal/v1/shares/{address}/{zone_id}";
  }

  rpc DepositHistory(QueryDepositHistoryRequest) returns (QueryDepositHistoryResponse) {
    option (google.api.http).get = "/nova/gal/v1/deposit/{address}/{zone_id}";
  }

  rpc UndelegateHistory(QueryUndelegateHistoryRequest) returns (QueryUndelegateHistoryResponse) {
    option (google.api.http).get = "/nova/get/v1/undelegate/{address}/{zone_id}";
  }

  rpc WithdrawHistory(QueryWithdrawHistoryRequest) returns (QueryWithdrawHistoryResponse) {
    option (google.api.http).get = "/nova/get/v1/withdraw/{address}/{zone_id}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {

}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// ClaimableAmountRequest is the request type for the Query/ClaimableAmount RPC method.
message ClaimableAmountRequest {
  string zone_id = 1;
  string address = 2;
}

// ClaimableAmountResponse is the response type for the Query/ClaimableAmount RPC method.
message ClaimableAmountResponse {
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// PendingWithdrawalsRequest is the request type for the Query/PendingWithdrawals RPC method.
message PendingWithdrawalsRequest {
  string zone_id = 1;
  string address = 2;
}

// PendingWithdrawalsResponse is the response type for the Query/PendingWithdrawals RPC method.
message PendingWithdrawalsResponse {
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// ActiveWithdrawalsRequest is the request type for the Query/ActiveWithdrawals RPC method.
message ActiveWithdrawalsRequest {
  string zone_id = 1;
  string address = 2;
}

// ActiveWithdrawalsResponse is the response type for the Query/ActiveWithdrawals RPC method.
message ActiveWithdrawalsResponse {
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// QueryMyShareRequest defines request form to query balance of snToken with address.
message QueryMyShareRequest {
  string zone_id = 1;
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QuerySharesResponse defines response of QueryBalanceRequest.
message QueryMyShareResponse{
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message QueryAllSharesRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryDepositHistoryRequest {
  string zone_id = 1;
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryDepositHistoryResponse {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 2
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message QueryUndelegateHistoryRequest {
  string zone_id = 1;
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryUndelegateHistoryResponse {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin burned_sn_asset = 2
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  repeated cosmos.base.v1beta1.Coin minted_w_asset = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message QueryWithdrawHistoryRequest {
  string zone_id = 1;
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryWithdrawHistoryResponse {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 2
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}