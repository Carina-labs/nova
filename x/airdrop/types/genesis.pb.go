// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/airdrop/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuestType int32

const (
	QuestType_QUEST_NOTHING_TO_DO     QuestType = 0
	QuestType_QUEST_SOCIAL            QuestType = 1
	QuestType_QUEST_SN_ASSET_CLAIM    QuestType = 2
	QuestType_QUEST_PROVIDE_LIQUIDITY QuestType = 3
	QuestType_QUEST_VOTE_ON_PROPOSALS QuestType = 4
)

var QuestType_name = map[int32]string{
	0: "QUEST_NOTHING_TO_DO",
	1: "QUEST_SOCIAL",
	2: "QUEST_SN_ASSET_CLAIM",
	3: "QUEST_PROVIDE_LIQUIDITY",
	4: "QUEST_VOTE_ON_PROPOSALS",
}

var QuestType_value = map[string]int32{
	"QUEST_NOTHING_TO_DO":     0,
	"QUEST_SOCIAL":            1,
	"QUEST_SN_ASSET_CLAIM":    2,
	"QUEST_PROVIDE_LIQUIDITY": 3,
	"QUEST_VOTE_ON_PROPOSALS": 4,
}

func (x QuestType) String() string {
	return proto.EnumName(QuestType_name, int32(x))
}

func (QuestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac0a958a67617af, []int{0}
}

type QuestStateType int32

const (
	// quest is not conducted by user yet
	QuestStateType_QUEST_STATE_NOT_STARTED QuestStateType = 0
	// quest is done, now user can claim her/his airdrop reward.
	QuestStateType_QUEST_STATE_CLAIMABLE QuestStateType = 1
	// quest is done, and user has claimed her/his airdrop reward.
	QuestStateType_QUEST_STATE_CLAIMED QuestStateType = 2
)

var QuestStateType_name = map[int32]string{
	0: "QUEST_STATE_NOT_STARTED",
	1: "QUEST_STATE_CLAIMABLE",
	2: "QUEST_STATE_CLAIMED",
}

var QuestStateType_value = map[string]int32{
	"QUEST_STATE_NOT_STARTED": 0,
	"QUEST_STATE_CLAIMABLE":   1,
	"QUEST_STATE_CLAIMED":     2,
}

func (x QuestStateType) String() string {
	return proto.EnumName(QuestStateType_name, int32(x))
}

func (QuestStateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aac0a958a67617af, []int{1}
}

type GenesisState struct {
	// states for the airdrop, how much coins are allocated for each address is must be pre-defined.
	States []*UserState `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	// information for the airdrop
	AirdropInfo *AirdropInfo `protobuf:"bytes,3,opt,name=airdrop_info,json=airdropInfo,proto3" json:"airdrop_info,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac0a958a67617af, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetStates() []*UserState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *GenesisState) GetAirdropInfo() *AirdropInfo {
	if m != nil {
		return m.AirdropInfo
	}
	return nil
}

// AirdropInfo stores metadata related to airdrop. This includes airdrop start and end times, maximum acceptable quantity, etc.
type AirdropInfo struct {
	// The snapshot date based for the distribution of the airdrop.
	SnapshotTimestamp time.Time `protobuf:"bytes,1,opt,name=snapshot_timestamp,json=snapshotTimestamp,proto3,stdtime" json:"snapshot_timestamp"`
	// THe time when you can claim your airdrop nova tokens.
	AirdropStartTimestamp time.Time `protobuf:"bytes,2,opt,name=airdrop_start_timestamp,json=airdropStartTimestamp,proto3,stdtime" json:"airdrop_start_timestamp"`
	// THe time when the user no longer can claim the airdrop tokens.
	AirdropEndTimestamp time.Time                              `protobuf:"bytes,3,opt,name=airdrop_end_timestamp,json=airdropEndTimestamp,proto3,stdtime" json:"airdrop_end_timestamp"`
	AirdropAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=airdrop_amount,json=airdropAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"airdrop_amount"`
	// The denom for the airdrop coin.
	AirdropDenom string `protobuf:"bytes,5,opt,name=airdrop_denom,json=airdropDenom,proto3" json:"airdrop_denom,omitempty"`
	// the number of quests user to do
	QuestsCount int32 `protobuf:"varint,6,opt,name=quests_count,json=questsCount,proto3" json:"quests_count,omitempty"`
	// controller address is responsible to check the user has performed the social quest (e.g. twitter, facebook or etc)
	ControllerAddress string `protobuf:"bytes,7,opt,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
	// maximum token allocation for each user, an use cannot claim more than this amount;
	MaximumTokenAllocPerUser string `protobuf:"bytes,8,opt,name=maximum_token_alloc_per_user,json=maximumTokenAllocPerUser,proto3" json:"maximum_token_alloc_per_user,omitempty"`
}

func (m *AirdropInfo) Reset()         { *m = AirdropInfo{} }
func (m *AirdropInfo) String() string { return proto.CompactTextString(m) }
func (*AirdropInfo) ProtoMessage()    {}
func (*AirdropInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac0a958a67617af, []int{1}
}
func (m *AirdropInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropInfo.Merge(m, src)
}
func (m *AirdropInfo) XXX_Size() int {
	return m.Size()
}
func (m *AirdropInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropInfo proto.InternalMessageInfo

func (m *AirdropInfo) GetSnapshotTimestamp() time.Time {
	if m != nil {
		return m.SnapshotTimestamp
	}
	return time.Time{}
}

func (m *AirdropInfo) GetAirdropStartTimestamp() time.Time {
	if m != nil {
		return m.AirdropStartTimestamp
	}
	return time.Time{}
}

func (m *AirdropInfo) GetAirdropEndTimestamp() time.Time {
	if m != nil {
		return m.AirdropEndTimestamp
	}
	return time.Time{}
}

func (m *AirdropInfo) GetAirdropDenom() string {
	if m != nil {
		return m.AirdropDenom
	}
	return ""
}

func (m *AirdropInfo) GetQuestsCount() int32 {
	if m != nil {
		return m.QuestsCount
	}
	return 0
}

func (m *AirdropInfo) GetControllerAddress() string {
	if m != nil {
		return m.ControllerAddress
	}
	return ""
}

func (m *AirdropInfo) GetMaximumTokenAllocPerUser() string {
	if m != nil {
		return m.MaximumTokenAllocPerUser
	}
	return ""
}

// UserState indicates the status of the user performing the quest.
type UserState struct {
	// address of the airdrop recipient.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// amount of coins to be allocated to the recipient.
	TotalAmount string `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// claim histories
	QuestStates map[int32]*QuestState `protobuf:"bytes,3,rep,name=quest_states,json=questStates,proto3" json:"quest_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UserState) Reset()         { *m = UserState{} }
func (m *UserState) String() string { return proto.CompactTextString(m) }
func (*UserState) ProtoMessage()    {}
func (*UserState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac0a958a67617af, []int{2}
}
func (m *UserState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserState.Merge(m, src)
}
func (m *UserState) XXX_Size() int {
	return m.Size()
}
func (m *UserState) XXX_DiscardUnknown() {
	xxx_messageInfo_UserState.DiscardUnknown(m)
}

var xxx_messageInfo_UserState proto.InternalMessageInfo

func (m *UserState) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *UserState) GetTotalAmount() string {
	if m != nil {
		return m.TotalAmount
	}
	return ""
}

func (m *UserState) GetQuestStates() map[int32]*QuestState {
	if m != nil {
		return m.QuestStates
	}
	return nil
}

// QuestState indicates the status of the quest that users perform.
type QuestState struct {
	// state to indicate that quest is not started, claimable or claimed.
	State QuestStateType `protobuf:"varint,1,opt,name=state,proto3,enum=nova.airdrop.v1.QuestStateType" json:"state,omitempty"`
	// achieve_timestamp is the timestamp when the quest is achieved.
	AchievedAt time.Time `protobuf:"bytes,2,opt,name=achieved_at,json=achievedAt,proto3,stdtime" json:"achieved_at"`
	// claim_timestamp is the timestamp when the user claimed the amount.
	ClaimedAt time.Time `protobuf:"bytes,3,opt,name=claimed_at,json=claimedAt,proto3,stdtime" json:"claimed_at"`
	// claimed amount, this field is empty if user not claimed for this quest yet
	ClaimedAmount string `protobuf:"bytes,4,opt,name=claimed_amount,json=claimedAmount,proto3" json:"claimed_amount,omitempty"`
}

func (m *QuestState) Reset()         { *m = QuestState{} }
func (m *QuestState) String() string { return proto.CompactTextString(m) }
func (*QuestState) ProtoMessage()    {}
func (*QuestState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aac0a958a67617af, []int{3}
}
func (m *QuestState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestState.Merge(m, src)
}
func (m *QuestState) XXX_Size() int {
	return m.Size()
}
func (m *QuestState) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestState.DiscardUnknown(m)
}

var xxx_messageInfo_QuestState proto.InternalMessageInfo

func (m *QuestState) GetState() QuestStateType {
	if m != nil {
		return m.State
	}
	return QuestStateType_QUEST_STATE_NOT_STARTED
}

func (m *QuestState) GetAchievedAt() time.Time {
	if m != nil {
		return m.AchievedAt
	}
	return time.Time{}
}

func (m *QuestState) GetClaimedAt() time.Time {
	if m != nil {
		return m.ClaimedAt
	}
	return time.Time{}
}

func (m *QuestState) GetClaimedAmount() string {
	if m != nil {
		return m.ClaimedAmount
	}
	return ""
}

func init() {
	proto.RegisterEnum("nova.airdrop.v1.QuestType", QuestType_name, QuestType_value)
	proto.RegisterEnum("nova.airdrop.v1.QuestStateType", QuestStateType_name, QuestStateType_value)
	proto.RegisterType((*GenesisState)(nil), "nova.airdrop.v1.GenesisState")
	proto.RegisterType((*AirdropInfo)(nil), "nova.airdrop.v1.AirdropInfo")
	proto.RegisterType((*UserState)(nil), "nova.airdrop.v1.UserState")
	proto.RegisterMapType((map[int32]*QuestState)(nil), "nova.airdrop.v1.UserState.QuestStatesEntry")
	proto.RegisterType((*QuestState)(nil), "nova.airdrop.v1.QuestState")
}

func init() { proto.RegisterFile("nova/airdrop/v1/genesis.proto", fileDescriptor_aac0a958a67617af) }

var fileDescriptor_aac0a958a67617af = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0x25, 0xcb, 0xb5, 0x46, 0x8e, 0xcb, 0x6c, 0x12, 0x98, 0x55, 0x5c, 0xc9, 0x75, 0xd1,
	0xc2, 0x48, 0x60, 0x12, 0x72, 0x51, 0xa0, 0xc8, 0xa1, 0x05, 0x2d, 0x11, 0x29, 0x01, 0x55, 0xb2,
	0x49, 0x3a, 0xe8, 0x17, 0xb0, 0x58, 0x51, 0x6b, 0x99, 0x30, 0xc9, 0x55, 0xb9, 0x2b, 0x21, 0x3e,
	0xe7, 0x52, 0xf4, 0x94, 0x63, 0xaf, 0xb9, 0xf5, 0xa7, 0xe4, 0x98, 0x63, 0xd1, 0x43, 0x5a, 0xd8,
	0xff, 0xa1, 0xe7, 0x82, 0x4b, 0x52, 0x54, 0x63, 0xb4, 0x80, 0x4f, 0x1c, 0xce, 0x7b, 0xf3, 0x66,
	0x66, 0xf9, 0x16, 0x84, 0x0f, 0x63, 0xb6, 0x20, 0x06, 0x09, 0x92, 0x49, 0xc2, 0x66, 0xc6, 0xa2,
	0x6b, 0x4c, 0x69, 0x4c, 0x79, 0xc0, 0xf5, 0x59, 0xc2, 0x04, 0x43, 0xef, 0xa7, 0xb0, 0x9e, 0xc3,
	0xfa, 0xa2, 0xdb, 0x6a, 0xfb, 0x8c, 0x47, 0x8c, 0x1b, 0x63, 0xc2, 0xa9, 0xb1, 0xe8, 0x8e, 0xa9,
	0x20, 0x5d, 0xc3, 0x67, 0x41, 0x9c, 0x15, 0xb4, 0xee, 0x4f, 0xd9, 0x94, 0xc9, 0xd0, 0x48, 0xa3,
	0x3c, 0xdb, 0x99, 0x32, 0x36, 0x0d, 0xa9, 0x21, 0xdf, 0xc6, 0xf3, 0x33, 0x43, 0x04, 0x11, 0xe5,
	0x82, 0x44, 0xb3, 0x8c, 0xb0, 0xf7, 0x42, 0x81, 0xcd, 0xa7, 0x59, 0x67, 0x57, 0x10, 0x41, 0xd1,
	0x21, 0xac, 0xf3, 0x34, 0xe0, 0x5a, 0x75, 0xb7, 0xb6, 0xdf, 0x3c, 0x6c, 0xe9, 0xef, 0x4c, 0xa2,
	0x9f, 0x72, 0x9a, 0x48, 0xae, 0x93, 0x33, 0xd1, 0x57, 0xb0, 0x99, 0xe3, 0x38, 0x88, 0xcf, 0x98,
	0x56, 0xdb, 0x55, 0xf6, 0x9b, 0x87, 0x3b, 0x37, 0x2a, 0xcd, 0x2c, 0xb4, 0xe3, 0x33, 0xe6, 0x34,
	0x49, 0xf9, 0xb2, 0xf7, 0xdb, 0x1a, 0x34, 0x57, 0x40, 0xe4, 0x02, 0xe2, 0x31, 0x99, 0xf1, 0x73,
	0x26, 0xf0, 0x72, 0x62, 0x4d, 0x91, 0xb2, 0x2d, 0x3d, 0xdb, 0x49, 0x2f, 0x76, 0xd2, 0xbd, 0x82,
	0x71, 0xb4, 0xf1, 0xfa, 0x6d, 0xa7, 0xf2, 0xf2, 0xcf, 0x8e, 0xe2, 0xdc, 0x2d, 0xea, 0x97, 0x20,
	0xfa, 0x11, 0xb6, 0x8b, 0x29, 0xb9, 0x20, 0xc9, 0xaa, 0x72, 0xf5, 0x16, 0xca, 0x0f, 0x72, 0x11,
	0x37, 0xd5, 0x28, 0xd5, 0xbf, 0x85, 0x02, 0xc0, 0x34, 0x9e, 0xac, 0x68, 0xd7, 0x6e, 0xa1, 0x7d,
	0x2f, 0x97, 0xb0, 0xe2, 0x49, 0xa9, 0x7c, 0x0a, 0x5b, 0x85, 0x32, 0x89, 0xd8, 0x3c, 0x16, 0xda,
	0xda, 0xae, 0xb2, 0xdf, 0x38, 0xd2, 0xd3, 0xb2, 0x3f, 0xde, 0x76, 0x3e, 0x9d, 0x06, 0xe2, 0x7c,
	0x3e, 0xd6, 0x7d, 0x16, 0x19, 0xb9, 0x49, 0xb2, 0xc7, 0x01, 0x9f, 0x5c, 0x18, 0xe2, 0x72, 0x46,
	0xb9, 0x6e, 0xc7, 0xc2, 0xb9, 0x93, 0xab, 0x98, 0x52, 0x04, 0x7d, 0x0c, 0x45, 0x02, 0x4f, 0x68,
	0xcc, 0x22, 0xad, 0x9e, 0xaa, 0x3a, 0xc5, 0x97, 0xec, 0xa7, 0x39, 0xf4, 0x11, 0x6c, 0xfe, 0x34,
	0xa7, 0x5c, 0x70, 0xec, 0xcb, 0xce, 0xeb, 0xbb, 0xca, 0x7e, 0xdd, 0x69, 0x66, 0xb9, 0x9e, 0xd4,
	0x39, 0x00, 0xe4, 0xb3, 0x58, 0x24, 0x2c, 0x0c, 0x69, 0x82, 0xc9, 0x64, 0x92, 0x50, 0xce, 0xb5,
	0xf7, 0xa4, 0xd8, 0xdd, 0x12, 0x31, 0x33, 0x00, 0x7d, 0x09, 0x3b, 0x11, 0x79, 0x1e, 0x44, 0xf3,
	0x08, 0x0b, 0x76, 0x41, 0x63, 0x4c, 0xc2, 0x90, 0xf9, 0x78, 0x46, 0x13, 0x3c, 0xe7, 0x34, 0xd1,
	0x36, 0x64, 0xa1, 0x96, 0x73, 0xbc, 0x94, 0x62, 0xa6, 0x8c, 0x63, 0x9a, 0xa4, 0xc6, 0xdb, 0x7b,
	0x51, 0x85, 0xc6, 0xd2, 0x81, 0x68, 0x07, 0x1a, 0x09, 0xf5, 0x83, 0x59, 0x40, 0x63, 0x21, 0xfd,
	0xd1, 0x70, 0xca, 0x44, 0x3a, 0xbd, 0x60, 0x82, 0x84, 0xc5, 0xb9, 0x55, 0x25, 0xa1, 0x29, 0x73,
	0xf9, 0x29, 0x0c, 0xf3, 0x05, 0x71, 0x6e, 0xfa, 0x9a, 0x34, 0xfd, 0xe3, 0xff, 0x36, 0xbd, 0x7e,
	0x92, 0xd2, 0x65, 0xc8, 0xad, 0x58, 0x24, 0x97, 0xf9, 0x69, 0x64, 0x99, 0xd6, 0x0f, 0xa0, 0xbe,
	0x4b, 0x40, 0x2a, 0xd4, 0x2e, 0xe8, 0xa5, 0x1c, 0xaf, 0xee, 0xa4, 0x21, 0xea, 0x42, 0x7d, 0x41,
	0xc2, 0x39, 0xcd, 0x8d, 0xf7, 0xf0, 0x46, 0xbb, 0x52, 0xc3, 0xc9, 0x98, 0x4f, 0xaa, 0x5f, 0x28,
	0x4f, 0x36, 0x7e, 0x7e, 0xd5, 0x51, 0x7e, 0x7d, 0xd5, 0x51, 0xf6, 0xfe, 0x56, 0x00, 0x4a, 0x0e,
	0xfa, 0x1c, 0xea, 0x72, 0x7e, 0xd9, 0x63, 0xeb, 0xb0, 0xf3, 0x3f, 0x7a, 0xde, 0xe5, 0x8c, 0x3a,
	0x19, 0x1b, 0x59, 0xd0, 0x24, 0xfe, 0x79, 0x40, 0x17, 0x74, 0x82, 0x89, 0xb8, 0xd5, 0x2d, 0x80,
	0xa2, 0xd0, 0x14, 0xa8, 0x07, 0xe0, 0x87, 0x24, 0x88, 0x32, 0x95, 0xdb, 0xf8, 0xbd, 0x91, 0xd7,
	0x99, 0x02, 0x7d, 0x02, 0x5b, 0x4b, 0x91, 0x15, 0x97, 0x3b, 0x77, 0x0a, 0x8a, 0x4c, 0x3e, 0xfa,
	0x45, 0x81, 0x86, 0x5c, 0x26, 0xdd, 0x03, 0x6d, 0xc3, 0xbd, 0x93, 0x53, 0xcb, 0xf5, 0xf0, 0x70,
	0xe4, 0x7d, 0x6d, 0x0f, 0x9f, 0x62, 0x6f, 0x84, 0xfb, 0x23, 0xb5, 0x82, 0x54, 0xd8, 0xcc, 0x00,
	0x77, 0xd4, 0xb3, 0xcd, 0x81, 0xaa, 0x20, 0x0d, 0xee, 0xe7, 0x99, 0x21, 0x36, 0x5d, 0xd7, 0xf2,
	0x70, 0x6f, 0x60, 0xda, 0xdf, 0xa8, 0x55, 0xf4, 0x10, 0xb6, 0x33, 0xe4, 0xd8, 0x19, 0x3d, 0xb3,
	0xfb, 0x16, 0x1e, 0xd8, 0x27, 0xa7, 0x76, 0xdf, 0xf6, 0xbe, 0x53, 0x6b, 0x25, 0xf8, 0x6c, 0xe4,
	0x59, 0x78, 0x34, 0x4c, 0x49, 0xc7, 0x23, 0xd7, 0x1c, 0xb8, 0xea, 0xda, 0x23, 0x02, 0x5b, 0xff,
	0x3e, 0xd8, 0x92, 0xee, 0x7a, 0xa6, 0x67, 0xa5, 0x63, 0xa5, 0x91, 0xe3, 0x59, 0x7d, 0xb5, 0x82,
	0x3e, 0x80, 0x07, 0xab, 0xa0, 0xec, 0x6f, 0x1e, 0x0d, 0x2c, 0x55, 0x29, 0x17, 0x59, 0x81, 0xac,
	0xbe, 0x5a, 0x3d, 0xb2, 0x5e, 0x5f, 0xb5, 0x95, 0x37, 0x57, 0x6d, 0xe5, 0xaf, 0xab, 0xb6, 0xf2,
	0xf2, 0xba, 0x5d, 0x79, 0x73, 0xdd, 0xae, 0xfc, 0x7e, 0xdd, 0xae, 0x7c, 0xff, 0x78, 0xe5, 0xda,
	0xf7, 0x48, 0x12, 0xc4, 0xe4, 0x20, 0x24, 0x63, 0x6e, 0xc8, 0xff, 0xca, 0xf3, 0xe5, 0x9f, 0x45,
	0xde, 0xff, 0xf1, 0xba, 0xfc, 0x0c, 0x9f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xab, 0xaa, 0x12,
	0xb4, 0x76, 0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AirdropInfo != nil {
		{
			size, err := m.AirdropInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *AirdropInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaximumTokenAllocPerUser) > 0 {
		i -= len(m.MaximumTokenAllocPerUser)
		copy(dAtA[i:], m.MaximumTokenAllocPerUser)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MaximumTokenAllocPerUser)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ControllerAddress) > 0 {
		i -= len(m.ControllerAddress)
		copy(dAtA[i:], m.ControllerAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ControllerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.QuestsCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.QuestsCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AirdropDenom) > 0 {
		i -= len(m.AirdropDenom)
		copy(dAtA[i:], m.AirdropDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.AirdropDenom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.AirdropAmount.Size()
		i -= size
		if _, err := m.AirdropAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.AirdropEndTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.AirdropEndTimestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGenesis(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.AirdropStartTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.AirdropStartTimestamp):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGenesis(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SnapshotTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SnapshotTimestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGenesis(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuestStates) > 0 {
		keysForQuestStates := make([]int32, 0, len(m.QuestStates))
		for k := range m.QuestStates {
			keysForQuestStates = append(keysForQuestStates, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForQuestStates)
		for iNdEx := len(keysForQuestStates) - 1; iNdEx >= 0; iNdEx-- {
			v := m.QuestStates[int32(keysForQuestStates[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGenesis(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGenesis(dAtA, i, uint64(keysForQuestStates[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TotalAmount) > 0 {
		i -= len(m.TotalAmount)
		copy(dAtA[i:], m.TotalAmount)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.TotalAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuestState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedAmount) > 0 {
		i -= len(m.ClaimedAmount)
		copy(dAtA[i:], m.ClaimedAmount)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClaimedAmount)))
		i--
		dAtA[i] = 0x22
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClaimedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintGenesis(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x1a
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.AchievedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.AchievedAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGenesis(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	if m.State != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.AirdropInfo != nil {
		l = m.AirdropInfo.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *AirdropInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SnapshotTimestamp)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.AirdropStartTimestamp)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.AirdropEndTimestamp)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.AirdropAmount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.AirdropDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.QuestsCount != 0 {
		n += 1 + sovGenesis(uint64(m.QuestsCount))
	}
	l = len(m.ControllerAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.MaximumTokenAllocPerUser)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *UserState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.TotalAmount)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.QuestStates) > 0 {
		for k, v := range m.QuestStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenesis(uint64(l))
			}
			mapEntrySize := 1 + sovGenesis(uint64(k)) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QuestState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovGenesis(uint64(m.State))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.AchievedAt)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimedAt)
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.ClaimedAmount)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &UserState{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AirdropInfo == nil {
				m.AirdropInfo = &AirdropInfo{}
			}
			if err := m.AirdropInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SnapshotTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropStartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.AirdropStartTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropEndTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.AirdropEndTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AirdropAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestsCount", wireType)
			}
			m.QuestsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumTokenAllocPerUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaximumTokenAllocPerUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuestStates == nil {
				m.QuestStates = make(map[int32]*QuestState)
			}
			var mapkey int32
			var mapvalue *QuestState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QuestState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QuestStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= QuestStateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.AchievedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClaimedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
