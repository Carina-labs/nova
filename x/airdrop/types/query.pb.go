// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/airdrop/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAirdropInfoRequest struct {
}

func (m *QueryAirdropInfoRequest) Reset()         { *m = QueryAirdropInfoRequest{} }
func (m *QueryAirdropInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAirdropInfoRequest) ProtoMessage()    {}
func (*QueryAirdropInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a3e67f3b02a569, []int{0}
}
func (m *QueryAirdropInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirdropInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirdropInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirdropInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirdropInfoRequest.Merge(m, src)
}
func (m *QueryAirdropInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirdropInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirdropInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirdropInfoRequest proto.InternalMessageInfo

type QueryAirdropInfoResponse struct {
	AirdropInfo *AirdropInfo `protobuf:"bytes,1,opt,name=airdrop_info,json=airdropInfo,proto3" json:"airdrop_info,omitempty"`
}

func (m *QueryAirdropInfoResponse) Reset()         { *m = QueryAirdropInfoResponse{} }
func (m *QueryAirdropInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAirdropInfoResponse) ProtoMessage()    {}
func (*QueryAirdropInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a3e67f3b02a569, []int{1}
}
func (m *QueryAirdropInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirdropInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirdropInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirdropInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirdropInfoResponse.Merge(m, src)
}
func (m *QueryAirdropInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirdropInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirdropInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirdropInfoResponse proto.InternalMessageInfo

func (m *QueryAirdropInfoResponse) GetAirdropInfo() *AirdropInfo {
	if m != nil {
		return m.AirdropInfo
	}
	return nil
}

type QueryTotalAssetForAirdropRequest struct {
	// address of the airdrop recipient.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryTotalAssetForAirdropRequest) Reset()         { *m = QueryTotalAssetForAirdropRequest{} }
func (m *QueryTotalAssetForAirdropRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalAssetForAirdropRequest) ProtoMessage()    {}
func (*QueryTotalAssetForAirdropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a3e67f3b02a569, []int{2}
}
func (m *QueryTotalAssetForAirdropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalAssetForAirdropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalAssetForAirdropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalAssetForAirdropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalAssetForAirdropRequest.Merge(m, src)
}
func (m *QueryTotalAssetForAirdropRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalAssetForAirdropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalAssetForAirdropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalAssetForAirdropRequest proto.InternalMessageInfo

func (m *QueryTotalAssetForAirdropRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryTotalAssetForAirdropResponse struct {
	// total_asset_for_airdrop is the total asset for airdrop.
	TotalAssets types.Coin `protobuf:"bytes,1,opt,name=total_assets,json=totalAssets,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_assets"`
}

func (m *QueryTotalAssetForAirdropResponse) Reset()         { *m = QueryTotalAssetForAirdropResponse{} }
func (m *QueryTotalAssetForAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalAssetForAirdropResponse) ProtoMessage()    {}
func (*QueryTotalAssetForAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a3e67f3b02a569, []int{3}
}
func (m *QueryTotalAssetForAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalAssetForAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalAssetForAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalAssetForAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalAssetForAirdropResponse.Merge(m, src)
}
func (m *QueryTotalAssetForAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalAssetForAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalAssetForAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalAssetForAirdropResponse proto.InternalMessageInfo

func (m *QueryTotalAssetForAirdropResponse) GetTotalAssets() types.Coin {
	if m != nil {
		return m.TotalAssets
	}
	return types.Coin{}
}

type QueryQuestStateRequest struct {
	// address of the airdrop recipient.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryQuestStateRequest) Reset()         { *m = QueryQuestStateRequest{} }
func (m *QueryQuestStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuestStateRequest) ProtoMessage()    {}
func (*QueryQuestStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a3e67f3b02a569, []int{4}
}
func (m *QueryQuestStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuestStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuestStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuestStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuestStateRequest.Merge(m, src)
}
func (m *QueryQuestStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuestStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuestStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuestStateRequest proto.InternalMessageInfo

func (m *QueryQuestStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryQuestStateResponse struct {
	QuestStates map[int32]*QuestState `protobuf:"bytes,1,rep,name=quest_states,json=questStates,proto3" json:"quest_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryQuestStateResponse) Reset()         { *m = QueryQuestStateResponse{} }
func (m *QueryQuestStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuestStateResponse) ProtoMessage()    {}
func (*QueryQuestStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a3e67f3b02a569, []int{5}
}
func (m *QueryQuestStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuestStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuestStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuestStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuestStateResponse.Merge(m, src)
}
func (m *QueryQuestStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuestStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuestStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuestStateResponse proto.InternalMessageInfo

func (m *QueryQuestStateResponse) GetQuestStates() map[int32]*QuestState {
	if m != nil {
		return m.QuestStates
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAirdropInfoRequest)(nil), "nova.airdrop.v1.QueryAirdropInfoRequest")
	proto.RegisterType((*QueryAirdropInfoResponse)(nil), "nova.airdrop.v1.QueryAirdropInfoResponse")
	proto.RegisterType((*QueryTotalAssetForAirdropRequest)(nil), "nova.airdrop.v1.QueryTotalAssetForAirdropRequest")
	proto.RegisterType((*QueryTotalAssetForAirdropResponse)(nil), "nova.airdrop.v1.QueryTotalAssetForAirdropResponse")
	proto.RegisterType((*QueryQuestStateRequest)(nil), "nova.airdrop.v1.QueryQuestStateRequest")
	proto.RegisterType((*QueryQuestStateResponse)(nil), "nova.airdrop.v1.QueryQuestStateResponse")
	proto.RegisterMapType((map[int32]*QuestState)(nil), "nova.airdrop.v1.QueryQuestStateResponse.QuestStatesEntry")
}

func init() { proto.RegisterFile("nova/airdrop/v1/query.proto", fileDescriptor_b5a3e67f3b02a569) }

var fileDescriptor_b5a3e67f3b02a569 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xc7, 0xb3, 0x09, 0xf9, 0xfd, 0x70, 0x36, 0x60, 0x19, 0x8a, 0xa6, 0x69, 0xdc, 0xd6, 0x45,
	0x70, 0x55, 0x3a, 0xd3, 0x8d, 0x17, 0x15, 0x41, 0xda, 0x52, 0xc1, 0x63, 0xa3, 0x27, 0x2b, 0x84,
	0x49, 0x32, 0x59, 0x97, 0xa6, 0xf3, 0x92, 0x9d, 0x49, 0x30, 0x57, 0xc1, 0xbb, 0xd0, 0x3f, 0x42,
	0xf0, 0xe2, 0xbf, 0xd1, 0x63, 0x41, 0x0f, 0x9e, 0x54, 0x12, 0xff, 0x10, 0x99, 0xd9, 0x49, 0x13,
	0x92, 0xb5, 0xad, 0xa7, 0x9d, 0x7d, 0xef, 0x7d, 0xdf, 0x7c, 0xe6, 0xbd, 0x37, 0x83, 0xd6, 0x05,
	0x0c, 0x19, 0x65, 0x71, 0xd2, 0x4e, 0xa0, 0x47, 0x87, 0x21, 0xed, 0x0f, 0x78, 0x32, 0x22, 0xbd,
	0x04, 0x14, 0xe0, 0xeb, 0xda, 0x49, 0xac, 0x93, 0x0c, 0xc3, 0x8a, 0xd7, 0x02, 0x79, 0x0c, 0x92,
	0x36, 0x99, 0xe4, 0x74, 0x18, 0x36, 0xb9, 0x62, 0x21, 0x6d, 0x41, 0x2c, 0x52, 0x41, 0xa5, 0x1a,
	0x01, 0x44, 0x5d, 0x4e, 0x59, 0x2f, 0xa6, 0x4c, 0x08, 0x50, 0x4c, 0xc5, 0x20, 0xa4, 0xf5, 0xae,
	0x46, 0x10, 0x81, 0x59, 0x52, 0xbd, 0xb2, 0xd6, 0x5b, 0x8b, 0x04, 0x11, 0x17, 0x5c, 0xc6, 0x56,
	0xe4, 0xaf, 0xa1, 0x9b, 0x07, 0x1a, 0x69, 0x27, 0x0d, 0x78, 0x21, 0x3a, 0x50, 0xe7, 0xfd, 0x01,
	0x97, 0xca, 0x3f, 0x44, 0xe5, 0x65, 0x97, 0xec, 0x81, 0x90, 0x1c, 0x3f, 0x43, 0x25, 0x9b, 0xb2,
	0x11, 0x8b, 0x0e, 0x94, 0x9d, 0x4d, 0x27, 0x70, 0x6b, 0x55, 0xb2, 0x70, 0x22, 0x32, 0xaf, 0x75,
	0xd9, 0xec, 0xc7, 0x7f, 0x8a, 0x36, 0x4d, 0xf2, 0x57, 0xa0, 0x58, 0x77, 0x47, 0x4a, 0xae, 0x9e,
	0x43, 0x62, 0xa3, 0x2d, 0x00, 0x2e, 0xa3, 0xff, 0x59, 0xbb, 0x9d, 0x70, 0x29, 0x4d, 0xfe, 0x6b,
	0xf5, 0xe9, 0xaf, 0x7f, 0xe2, 0xa0, 0xdb, 0x17, 0xc8, 0x2d, 0xa4, 0x40, 0x25, 0xa5, 0xfd, 0x0d,
	0xa6, 0x03, 0xa4, 0x85, 0x5c, 0x23, 0x69, 0x95, 0x89, 0xae, 0x32, 0xb1, 0x55, 0x26, 0x7b, 0x10,
	0x8b, 0xdd, 0xed, 0xd3, 0x1f, 0x1b, 0xb9, 0xcf, 0x3f, 0x37, 0x82, 0x28, 0x56, 0x6f, 0x07, 0x4d,
	0xd2, 0x82, 0x63, 0x6a, 0x5b, 0x92, 0x7e, 0xb6, 0x64, 0xfb, 0x88, 0xaa, 0x51, 0x8f, 0x4b, 0x23,
	0x90, 0x75, 0x57, 0x9d, 0x03, 0x48, 0xbf, 0x86, 0x6e, 0x18, 0xa8, 0x03, 0x4d, 0xff, 0x52, 0x31,
	0xc5, 0x2f, 0x3f, 0xc9, 0x37, 0xc7, 0x36, 0x60, 0x5e, 0x64, 0xf9, 0xdf, 0xa0, 0x92, 0x91, 0x37,
	0xa4, 0x36, 0x6b, 0x69, 0x21, 0x70, 0x6b, 0x8f, 0x97, 0x8a, 0xfc, 0x17, 0x3d, 0x99, 0x99, 0xe4,
	0xbe, 0x50, 0xc9, 0xa8, 0xee, 0xf6, 0x67, 0x96, 0xca, 0x21, 0x5a, 0x59, 0x0c, 0xc0, 0x2b, 0xa8,
	0x70, 0xc4, 0x47, 0x86, 0xb1, 0x58, 0xd7, 0x4b, 0x1c, 0xa2, 0xe2, 0x90, 0x75, 0x07, 0xbc, 0x9c,
	0x37, 0xc5, 0x5b, 0xcf, 0xda, 0x7c, 0xba, 0x6f, 0x1a, 0xf9, 0x24, 0xff, 0xc8, 0xa9, 0x7d, 0x2a,
	0xa0, 0xa2, 0xc1, 0xc2, 0x6d, 0xe4, 0xce, 0x0d, 0x01, 0x0e, 0xb2, 0xe9, 0x97, 0xc7, 0xaf, 0x72,
	0xef, 0x0a, 0x91, 0xe9, 0x41, 0xfd, 0x1c, 0xfe, 0xe2, 0xa0, 0xd5, 0xac, 0x59, 0xc0, 0x61, 0x76,
	0x96, 0x0b, 0xc6, 0xae, 0x52, 0xfb, 0x17, 0x89, 0x25, 0xd8, 0x7e, 0xff, 0xf5, 0xf7, 0x49, 0xfe,
	0x3e, 0x0e, 0xe8, 0xe2, 0x75, 0x9b, 0x9b, 0xc0, 0x46, 0x07, 0x92, 0x86, 0x75, 0xe1, 0x0f, 0x0e,
	0x42, 0xb3, 0xda, 0xe1, 0xbb, 0x97, 0x77, 0x35, 0xa5, 0x0b, 0xae, 0xda, 0x7e, 0xff, 0x8e, 0x61,
	0xf2, 0x70, 0x95, 0x66, 0x3c, 0x42, 0xd3, 0xa9, 0xda, 0xdd, 0x3f, 0x1d, 0x7b, 0xce, 0xd9, 0xd8,
	0x73, 0x7e, 0x8d, 0x3d, 0xe7, 0xe3, 0xc4, 0xcb, 0x9d, 0x4d, 0xbc, 0xdc, 0xf7, 0x89, 0x97, 0x7b,
	0xfd, 0x60, 0xee, 0x16, 0xec, 0xb1, 0x24, 0x16, 0x6c, 0xab, 0xcb, 0x9a, 0x32, 0xcd, 0xf6, 0xee,
	0x3c, 0x9f, 0xb9, 0x0e, 0xcd, 0xff, 0xcc, 0x73, 0xf2, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa4, 0x34, 0xa6, 0x94, 0xf1, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// get airdrop info
	AirdropInfo(ctx context.Context, in *QueryAirdropInfoRequest, opts ...grpc.CallOption) (*QueryAirdropInfoResponse, error)
	// get total assets of the airdrop for a given address
	TotalAssetForAirdrop(ctx context.Context, in *QueryTotalAssetForAirdropRequest, opts ...grpc.CallOption) (*QueryTotalAssetForAirdropResponse, error)
	// query for state of quests
	QuestState(ctx context.Context, in *QueryQuestStateRequest, opts ...grpc.CallOption) (*QueryQuestStateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AirdropInfo(ctx context.Context, in *QueryAirdropInfoRequest, opts ...grpc.CallOption) (*QueryAirdropInfoResponse, error) {
	out := new(QueryAirdropInfoResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Query/AirdropInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalAssetForAirdrop(ctx context.Context, in *QueryTotalAssetForAirdropRequest, opts ...grpc.CallOption) (*QueryTotalAssetForAirdropResponse, error) {
	out := new(QueryTotalAssetForAirdropResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Query/TotalAssetForAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuestState(ctx context.Context, in *QueryQuestStateRequest, opts ...grpc.CallOption) (*QueryQuestStateResponse, error) {
	out := new(QueryQuestStateResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Query/QuestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// get airdrop info
	AirdropInfo(context.Context, *QueryAirdropInfoRequest) (*QueryAirdropInfoResponse, error)
	// get total assets of the airdrop for a given address
	TotalAssetForAirdrop(context.Context, *QueryTotalAssetForAirdropRequest) (*QueryTotalAssetForAirdropResponse, error)
	// query for state of quests
	QuestState(context.Context, *QueryQuestStateRequest) (*QueryQuestStateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) AirdropInfo(ctx context.Context, req *QueryAirdropInfoRequest) (*QueryAirdropInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropInfo not implemented")
}
func (*UnimplementedQueryServer) TotalAssetForAirdrop(ctx context.Context, req *QueryTotalAssetForAirdropRequest) (*QueryTotalAssetForAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalAssetForAirdrop not implemented")
}
func (*UnimplementedQueryServer) QuestState(ctx context.Context, req *QueryQuestStateRequest) (*QueryQuestStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestState not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AirdropInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAirdropInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AirdropInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Query/AirdropInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AirdropInfo(ctx, req.(*QueryAirdropInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalAssetForAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalAssetForAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalAssetForAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Query/TotalAssetForAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalAssetForAirdrop(ctx, req.(*QueryTotalAssetForAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuestStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Query/QuestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuestState(ctx, req.(*QueryQuestStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nova.airdrop.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AirdropInfo",
			Handler:    _Query_AirdropInfo_Handler,
		},
		{
			MethodName: "TotalAssetForAirdrop",
			Handler:    _Query_TotalAssetForAirdrop_Handler,
		},
		{
			MethodName: "QuestState",
			Handler:    _Query_QuestState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/airdrop/v1/query.proto",
}

func (m *QueryAirdropInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirdropInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirdropInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAirdropInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirdropInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirdropInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AirdropInfo != nil {
		{
			size, err := m.AirdropInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalAssetForAirdropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalAssetForAirdropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalAssetForAirdropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalAssetForAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalAssetForAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalAssetForAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalAssets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryQuestStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuestStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuestStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuestStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuestStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuestStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuestStates) > 0 {
		for k := range m.QuestStates {
			v := m.QuestStates[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAirdropInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAirdropInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AirdropInfo != nil {
		l = m.AirdropInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalAssetForAirdropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalAssetForAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalAssets.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryQuestStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQuestStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QuestStates) > 0 {
		for k, v := range m.QuestStates {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + sovQuery(uint64(k)) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAirdropInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirdropInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirdropInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAirdropInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirdropInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirdropInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AirdropInfo == nil {
				m.AirdropInfo = &AirdropInfo{}
			}
			if err := m.AirdropInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalAssetForAirdropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalAssetForAirdropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalAssetForAirdropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalAssetForAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalAssetForAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalAssetForAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAssets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuestStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuestStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuestStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuestStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuestStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuestStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuestStates == nil {
				m.QuestStates = make(map[int32]*QuestState)
			}
			var mapkey int32
			var mapvalue *QuestState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QuestState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QuestStates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
