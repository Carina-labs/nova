// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/airdrop/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgClaimAirdropRequest is an airdrop volume request message.
type MsgClaimAirdropRequest struct {
	// address of the airdrop recipient.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// quest type of the airdrop to claim.
	QuestType QuestType `protobuf:"varint,2,opt,name=quest_type,json=questType,proto3,enum=nova.airdrop.v1.QuestType" json:"quest_type,omitempty"`
}

func (m *MsgClaimAirdropRequest) Reset()         { *m = MsgClaimAirdropRequest{} }
func (m *MsgClaimAirdropRequest) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAirdropRequest) ProtoMessage()    {}
func (*MsgClaimAirdropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{0}
}
func (m *MsgClaimAirdropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAirdropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAirdropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAirdropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAirdropRequest.Merge(m, src)
}
func (m *MsgClaimAirdropRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAirdropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAirdropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAirdropRequest proto.InternalMessageInfo

func (m *MsgClaimAirdropRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgClaimAirdropRequest) GetQuestType() QuestType {
	if m != nil {
		return m.QuestType
	}
	return QuestType_QUEST_NOTHING_TO_DO
}

// MsgClaimAirdropResponse is a response message for MsgClaimAirdropRequest.
type MsgClaimAirdropResponse struct {
}

func (m *MsgClaimAirdropResponse) Reset()         { *m = MsgClaimAirdropResponse{} }
func (m *MsgClaimAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAirdropResponse) ProtoMessage()    {}
func (*MsgClaimAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{1}
}
func (m *MsgClaimAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAirdropResponse.Merge(m, src)
}
func (m *MsgClaimAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAirdropResponse proto.InternalMessageInfo

// MsgMarkSocialQuestPerformedRequest the controller marks social quest performed for the users.
type MsgMarkSocialQuestPerformedRequest struct {
	// controller address for the airdrop module.
	ControllerAddress string `protobuf:"bytes,1,opt,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
	// the addresses of the users who performed the social quest.
	UserAddresses []string `protobuf:"bytes,2,rep,name=user_addresses,json=userAddresses,proto3" json:"user_addresses,omitempty"`
}

func (m *MsgMarkSocialQuestPerformedRequest) Reset()         { *m = MsgMarkSocialQuestPerformedRequest{} }
func (m *MsgMarkSocialQuestPerformedRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarkSocialQuestPerformedRequest) ProtoMessage()    {}
func (*MsgMarkSocialQuestPerformedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{2}
}
func (m *MsgMarkSocialQuestPerformedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarkSocialQuestPerformedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarkSocialQuestPerformedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarkSocialQuestPerformedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarkSocialQuestPerformedRequest.Merge(m, src)
}
func (m *MsgMarkSocialQuestPerformedRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarkSocialQuestPerformedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarkSocialQuestPerformedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarkSocialQuestPerformedRequest proto.InternalMessageInfo

func (m *MsgMarkSocialQuestPerformedRequest) GetControllerAddress() string {
	if m != nil {
		return m.ControllerAddress
	}
	return ""
}

func (m *MsgMarkSocialQuestPerformedRequest) GetUserAddresses() []string {
	if m != nil {
		return m.UserAddresses
	}
	return nil
}

// MsgMarkSocialQuestPerformedResponse is a response message for MsgMarkSocialQuestPerformedRequest.
type MsgMarkSocialQuestPerformedResponse struct {
}

func (m *MsgMarkSocialQuestPerformedResponse) Reset()         { *m = MsgMarkSocialQuestPerformedResponse{} }
func (m *MsgMarkSocialQuestPerformedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarkSocialQuestPerformedResponse) ProtoMessage()    {}
func (*MsgMarkSocialQuestPerformedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{3}
}
func (m *MsgMarkSocialQuestPerformedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarkSocialQuestPerformedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarkSocialQuestPerformedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarkSocialQuestPerformedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarkSocialQuestPerformedResponse.Merge(m, src)
}
func (m *MsgMarkSocialQuestPerformedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarkSocialQuestPerformedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarkSocialQuestPerformedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarkSocialQuestPerformedResponse proto.InternalMessageInfo

// MsgMarkUserProvidedLiquidityRequest is a message that marks a particular user as having provided liquidity to Supernova.
type MsgMarkUserProvidedLiquidityRequest struct {
	// controller address for the airdrop module.
	ControllerAddress string `protobuf:"bytes,1,opt,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
	// the addresses of the users who provided the liquidities.
	UserAddresses []string `protobuf:"bytes,2,rep,name=user_addresses,json=userAddresses,proto3" json:"user_addresses,omitempty"`
}

func (m *MsgMarkUserProvidedLiquidityRequest) Reset()         { *m = MsgMarkUserProvidedLiquidityRequest{} }
func (m *MsgMarkUserProvidedLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarkUserProvidedLiquidityRequest) ProtoMessage()    {}
func (*MsgMarkUserProvidedLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{4}
}
func (m *MsgMarkUserProvidedLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarkUserProvidedLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarkUserProvidedLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarkUserProvidedLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarkUserProvidedLiquidityRequest.Merge(m, src)
}
func (m *MsgMarkUserProvidedLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarkUserProvidedLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarkUserProvidedLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarkUserProvidedLiquidityRequest proto.InternalMessageInfo

func (m *MsgMarkUserProvidedLiquidityRequest) GetControllerAddress() string {
	if m != nil {
		return m.ControllerAddress
	}
	return ""
}

func (m *MsgMarkUserProvidedLiquidityRequest) GetUserAddresses() []string {
	if m != nil {
		return m.UserAddresses
	}
	return nil
}

// MsgMarkUserProvidedLiquidityResponse is a response message for MsgMarkUserProvidedLiquidityRequest.
type MsgMarkUserProvidedLiquidityResponse struct {
}

func (m *MsgMarkUserProvidedLiquidityResponse) Reset()         { *m = MsgMarkUserProvidedLiquidityResponse{} }
func (m *MsgMarkUserProvidedLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarkUserProvidedLiquidityResponse) ProtoMessage()    {}
func (*MsgMarkUserProvidedLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{5}
}
func (m *MsgMarkUserProvidedLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarkUserProvidedLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarkUserProvidedLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarkUserProvidedLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarkUserProvidedLiquidityResponse.Merge(m, src)
}
func (m *MsgMarkUserProvidedLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarkUserProvidedLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarkUserProvidedLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarkUserProvidedLiquidityResponse proto.InternalMessageInfo

type MsgAirdropDataRequest struct {
	States            []*UserState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	ControllerAddress string       `protobuf:"bytes,2,opt,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
}

func (m *MsgAirdropDataRequest) Reset()         { *m = MsgAirdropDataRequest{} }
func (m *MsgAirdropDataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAirdropDataRequest) ProtoMessage()    {}
func (*MsgAirdropDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{6}
}
func (m *MsgAirdropDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAirdropDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAirdropDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAirdropDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAirdropDataRequest.Merge(m, src)
}
func (m *MsgAirdropDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAirdropDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAirdropDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAirdropDataRequest proto.InternalMessageInfo

func (m *MsgAirdropDataRequest) GetStates() []*UserState {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *MsgAirdropDataRequest) GetControllerAddress() string {
	if m != nil {
		return m.ControllerAddress
	}
	return ""
}

type MsgAirdropDataResponse struct {
}

func (m *MsgAirdropDataResponse) Reset()         { *m = MsgAirdropDataResponse{} }
func (m *MsgAirdropDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAirdropDataResponse) ProtoMessage()    {}
func (*MsgAirdropDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a7b020ec3f664eb, []int{7}
}
func (m *MsgAirdropDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAirdropDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAirdropDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAirdropDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAirdropDataResponse.Merge(m, src)
}
func (m *MsgAirdropDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAirdropDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAirdropDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAirdropDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClaimAirdropRequest)(nil), "nova.airdrop.v1.MsgClaimAirdropRequest")
	proto.RegisterType((*MsgClaimAirdropResponse)(nil), "nova.airdrop.v1.MsgClaimAirdropResponse")
	proto.RegisterType((*MsgMarkSocialQuestPerformedRequest)(nil), "nova.airdrop.v1.MsgMarkSocialQuestPerformedRequest")
	proto.RegisterType((*MsgMarkSocialQuestPerformedResponse)(nil), "nova.airdrop.v1.MsgMarkSocialQuestPerformedResponse")
	proto.RegisterType((*MsgMarkUserProvidedLiquidityRequest)(nil), "nova.airdrop.v1.MsgMarkUserProvidedLiquidityRequest")
	proto.RegisterType((*MsgMarkUserProvidedLiquidityResponse)(nil), "nova.airdrop.v1.MsgMarkUserProvidedLiquidityResponse")
	proto.RegisterType((*MsgAirdropDataRequest)(nil), "nova.airdrop.v1.MsgAirdropDataRequest")
	proto.RegisterType((*MsgAirdropDataResponse)(nil), "nova.airdrop.v1.MsgAirdropDataResponse")
}

func init() { proto.RegisterFile("nova/airdrop/v1/tx.proto", fileDescriptor_7a7b020ec3f664eb) }

var fileDescriptor_7a7b020ec3f664eb = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x19, 0x48, 0x9a, 0x30, 0xd4, 0x9a, 0x6e, 0x54, 0x96, 0x4d, 0xdc, 0x20, 0xda, 0x96,
	0x68, 0xba, 0x1b, 0xa8, 0x1e, 0xec, 0xad, 0x56, 0x6f, 0x92, 0x54, 0xaa, 0x17, 0x0f, 0x92, 0x81,
	0x1d, 0xc7, 0x89, 0xec, 0x0e, 0xcc, 0x1b, 0x48, 0xb9, 0x9a, 0x98, 0xe8, 0xcd, 0x44, 0x3f, 0x88,
	0x1f, 0xc3, 0x63, 0x8f, 0x26, 0x5e, 0x0c, 0x1c, 0xfc, 0x1a, 0x66, 0x76, 0x87, 0x96, 0x16, 0x16,
	0xd2, 0x53, 0x6f, 0xb3, 0xf3, 0xfe, 0xef, 0x3f, 0xbf, 0xb7, 0xef, 0xe5, 0x61, 0x3b, 0x12, 0x43,
	0xe2, 0x13, 0x2e, 0x03, 0x29, 0x7a, 0xfe, 0xb0, 0xe6, 0xab, 0x13, 0xaf, 0x27, 0x85, 0x12, 0xd6,
	0x4d, 0x1d, 0xf1, 0x4c, 0xc4, 0x1b, 0xd6, 0x1c, 0xb7, 0x23, 0x20, 0x14, 0xe0, 0xb7, 0x09, 0x50,
	0x7f, 0x58, 0x6b, 0x53, 0x45, 0x6a, 0x7e, 0x47, 0xf0, 0x28, 0x49, 0x70, 0x6e, 0x31, 0xc1, 0x44,
	0x7c, 0xf4, 0xf5, 0xc9, 0xdc, 0x96, 0x92, 0xac, 0x56, 0x12, 0x48, 0x3e, 0x4c, 0xa8, 0x68, 0x0c,
	0x43, 0x60, 0xfa, 0xe5, 0x10, 0x98, 0x09, 0xdc, 0xbd, 0x0c, 0xc5, 0x68, 0x44, 0x81, 0x9b, 0xbc,
	0xca, 0x57, 0x84, 0xef, 0x34, 0x80, 0x1d, 0x76, 0x09, 0x0f, 0x0f, 0x12, 0x51, 0x93, 0xf6, 0x07,
	0x14, 0x94, 0x75, 0x0f, 0xaf, 0x0f, 0x80, 0xca, 0x16, 0x09, 0x02, 0x49, 0x01, 0x6c, 0x54, 0x46,
	0xd5, 0x7c, 0xb3, 0xa0, 0xef, 0x0e, 0x92, 0x2b, 0xeb, 0x29, 0xc6, 0xb1, 0xb6, 0xa5, 0x46, 0x3d,
	0x6a, 0x67, 0xcb, 0xa8, 0xba, 0x51, 0x77, 0xbc, 0x4b, 0xc5, 0x7a, 0xaf, 0xb4, 0xe4, 0xf5, 0xa8,
	0x47, 0x9b, 0xf9, 0xfe, 0xf4, 0xb8, 0xbf, 0xf9, 0xe9, 0xdf, 0xcf, 0x87, 0x17, 0x1e, 0xa8, 0x94,
	0x70, 0x71, 0x0e, 0x05, 0x7a, 0x22, 0x02, 0x5a, 0xf9, 0x8e, 0x70, 0xa5, 0x01, 0xac, 0x41, 0xe4,
	0xc7, 0x63, 0xd1, 0xe1, 0xa4, 0x1b, 0x7b, 0x1e, 0x51, 0xf9, 0x5e, 0xc8, 0x90, 0x06, 0x53, 0xe4,
	0x5d, 0x6c, 0x75, 0x44, 0xa4, 0xa4, 0xe8, 0x76, 0xe7, 0xc0, 0x37, 0xcf, 0x23, 0x53, 0xfc, 0x2d,
	0xbc, 0x31, 0x0b, 0x40, 0xc1, 0xce, 0x96, 0x73, 0xd5, 0x7c, 0xf3, 0xc6, 0x4c, 0x8d, 0x14, 0xf6,
	0x8b, 0x1a, 0x75, 0x81, 0x71, 0x65, 0x0b, 0xdf, 0x5f, 0x0a, 0x65, 0xe0, 0x7f, 0xa0, 0x33, 0xdd,
	0x1b, 0xa0, 0xf2, 0x48, 0x8a, 0x21, 0x0f, 0x68, 0xf0, 0x92, 0xf7, 0x07, 0x3c, 0xe0, 0x6a, 0x74,
	0x4d, 0xf4, 0xdb, 0xf8, 0xc1, 0x72, 0xaa, 0xf3, 0x7f, 0x7f, 0xbb, 0x01, 0xcc, 0xb4, 0xe4, 0x39,
	0x51, 0x64, 0x0a, 0x5c, 0xc7, 0x6b, 0xa0, 0x88, 0xa2, 0x1a, 0x32, 0x57, 0x2d, 0x2c, 0x68, 0xbd,
	0x76, 0x3e, 0xd6, 0x92, 0xa6, 0x51, 0xa6, 0x14, 0x99, 0x4d, 0x29, 0x32, 0x9d, 0xde, 0x8e, 0xe7,
	0xf6, 0x02, 0x54, 0xc2, 0x5b, 0xff, 0x93, 0xc3, 0xb9, 0x06, 0x30, 0x8b, 0xe0, 0xf5, 0xd9, 0x59,
	0xb2, 0x76, 0xe6, 0xe8, 0x16, 0x0f, 0xbe, 0x53, 0x5d, 0x2d, 0x4c, 0x9e, 0xb2, 0x3e, 0x23, 0x6c,
	0xa7, 0xb5, 0xdf, 0xda, 0x5b, 0x64, 0xb3, 0x62, 0x82, 0x9d, 0xc7, 0x57, 0x4b, 0x32, 0x1c, 0x5f,
	0x10, 0x2e, 0xa5, 0x36, 0xd2, 0x4a, 0xf5, 0x5c, 0x36, 0x8d, 0xce, 0x93, 0x2b, 0x66, 0x19, 0x94,
	0x77, 0xb8, 0x30, 0xd3, 0x14, 0x6b, 0x7b, 0x91, 0xcb, 0xfc, 0x28, 0x39, 0x3b, 0x2b, 0x75, 0x89,
	0xff, 0xb3, 0x17, 0xbf, 0xc6, 0x2e, 0x3a, 0x1d, 0xbb, 0xe8, 0xef, 0xd8, 0x45, 0xdf, 0x26, 0x6e,
	0xe6, 0x74, 0xe2, 0x66, 0x7e, 0x4f, 0xdc, 0xcc, 0xdb, 0x47, 0x8c, 0xab, 0x0f, 0x83, 0xb6, 0xd7,
	0x11, 0xa1, 0x7f, 0x48, 0x24, 0x8f, 0xc8, 0x6e, 0x97, 0xb4, 0xc1, 0x8f, 0x17, 0xe0, 0xc9, 0xd9,
	0x0a, 0xd4, 0xab, 0x0a, 0xda, 0x6b, 0xf1, 0xfa, 0xdb, 0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xd4,
	0xa3, 0x5d, 0xf6, 0xb4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ClaimAirdrop(ctx context.Context, in *MsgClaimAirdropRequest, opts ...grpc.CallOption) (*MsgClaimAirdropResponse, error)
	MarkSocialQuestPerformed(ctx context.Context, in *MsgMarkSocialQuestPerformedRequest, opts ...grpc.CallOption) (*MsgMarkSocialQuestPerformedResponse, error)
	MarkUserProvidedLiquidity(ctx context.Context, in *MsgMarkUserProvidedLiquidityRequest, opts ...grpc.CallOption) (*MsgMarkUserProvidedLiquidityResponse, error)
	AirdropData(ctx context.Context, in *MsgAirdropDataRequest, opts ...grpc.CallOption) (*MsgAirdropDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ClaimAirdrop(ctx context.Context, in *MsgClaimAirdropRequest, opts ...grpc.CallOption) (*MsgClaimAirdropResponse, error) {
	out := new(MsgClaimAirdropResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Msg/ClaimAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarkSocialQuestPerformed(ctx context.Context, in *MsgMarkSocialQuestPerformedRequest, opts ...grpc.CallOption) (*MsgMarkSocialQuestPerformedResponse, error) {
	out := new(MsgMarkSocialQuestPerformedResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Msg/MarkSocialQuestPerformed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarkUserProvidedLiquidity(ctx context.Context, in *MsgMarkUserProvidedLiquidityRequest, opts ...grpc.CallOption) (*MsgMarkUserProvidedLiquidityResponse, error) {
	out := new(MsgMarkUserProvidedLiquidityResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Msg/MarkUserProvidedLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AirdropData(ctx context.Context, in *MsgAirdropDataRequest, opts ...grpc.CallOption) (*MsgAirdropDataResponse, error) {
	out := new(MsgAirdropDataResponse)
	err := c.cc.Invoke(ctx, "/nova.airdrop.v1.Msg/AirdropData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ClaimAirdrop(context.Context, *MsgClaimAirdropRequest) (*MsgClaimAirdropResponse, error)
	MarkSocialQuestPerformed(context.Context, *MsgMarkSocialQuestPerformedRequest) (*MsgMarkSocialQuestPerformedResponse, error)
	MarkUserProvidedLiquidity(context.Context, *MsgMarkUserProvidedLiquidityRequest) (*MsgMarkUserProvidedLiquidityResponse, error)
	AirdropData(context.Context, *MsgAirdropDataRequest) (*MsgAirdropDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ClaimAirdrop(ctx context.Context, req *MsgClaimAirdropRequest) (*MsgClaimAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAirdrop not implemented")
}
func (*UnimplementedMsgServer) MarkSocialQuestPerformed(ctx context.Context, req *MsgMarkSocialQuestPerformedRequest) (*MsgMarkSocialQuestPerformedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkSocialQuestPerformed not implemented")
}
func (*UnimplementedMsgServer) MarkUserProvidedLiquidity(ctx context.Context, req *MsgMarkUserProvidedLiquidityRequest) (*MsgMarkUserProvidedLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkUserProvidedLiquidity not implemented")
}
func (*UnimplementedMsgServer) AirdropData(ctx context.Context, req *MsgAirdropDataRequest) (*MsgAirdropDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ClaimAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Msg/ClaimAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAirdrop(ctx, req.(*MsgClaimAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarkSocialQuestPerformed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarkSocialQuestPerformedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarkSocialQuestPerformed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Msg/MarkSocialQuestPerformed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarkSocialQuestPerformed(ctx, req.(*MsgMarkSocialQuestPerformedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarkUserProvidedLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarkUserProvidedLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarkUserProvidedLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Msg/MarkUserProvidedLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarkUserProvidedLiquidity(ctx, req.(*MsgMarkUserProvidedLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AirdropData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAirdropDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AirdropData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.airdrop.v1.Msg/AirdropData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AirdropData(ctx, req.(*MsgAirdropDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nova.airdrop.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimAirdrop",
			Handler:    _Msg_ClaimAirdrop_Handler,
		},
		{
			MethodName: "MarkSocialQuestPerformed",
			Handler:    _Msg_MarkSocialQuestPerformed_Handler,
		},
		{
			MethodName: "MarkUserProvidedLiquidity",
			Handler:    _Msg_MarkUserProvidedLiquidity_Handler,
		},
		{
			MethodName: "AirdropData",
			Handler:    _Msg_AirdropData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/airdrop/v1/tx.proto",
}

func (m *MsgClaimAirdropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAirdropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAirdropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuestType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.QuestType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarkSocialQuestPerformedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarkSocialQuestPerformedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarkSocialQuestPerformedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddresses) > 0 {
		for iNdEx := len(m.UserAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserAddresses[iNdEx])
			copy(dAtA[i:], m.UserAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ControllerAddress) > 0 {
		i -= len(m.ControllerAddress)
		copy(dAtA[i:], m.ControllerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ControllerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarkSocialQuestPerformedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarkSocialQuestPerformedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarkSocialQuestPerformedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarkUserProvidedLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarkUserProvidedLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarkUserProvidedLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddresses) > 0 {
		for iNdEx := len(m.UserAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserAddresses[iNdEx])
			copy(dAtA[i:], m.UserAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ControllerAddress) > 0 {
		i -= len(m.ControllerAddress)
		copy(dAtA[i:], m.ControllerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ControllerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarkUserProvidedLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarkUserProvidedLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarkUserProvidedLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAirdropDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAirdropDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAirdropDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ControllerAddress) > 0 {
		i -= len(m.ControllerAddress)
		copy(dAtA[i:], m.ControllerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ControllerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAirdropDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAirdropDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAirdropDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClaimAirdropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.QuestType != 0 {
		n += 1 + sovTx(uint64(m.QuestType))
	}
	return n
}

func (m *MsgClaimAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarkSocialQuestPerformedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ControllerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.UserAddresses) > 0 {
		for _, s := range m.UserAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMarkSocialQuestPerformedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarkUserProvidedLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ControllerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.UserAddresses) > 0 {
		for _, s := range m.UserAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMarkUserProvidedLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAirdropDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ControllerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAirdropDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClaimAirdropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAirdropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAirdropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestType", wireType)
			}
			m.QuestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestType |= QuestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarkSocialQuestPerformedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarkSocialQuestPerformedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarkSocialQuestPerformedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddresses = append(m.UserAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarkSocialQuestPerformedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarkSocialQuestPerformedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarkSocialQuestPerformedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarkUserProvidedLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarkUserProvidedLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarkUserProvidedLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddresses = append(m.UserAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarkUserProvidedLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarkUserProvidedLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarkUserProvidedLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAirdropDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAirdropDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAirdropDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &UserState{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAirdropDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAirdropDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAirdropDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
