// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/poolincentive/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisState struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// incentive_pools holds incentive pool list.
	// repeated IncentivePool incentive_pools = 2 [ (gogoproto.nullable) = false ];
	IncentivePoolInfo IncentivePoolInfo `protobuf:"bytes,2,opt,name=incentive_pool_info,json=incentivePoolInfo,proto3" json:"incentive_pool_info"`
	// candidate_pools holds incentive pool list and total weight
	// repeated CandidatePool candidate_pools = 3 [ (gogoproto.nullable) = false ];
	CandidatePoolInfo CandidatePoolInfo `protobuf:"bytes,3,opt,name=candidate_pool_info,json=candidatePoolInfo,proto3" json:"candidate_pool_info"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b41c62ca13fefd51, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetIncentivePoolInfo() IncentivePoolInfo {
	if m != nil {
		return m.IncentivePoolInfo
	}
	return IncentivePoolInfo{}
}

func (m *GenesisState) GetCandidatePoolInfo() CandidatePoolInfo {
	if m != nil {
		return m.CandidatePoolInfo
	}
	return CandidatePoolInfo{}
}

type CandidatePoolInfo struct {
	CandidatePools []*CandidatePool `protobuf:"bytes,1,rep,name=candidate_pools,json=candidatePools,proto3" json:"candidate_pools,omitempty"`
}

func (m *CandidatePoolInfo) Reset()         { *m = CandidatePoolInfo{} }
func (m *CandidatePoolInfo) String() string { return proto.CompactTextString(m) }
func (*CandidatePoolInfo) ProtoMessage()    {}
func (*CandidatePoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b41c62ca13fefd51, []int{1}
}
func (m *CandidatePoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CandidatePoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CandidatePoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CandidatePoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidatePoolInfo.Merge(m, src)
}
func (m *CandidatePoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *CandidatePoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidatePoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CandidatePoolInfo proto.InternalMessageInfo

func (m *CandidatePoolInfo) GetCandidatePools() []*CandidatePool {
	if m != nil {
		return m.CandidatePools
	}
	return nil
}

type CandidatePool struct {
	PoolId              string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolContractAddress string `protobuf:"bytes,2,opt,name=pool_contract_address,json=poolContractAddress,proto3" json:"pool_contract_address,omitempty"`
}

func (m *CandidatePool) Reset()         { *m = CandidatePool{} }
func (m *CandidatePool) String() string { return proto.CompactTextString(m) }
func (*CandidatePool) ProtoMessage()    {}
func (*CandidatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b41c62ca13fefd51, []int{2}
}
func (m *CandidatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CandidatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CandidatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CandidatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandidatePool.Merge(m, src)
}
func (m *CandidatePool) XXX_Size() int {
	return m.Size()
}
func (m *CandidatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_CandidatePool.DiscardUnknown(m)
}

var xxx_messageInfo_CandidatePool proto.InternalMessageInfo

func (m *CandidatePool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *CandidatePool) GetPoolContractAddress() string {
	if m != nil {
		return m.PoolContractAddress
	}
	return ""
}

type IncentivePoolInfo struct {
	TotalWeight    uint64           `protobuf:"varint,1,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	IncentivePools []*IncentivePool `protobuf:"bytes,2,rep,name=incentive_pools,json=incentivePools,proto3" json:"incentive_pools,omitempty"`
}

func (m *IncentivePoolInfo) Reset()         { *m = IncentivePoolInfo{} }
func (m *IncentivePoolInfo) String() string { return proto.CompactTextString(m) }
func (*IncentivePoolInfo) ProtoMessage()    {}
func (*IncentivePoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b41c62ca13fefd51, []int{3}
}
func (m *IncentivePoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePoolInfo.Merge(m, src)
}
func (m *IncentivePoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePoolInfo proto.InternalMessageInfo

func (m *IncentivePoolInfo) GetTotalWeight() uint64 {
	if m != nil {
		return m.TotalWeight
	}
	return 0
}

func (m *IncentivePoolInfo) GetIncentivePools() []*IncentivePool {
	if m != nil {
		return m.IncentivePools
	}
	return nil
}

type IncentivePool struct {
	PoolId              string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolContractAddress string `protobuf:"bytes,2,opt,name=pool_contract_address,json=poolContractAddress,proto3" json:"pool_contract_address,omitempty"`
	Weight              uint64 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *IncentivePool) Reset()         { *m = IncentivePool{} }
func (m *IncentivePool) String() string { return proto.CompactTextString(m) }
func (*IncentivePool) ProtoMessage()    {}
func (*IncentivePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b41c62ca13fefd51, []int{4}
}
func (m *IncentivePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePool.Merge(m, src)
}
func (m *IncentivePool) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePool) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePool.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePool proto.InternalMessageInfo

func (m *IncentivePool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *IncentivePool) GetPoolContractAddress() string {
	if m != nil {
		return m.PoolContractAddress
	}
	return ""
}

func (m *IncentivePool) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "nova.poolincentive.v1.GenesisState")
	proto.RegisterType((*CandidatePoolInfo)(nil), "nova.poolincentive.v1.CandidatePoolInfo")
	proto.RegisterType((*CandidatePool)(nil), "nova.poolincentive.v1.CandidatePool")
	proto.RegisterType((*IncentivePoolInfo)(nil), "nova.poolincentive.v1.IncentivePoolInfo")
	proto.RegisterType((*IncentivePool)(nil), "nova.poolincentive.v1.IncentivePool")
}

func init() {
	proto.RegisterFile("nova/poolincentive/v1/genesis.proto", fileDescriptor_b41c62ca13fefd51)
}

var fileDescriptor_b41c62ca13fefd51 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x3d, 0x8f, 0xd3, 0x30,
	0x18, 0x4e, 0xae, 0x55, 0xd0, 0xb9, 0x77, 0x87, 0xea, 0x52, 0xa8, 0x2a, 0x91, 0x42, 0x60, 0xe8,
	0x42, 0xa2, 0x96, 0x0d, 0x26, 0xda, 0x01, 0x55, 0x08, 0xa9, 0x0a, 0x03, 0x12, 0x03, 0x91, 0x93,
	0xb8, 0xa9, 0xa5, 0xd4, 0x8e, 0x62, 0x13, 0x3e, 0x76, 0x26, 0x16, 0x7e, 0x02, 0x3f, 0xa7, 0x63,
	0x47, 0x26, 0x84, 0xda, 0x85, 0x9f, 0x81, 0xec, 0xa4, 0x08, 0xa7, 0xa5, 0x62, 0xb8, 0xcd, 0xf6,
	0xf3, 0xa5, 0xe7, 0xb5, 0x5e, 0xf0, 0x80, 0xb2, 0x02, 0x79, 0x19, 0x63, 0x29, 0xa1, 0x11, 0xa6,
	0x82, 0x14, 0xd8, 0x2b, 0x46, 0x5e, 0x82, 0x29, 0xe6, 0x84, 0xbb, 0x59, 0xce, 0x04, 0x83, 0x5d,
	0x49, 0x72, 0x35, 0x92, 0x5b, 0x8c, 0xfa, 0xce, 0x71, 0x6d, 0x86, 0x72, 0xb4, 0xaa, 0xa4, 0xfd,
	0x5b, 0x09, 0x4b, 0x98, 0x3a, 0x7a, 0xf2, 0x54, 0xbe, 0x3a, 0x5f, 0xce, 0xc0, 0xc5, 0xf3, 0x32,
	0xe2, 0x95, 0x40, 0x02, 0xc3, 0xa7, 0xc0, 0x2a, 0x65, 0x3d, 0xf3, 0x9e, 0x39, 0x6c, 0x8d, 0xef,
	0xba, 0x47, 0x23, 0xdd, 0xb9, 0x22, 0x4d, 0x9a, 0xeb, 0x1f, 0x03, 0xc3, 0xaf, 0x24, 0xf0, 0x2d,
	0xe8, 0xfc, 0x21, 0x05, 0x52, 0x12, 0x10, 0xba, 0x60, 0xbd, 0x33, 0xe5, 0x34, 0xfc, 0x87, 0xd3,
	0x6c, 0x7f, 0x99, 0x33, 0x96, 0xce, 0xe8, 0x82, 0x55, 0xa6, 0x6d, 0x52, 0x07, 0xa4, 0x7f, 0x84,
	0x68, 0x4c, 0x62, 0x24, 0xfe, 0xf6, 0x6f, 0x9c, 0xf4, 0x9f, 0xee, 0x15, 0x75, 0xff, 0xa8, 0x0e,
	0x38, 0x21, 0x68, 0x1f, 0xb0, 0xe1, 0x4b, 0x70, 0x53, 0x0f, 0x95, 0xa3, 0x69, 0x0c, 0x5b, 0xe3,
	0x87, 0xff, 0x13, 0xe8, 0x5f, 0x69, 0x31, 0xdc, 0x09, 0xc1, 0xa5, 0x46, 0x80, 0x77, 0xc0, 0x8d,
	0xb2, 0x4a, 0xac, 0x46, 0x7e, 0xee, 0x5b, 0xf2, 0x3a, 0x8b, 0xe1, 0x18, 0x74, 0x15, 0x10, 0x31,
	0x2a, 0x72, 0x14, 0x89, 0x00, 0xc5, 0x71, 0x8e, 0x39, 0x57, 0xf3, 0x3c, 0xf7, 0x3b, 0x12, 0x9c,
	0x56, 0xd8, 0xb3, 0x12, 0x7a, 0xd2, 0xfc, 0xf5, 0x6d, 0x60, 0x3a, 0x9f, 0x4d, 0xd0, 0x3e, 0x18,
	0x2b, 0xbc, 0x0f, 0x2e, 0x04, 0x13, 0x28, 0x0d, 0xde, 0x63, 0x92, 0x2c, 0x85, 0x4a, 0x6b, 0xfa,
	0x2d, 0xf5, 0xf6, 0x5a, 0x3d, 0xc9, 0xae, 0xfa, 0x07, 0xca, 0xb0, 0x53, 0x5d, 0xb5, 0x14, 0xff,
	0x4a, 0xfb, 0x32, 0xee, 0x7c, 0x02, 0x97, 0x1a, 0xe1, 0x5a, 0xbb, 0xc2, 0xdb, 0xc0, 0xaa, 0x9a,
	0x34, 0x54, 0x93, 0xea, 0x56, 0xce, 0x60, 0xf2, 0x62, 0xbd, 0xb5, 0xcd, 0xcd, 0xd6, 0x36, 0x7f,
	0x6e, 0x6d, 0xf3, 0xeb, 0xce, 0x36, 0x36, 0x3b, 0xdb, 0xf8, 0xbe, 0xb3, 0x8d, 0x37, 0xa3, 0x84,
	0x88, 0xe5, 0xbb, 0xd0, 0x8d, 0xd8, 0xca, 0x9b, 0xa2, 0x9c, 0x50, 0xf4, 0x28, 0x45, 0x21, 0xf7,
	0xd4, 0x12, 0x7d, 0xa8, 0xad, 0x91, 0xf8, 0x98, 0x61, 0x1e, 0x5a, 0x6a, 0x5b, 0x1e, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x44, 0x0a, 0x5e, 0xa5, 0x03, 0x00, 0x00,
}

func (this *CandidatePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CandidatePool)
	if !ok {
		that2, ok := that.(CandidatePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolId != that1.PoolId {
		return false
	}
	if this.PoolContractAddress != that1.PoolContractAddress {
		return false
	}
	return true
}
func (this *IncentivePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncentivePool)
	if !ok {
		that2, ok := that.(IncentivePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolId != that1.PoolId {
		return false
	}
	if this.PoolContractAddress != that1.PoolContractAddress {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CandidatePoolInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.IncentivePoolInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CandidatePoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CandidatePoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CandidatePoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CandidatePools) > 0 {
		for iNdEx := len(m.CandidatePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CandidatePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CandidatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CandidatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CandidatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolContractAddress) > 0 {
		i -= len(m.PoolContractAddress)
		copy(dAtA[i:], m.PoolContractAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncentivePools) > 0 {
		for iNdEx := len(m.IncentivePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalWeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TotalWeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PoolContractAddress) > 0 {
		i -= len(m.PoolContractAddress)
		copy(dAtA[i:], m.PoolContractAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.IncentivePoolInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CandidatePoolInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *CandidatePoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CandidatePools) > 0 {
		for _, e := range m.CandidatePools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *CandidatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PoolContractAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *IncentivePoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalWeight != 0 {
		n += 1 + sovGenesis(uint64(m.TotalWeight))
	}
	if len(m.IncentivePools) > 0 {
		for _, e := range m.IncentivePools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *IncentivePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PoolContractAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovGenesis(uint64(m.Weight))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentivePoolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidatePoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CandidatePoolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CandidatePoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CandidatePoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CandidatePoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidatePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidatePools = append(m.CandidatePools, &CandidatePool{})
			if err := m.CandidatePools[len(m.CandidatePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CandidatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CandidatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CandidatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			m.TotalWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivePools = append(m.IncentivePools, &IncentivePool{})
			if err := m.IncentivePools[len(m.IncentivePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
