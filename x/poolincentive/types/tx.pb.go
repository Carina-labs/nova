// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/poolincentive/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateCandidatePool is used to create a new candidate pool.
// In order to make pool, we need the contract address of pool id and pool.
type MsgCreateCandidatePool struct {
	PoolId              string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolContractAddress string `protobuf:"bytes,2,opt,name=pool_contract_address,json=poolContractAddress,proto3" json:"pool_contract_address,omitempty"`
	Creator             string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgCreateCandidatePool) Reset()         { *m = MsgCreateCandidatePool{} }
func (m *MsgCreateCandidatePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCandidatePool) ProtoMessage()    {}
func (*MsgCreateCandidatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{0}
}
func (m *MsgCreateCandidatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCandidatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCandidatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCandidatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCandidatePool.Merge(m, src)
}
func (m *MsgCreateCandidatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCandidatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCandidatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCandidatePool proto.InternalMessageInfo

func (m *MsgCreateCandidatePool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgCreateCandidatePool) GetPoolContractAddress() string {
	if m != nil {
		return m.PoolContractAddress
	}
	return ""
}

func (m *MsgCreateCandidatePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgCreateCandidatePoolResponse is a response message for MsgCreateCandidatePool.
type MsgCreateCandidatePoolResponse struct {
}

func (m *MsgCreateCandidatePoolResponse) Reset()         { *m = MsgCreateCandidatePoolResponse{} }
func (m *MsgCreateCandidatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCandidatePoolResponse) ProtoMessage()    {}
func (*MsgCreateCandidatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{1}
}
func (m *MsgCreateCandidatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCandidatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCandidatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCandidatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCandidatePoolResponse.Merge(m, src)
}
func (m *MsgCreateCandidatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCandidatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCandidatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCandidatePoolResponse proto.InternalMessageInfo

// MsgCreateIncentivePool is used to create a new incentive pool.
// In order to make pool, we need the contract address of pool id and pool, and valid operator.
type MsgCreateIncentivePool struct {
	PoolId              string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolContractAddress string `protobuf:"bytes,2,opt,name=pool_contract_address,json=poolContractAddress,proto3" json:"pool_contract_address,omitempty"`
	Operator            string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgCreateIncentivePool) Reset()         { *m = MsgCreateIncentivePool{} }
func (m *MsgCreateIncentivePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIncentivePool) ProtoMessage()    {}
func (*MsgCreateIncentivePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{2}
}
func (m *MsgCreateIncentivePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIncentivePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIncentivePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIncentivePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIncentivePool.Merge(m, src)
}
func (m *MsgCreateIncentivePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIncentivePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIncentivePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIncentivePool proto.InternalMessageInfo

func (m *MsgCreateIncentivePool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgCreateIncentivePool) GetPoolContractAddress() string {
	if m != nil {
		return m.PoolContractAddress
	}
	return ""
}

func (m *MsgCreateIncentivePool) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// MsgCreateIncentivePoolResponse is a response message for MsgCreateIncentivePool.
type MsgCreateIncentivePoolResponse struct {
}

func (m *MsgCreateIncentivePoolResponse) Reset()         { *m = MsgCreateIncentivePoolResponse{} }
func (m *MsgCreateIncentivePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIncentivePoolResponse) ProtoMessage()    {}
func (*MsgCreateIncentivePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{3}
}
func (m *MsgCreateIncentivePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIncentivePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIncentivePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIncentivePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIncentivePoolResponse.Merge(m, src)
}
func (m *MsgCreateIncentivePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIncentivePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIncentivePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIncentivePoolResponse proto.InternalMessageInfo

// MsgSetPoolWeight is a message used to modify the weight of the incentive pool.
// It can only be submitted by the correct controller.
type MsgSetPoolWeight struct {
	PoolId    string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NewWeight uint64 `protobuf:"varint,2,opt,name=new_weight,json=newWeight,proto3" json:"new_weight,omitempty"`
	Operator  string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgSetPoolWeight) Reset()         { *m = MsgSetPoolWeight{} }
func (m *MsgSetPoolWeight) String() string { return proto.CompactTextString(m) }
func (*MsgSetPoolWeight) ProtoMessage()    {}
func (*MsgSetPoolWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{4}
}
func (m *MsgSetPoolWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPoolWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPoolWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPoolWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPoolWeight.Merge(m, src)
}
func (m *MsgSetPoolWeight) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPoolWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPoolWeight.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPoolWeight proto.InternalMessageInfo

func (m *MsgSetPoolWeight) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgSetPoolWeight) GetNewWeight() uint64 {
	if m != nil {
		return m.NewWeight
	}
	return 0
}

func (m *MsgSetPoolWeight) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// MsgSetPoolWeightResponse is a response message for MsgSetPoolWeight.
type MsgSetPoolWeightResponse struct {
}

func (m *MsgSetPoolWeightResponse) Reset()         { *m = MsgSetPoolWeightResponse{} }
func (m *MsgSetPoolWeightResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPoolWeightResponse) ProtoMessage()    {}
func (*MsgSetPoolWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{5}
}
func (m *MsgSetPoolWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPoolWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPoolWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPoolWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPoolWeightResponse.Merge(m, src)
}
func (m *MsgSetPoolWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPoolWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPoolWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPoolWeightResponse proto.InternalMessageInfo

// MsgSetMultiplePoolWeight is a message used to modify the weight of several incentive pools at once.
// It can only be submitted by the correct controller.
type MsgSetMultiplePoolWeight struct {
	NewPoolData []NewPoolWeight `protobuf:"bytes,1,rep,name=new_pool_data,json=newPoolData,proto3" json:"new_pool_data"`
	Operator    string          `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgSetMultiplePoolWeight) Reset()         { *m = MsgSetMultiplePoolWeight{} }
func (m *MsgSetMultiplePoolWeight) String() string { return proto.CompactTextString(m) }
func (*MsgSetMultiplePoolWeight) ProtoMessage()    {}
func (*MsgSetMultiplePoolWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{6}
}
func (m *MsgSetMultiplePoolWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMultiplePoolWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMultiplePoolWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMultiplePoolWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMultiplePoolWeight.Merge(m, src)
}
func (m *MsgSetMultiplePoolWeight) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMultiplePoolWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMultiplePoolWeight.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMultiplePoolWeight proto.InternalMessageInfo

func (m *MsgSetMultiplePoolWeight) GetNewPoolData() []NewPoolWeight {
	if m != nil {
		return m.NewPoolData
	}
	return nil
}

func (m *MsgSetMultiplePoolWeight) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// NewPoolWeight is a structure consisting of pool id and weight.
type NewPoolWeight struct {
	PoolId    string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NewWeight uint64 `protobuf:"varint,2,opt,name=new_weight,json=newWeight,proto3" json:"new_weight,omitempty"`
}

func (m *NewPoolWeight) Reset()         { *m = NewPoolWeight{} }
func (m *NewPoolWeight) String() string { return proto.CompactTextString(m) }
func (*NewPoolWeight) ProtoMessage()    {}
func (*NewPoolWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{7}
}
func (m *NewPoolWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewPoolWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewPoolWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewPoolWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPoolWeight.Merge(m, src)
}
func (m *NewPoolWeight) XXX_Size() int {
	return m.Size()
}
func (m *NewPoolWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPoolWeight.DiscardUnknown(m)
}

var xxx_messageInfo_NewPoolWeight proto.InternalMessageInfo

func (m *NewPoolWeight) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *NewPoolWeight) GetNewWeight() uint64 {
	if m != nil {
		return m.NewWeight
	}
	return 0
}

// MsgSetMultiplePoolWeightResponse is a response message for MsgSetMultiplePoolWeight.
type MsgSetMultiplePoolWeightResponse struct {
}

func (m *MsgSetMultiplePoolWeightResponse) Reset()         { *m = MsgSetMultiplePoolWeightResponse{} }
func (m *MsgSetMultiplePoolWeightResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMultiplePoolWeightResponse) ProtoMessage()    {}
func (*MsgSetMultiplePoolWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36cf7b7ca6349a24, []int{8}
}
func (m *MsgSetMultiplePoolWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMultiplePoolWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMultiplePoolWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMultiplePoolWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMultiplePoolWeightResponse.Merge(m, src)
}
func (m *MsgSetMultiplePoolWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMultiplePoolWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMultiplePoolWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMultiplePoolWeightResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCandidatePool)(nil), "nova.poolincentive.v1.MsgCreateCandidatePool")
	proto.RegisterType((*MsgCreateCandidatePoolResponse)(nil), "nova.poolincentive.v1.MsgCreateCandidatePoolResponse")
	proto.RegisterType((*MsgCreateIncentivePool)(nil), "nova.poolincentive.v1.MsgCreateIncentivePool")
	proto.RegisterType((*MsgCreateIncentivePoolResponse)(nil), "nova.poolincentive.v1.MsgCreateIncentivePoolResponse")
	proto.RegisterType((*MsgSetPoolWeight)(nil), "nova.poolincentive.v1.MsgSetPoolWeight")
	proto.RegisterType((*MsgSetPoolWeightResponse)(nil), "nova.poolincentive.v1.MsgSetPoolWeightResponse")
	proto.RegisterType((*MsgSetMultiplePoolWeight)(nil), "nova.poolincentive.v1.MsgSetMultiplePoolWeight")
	proto.RegisterType((*NewPoolWeight)(nil), "nova.poolincentive.v1.NewPoolWeight")
	proto.RegisterType((*MsgSetMultiplePoolWeightResponse)(nil), "nova.poolincentive.v1.MsgSetMultiplePoolWeightResponse")
}

func init() { proto.RegisterFile("nova/poolincentive/v1/tx.proto", fileDescriptor_36cf7b7ca6349a24) }

var fileDescriptor_36cf7b7ca6349a24 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0xb3, 0x4d, 0x69, 0xff, 0x7d, 0xfb, 0x0f, 0xc8, 0xd6, 0xd8, 0x75, 0xc1, 0x35, 0x2c,
	0x82, 0x45, 0xe8, 0x2e, 0x8d, 0x8a, 0xd0, 0x9b, 0x8d, 0x20, 0x3d, 0x24, 0x48, 0x3c, 0x08, 0x5e,
	0xc2, 0x64, 0x77, 0xd8, 0x0e, 0x6c, 0x66, 0x96, 0x9d, 0xc9, 0xa6, 0xe2, 0x49, 0xef, 0x42, 0x2f,
	0x7e, 0x0f, 0x3f, 0x46, 0x8f, 0x3d, 0x7a, 0x12, 0x49, 0x0e, 0xde, 0xfc, 0x0c, 0x32, 0xb3, 0xd9,
	0x6d, 0xa6, 0x6e, 0x5a, 0x23, 0xde, 0xf2, 0xee, 0xf3, 0xbc, 0xef, 0xf3, 0x9b, 0xe1, 0xcd, 0x80,
	0x43, 0x59, 0x86, 0xfc, 0x84, 0xb1, 0x98, 0xd0, 0x00, 0x53, 0x41, 0x32, 0xec, 0x67, 0x07, 0xbe,
	0x38, 0xf5, 0x92, 0x94, 0x09, 0x66, 0x36, 0xa5, 0xee, 0x69, 0xba, 0x97, 0x1d, 0xd8, 0xb7, 0x23,
	0x16, 0x31, 0xe5, 0xf0, 0xe5, 0xaf, 0xdc, 0x6c, 0xdf, 0x0d, 0x18, 0x1f, 0x31, 0x3e, 0xc8, 0x85,
	0xbc, 0x98, 0x4b, 0xbb, 0x79, 0xe5, 0x8f, 0x78, 0x24, 0xe7, 0x8f, 0x78, 0x94, 0x0b, 0xee, 0x27,
	0x03, 0xee, 0x74, 0x79, 0xd4, 0x49, 0x31, 0x12, 0xb8, 0x83, 0x68, 0x48, 0x42, 0x24, 0xf0, 0x2b,
	0xc6, 0x62, 0x73, 0x17, 0x36, 0x65, 0xf0, 0x80, 0x84, 0x96, 0xd1, 0x32, 0xf6, 0xb6, 0xfa, 0x1b,
	0xb2, 0x3c, 0x0e, 0xcd, 0x36, 0x34, 0x95, 0x10, 0x30, 0x2a, 0x52, 0x14, 0x88, 0x01, 0x0a, 0xc3,
	0x14, 0x73, 0x6e, 0xad, 0x29, 0xdb, 0x8e, 0x14, 0x3b, 0x73, 0xed, 0x79, 0x2e, 0x99, 0x16, 0x6c,
	0x06, 0x32, 0x83, 0xa5, 0x56, 0x5d, 0xb9, 0x8a, 0xf2, 0xf0, 0xff, 0x8f, 0x3f, 0xbe, 0x3c, 0x2a,
	0x2a, 0xb7, 0x05, 0x4e, 0x35, 0x4e, 0x1f, 0xf3, 0x84, 0x51, 0x8e, 0xdd, 0xb3, 0x45, 0xe2, 0xe3,
	0xe2, 0x56, 0xfe, 0x3d, 0xb1, 0x0d, 0xff, 0xb1, 0x04, 0xa7, 0x0b, 0xc8, 0x65, 0x7d, 0xd8, 0x90,
	0xcc, 0x65, 0xa9, 0x41, 0x6b, 0x44, 0x25, 0xf4, 0x18, 0x6e, 0x75, 0x79, 0xf4, 0x1a, 0x0b, 0xf9,
	0xf5, 0x0d, 0x26, 0xd1, 0x89, 0x58, 0x4e, 0x7b, 0x0f, 0x80, 0xe2, 0xc9, 0x60, 0xa2, 0x6c, 0x0a,
	0x71, 0xbd, 0xbf, 0x45, 0xf1, 0x64, 0xde, 0xb7, 0x02, 0x98, 0x0d, 0xd6, 0xd5, 0xd8, 0x12, 0xe9,
	0xb3, 0x51, 0x88, 0xdd, 0x71, 0x2c, 0x48, 0x12, 0xe3, 0x05, 0xb6, 0x1e, 0x34, 0x24, 0x82, 0xe2,
	0x0b, 0x91, 0x40, 0x96, 0xd1, 0xaa, 0xef, 0x6d, 0xb7, 0x1f, 0x78, 0x95, 0xfb, 0xe8, 0xf5, 0xf0,
	0xe4, 0xb2, 0xf9, 0x68, 0xfd, 0xfc, 0xdb, 0xfd, 0x5a, 0x7f, 0x9b, 0xe6, 0x1f, 0x5f, 0x20, 0x81,
	0x34, 0xe6, 0xb5, 0xeb, 0x99, 0x5f, 0x42, 0x43, 0x1b, 0xf7, 0xb7, 0xf7, 0xe4, 0xba, 0xd0, 0x5a,
	0x76, 0xbe, 0xe2, 0x12, 0xda, 0x3f, 0xeb, 0x50, 0xef, 0xf2, 0xc8, 0x7c, 0x0f, 0x3b, 0x55, 0x7f,
	0x81, 0xfd, 0x25, 0xe7, 0xad, 0x5e, 0x51, 0xfb, 0xe9, 0x4a, 0xf6, 0x02, 0xe2, 0x32, 0x5c, 0xdf,
	0xe6, 0x1b, 0xc3, 0x35, 0xfb, 0xcd, 0xe1, 0x95, 0x9b, 0x69, 0x12, 0x68, 0xe8, 0x6b, 0xf9, 0x70,
	0xf9, 0x1c, 0xcd, 0x68, 0xfb, 0x7f, 0x68, 0x2c, 0xa3, 0x3e, 0x18, 0xd0, 0xac, 0x5e, 0xb7, 0xeb,
	0x47, 0xfd, 0xde, 0x60, 0x3f, 0x5b, 0xb1, 0xa1, 0x60, 0x38, 0xea, 0x9d, 0x4f, 0x1d, 0xe3, 0x62,
	0xea, 0x18, 0xdf, 0xa7, 0x8e, 0x71, 0x36, 0x73, 0x6a, 0x17, 0x33, 0xa7, 0xf6, 0x75, 0xe6, 0xd4,
	0xde, 0x3e, 0x89, 0x88, 0x38, 0x19, 0x0f, 0xbd, 0x80, 0x8d, 0xfc, 0x0e, 0x4a, 0x09, 0x45, 0xfb,
	0x31, 0x1a, 0x72, 0x5f, 0xbd, 0xd0, 0x59, 0xdb, 0x3f, 0xbd, 0xf2, 0x4c, 0x8b, 0x77, 0x09, 0xe6,
	0xc3, 0x0d, 0xf5, 0x8c, 0x3e, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x02, 0x9a, 0xc7, 0xaa, 0xc9,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCandidatePool creates new "candidate" pool, which can be created by anyone
	CreateCandidatePool(ctx context.Context, in *MsgCreateCandidatePool, opts ...grpc.CallOption) (*MsgCreateCandidatePoolResponse, error)
	// CreateIncentivePool creates new "incentive" pool, which can be created by only operator
	CreateIncentivePool(ctx context.Context, in *MsgCreateIncentivePool, opts ...grpc.CallOption) (*MsgCreateIncentivePoolResponse, error)
	// SetPoolWeight sets new weight of one pool
	SetPoolWeight(ctx context.Context, in *MsgSetPoolWeight, opts ...grpc.CallOption) (*MsgSetPoolWeightResponse, error)
	// SetMultiplePoolWeight sets new weight of multiple pool
	SetMultiplePoolWeight(ctx context.Context, in *MsgSetMultiplePoolWeight, opts ...grpc.CallOption) (*MsgSetMultiplePoolWeightResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCandidatePool(ctx context.Context, in *MsgCreateCandidatePool, opts ...grpc.CallOption) (*MsgCreateCandidatePoolResponse, error) {
	out := new(MsgCreateCandidatePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Msg/CreateCandidatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateIncentivePool(ctx context.Context, in *MsgCreateIncentivePool, opts ...grpc.CallOption) (*MsgCreateIncentivePoolResponse, error) {
	out := new(MsgCreateIncentivePoolResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Msg/CreateIncentivePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPoolWeight(ctx context.Context, in *MsgSetPoolWeight, opts ...grpc.CallOption) (*MsgSetPoolWeightResponse, error) {
	out := new(MsgSetPoolWeightResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Msg/SetPoolWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMultiplePoolWeight(ctx context.Context, in *MsgSetMultiplePoolWeight, opts ...grpc.CallOption) (*MsgSetMultiplePoolWeightResponse, error) {
	out := new(MsgSetMultiplePoolWeightResponse)
	err := c.cc.Invoke(ctx, "/nova.poolincentive.v1.Msg/SetMultiplePoolWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCandidatePool creates new "candidate" pool, which can be created by anyone
	CreateCandidatePool(context.Context, *MsgCreateCandidatePool) (*MsgCreateCandidatePoolResponse, error)
	// CreateIncentivePool creates new "incentive" pool, which can be created by only operator
	CreateIncentivePool(context.Context, *MsgCreateIncentivePool) (*MsgCreateIncentivePoolResponse, error)
	// SetPoolWeight sets new weight of one pool
	SetPoolWeight(context.Context, *MsgSetPoolWeight) (*MsgSetPoolWeightResponse, error)
	// SetMultiplePoolWeight sets new weight of multiple pool
	SetMultiplePoolWeight(context.Context, *MsgSetMultiplePoolWeight) (*MsgSetMultiplePoolWeightResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCandidatePool(ctx context.Context, req *MsgCreateCandidatePool) (*MsgCreateCandidatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCandidatePool not implemented")
}
func (*UnimplementedMsgServer) CreateIncentivePool(ctx context.Context, req *MsgCreateIncentivePool) (*MsgCreateIncentivePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncentivePool not implemented")
}
func (*UnimplementedMsgServer) SetPoolWeight(ctx context.Context, req *MsgSetPoolWeight) (*MsgSetPoolWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoolWeight not implemented")
}
func (*UnimplementedMsgServer) SetMultiplePoolWeight(ctx context.Context, req *MsgSetMultiplePoolWeight) (*MsgSetMultiplePoolWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiplePoolWeight not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCandidatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCandidatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCandidatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Msg/CreateCandidatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCandidatePool(ctx, req.(*MsgCreateCandidatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateIncentivePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIncentivePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIncentivePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Msg/CreateIncentivePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIncentivePool(ctx, req.(*MsgCreateIncentivePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPoolWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPoolWeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPoolWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Msg/SetPoolWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPoolWeight(ctx, req.(*MsgSetPoolWeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMultiplePoolWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMultiplePoolWeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMultiplePoolWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.poolincentive.v1.Msg/SetMultiplePoolWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMultiplePoolWeight(ctx, req.(*MsgSetMultiplePoolWeight))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nova.poolincentive.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCandidatePool",
			Handler:    _Msg_CreateCandidatePool_Handler,
		},
		{
			MethodName: "CreateIncentivePool",
			Handler:    _Msg_CreateIncentivePool_Handler,
		},
		{
			MethodName: "SetPoolWeight",
			Handler:    _Msg_SetPoolWeight_Handler,
		},
		{
			MethodName: "SetMultiplePoolWeight",
			Handler:    _Msg_SetMultiplePoolWeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/poolincentive/v1/tx.proto",
}

func (m *MsgCreateCandidatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCandidatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCandidatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolContractAddress) > 0 {
		i -= len(m.PoolContractAddress)
		copy(dAtA[i:], m.PoolContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCandidatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCandidatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCandidatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateIncentivePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIncentivePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIncentivePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolContractAddress) > 0 {
		i -= len(m.PoolContractAddress)
		copy(dAtA[i:], m.PoolContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIncentivePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIncentivePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIncentivePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPoolWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPoolWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPoolWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewWeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewWeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPoolWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPoolWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPoolWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMultiplePoolWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMultiplePoolWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMultiplePoolWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NewPoolData) > 0 {
		for iNdEx := len(m.NewPoolData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewPoolData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewPoolWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewPoolWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewPoolWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewWeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewWeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMultiplePoolWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMultiplePoolWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMultiplePoolWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCandidatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCandidatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateIncentivePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateIncentivePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPoolWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewWeight != 0 {
		n += 1 + sovTx(uint64(m.NewWeight))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetPoolWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMultiplePoolWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewPoolData) > 0 {
		for _, e := range m.NewPoolData {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *NewPoolWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewWeight != 0 {
		n += 1 + sovTx(uint64(m.NewWeight))
	}
	return n
}

func (m *MsgSetMultiplePoolWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCandidatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCandidatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCandidatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCandidatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCandidatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCandidatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIncentivePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIncentivePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIncentivePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIncentivePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIncentivePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIncentivePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPoolWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPoolWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPoolWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWeight", wireType)
			}
			m.NewWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPoolWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPoolWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPoolWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMultiplePoolWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMultiplePoolWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMultiplePoolWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPoolData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPoolData = append(m.NewPoolData, NewPoolWeight{})
			if err := m.NewPoolData[len(m.NewPoolData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewPoolWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewPoolWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewPoolWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWeight", wireType)
			}
			m.NewWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMultiplePoolWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMultiplePoolWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMultiplePoolWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
