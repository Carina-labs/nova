// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/icacontrol/v1/icacontrol.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisteredZone struct {
	ZoneId               string                  `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	IcaConnectionInfo    *IcaConnectionInfo      `protobuf:"bytes,2,opt,name=ica_connection_info,json=icaConnectionInfo,proto3" json:"ica_connection_info,omitempty"`
	IcaAccount           *IcaAccount             `protobuf:"bytes,3,opt,name=ica_account,json=icaAccount,proto3" json:"ica_account,omitempty"`
	TransferInfo         *TransferConnectionInfo `protobuf:"bytes,4,opt,name=transfer_info,json=transferInfo,proto3" json:"transfer_info,omitempty"`
	ValidatorAddress     string                  `protobuf:"bytes,5,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	BaseDenom            string                  `protobuf:"bytes,6,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	SnDenom              string                  `protobuf:"bytes,7,opt,name=sn_denom,json=snDenom,proto3" json:"sn_denom,omitempty"`
	Decimal              int64                   `protobuf:"varint,8,opt,name=decimal,proto3" json:"decimal,omitempty"`
	UndelegateMaxEntries int64                   `protobuf:"varint,9,opt,name=undelegate_max_entries,json=undelegateMaxEntries,proto3" json:"undelegate_max_entries,omitempty"`
	DepositMaxEntries    int64                   `protobuf:"varint,10,opt,name=deposit_max_entries,json=depositMaxEntries,proto3" json:"deposit_max_entries,omitempty"`
}

func (m *RegisteredZone) Reset()         { *m = RegisteredZone{} }
func (m *RegisteredZone) String() string { return proto.CompactTextString(m) }
func (*RegisteredZone) ProtoMessage()    {}
func (*RegisteredZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_e227d7e42241d5cd, []int{0}
}
func (m *RegisteredZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredZone.Merge(m, src)
}
func (m *RegisteredZone) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredZone) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredZone.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredZone proto.InternalMessageInfo

func (m *RegisteredZone) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *RegisteredZone) GetIcaConnectionInfo() *IcaConnectionInfo {
	if m != nil {
		return m.IcaConnectionInfo
	}
	return nil
}

func (m *RegisteredZone) GetIcaAccount() *IcaAccount {
	if m != nil {
		return m.IcaAccount
	}
	return nil
}

func (m *RegisteredZone) GetTransferInfo() *TransferConnectionInfo {
	if m != nil {
		return m.TransferInfo
	}
	return nil
}

func (m *RegisteredZone) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *RegisteredZone) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *RegisteredZone) GetSnDenom() string {
	if m != nil {
		return m.SnDenom
	}
	return ""
}

func (m *RegisteredZone) GetDecimal() int64 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *RegisteredZone) GetUndelegateMaxEntries() int64 {
	if m != nil {
		return m.UndelegateMaxEntries
	}
	return 0
}

func (m *RegisteredZone) GetDepositMaxEntries() int64 {
	if m != nil {
		return m.DepositMaxEntries
	}
	return 0
}

type IcaAccount struct {
	ControllerAddress string `protobuf:"bytes,1,opt,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
	HostAddress       string `protobuf:"bytes,2,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty"`
}

func (m *IcaAccount) Reset()         { *m = IcaAccount{} }
func (m *IcaAccount) String() string { return proto.CompactTextString(m) }
func (*IcaAccount) ProtoMessage()    {}
func (*IcaAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e227d7e42241d5cd, []int{1}
}
func (m *IcaAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IcaAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IcaAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IcaAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcaAccount.Merge(m, src)
}
func (m *IcaAccount) XXX_Size() int {
	return m.Size()
}
func (m *IcaAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_IcaAccount.DiscardUnknown(m)
}

var xxx_messageInfo_IcaAccount proto.InternalMessageInfo

func (m *IcaAccount) GetControllerAddress() string {
	if m != nil {
		return m.ControllerAddress
	}
	return ""
}

func (m *IcaAccount) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

//zone name, connection id, portID(owner address)
type IcaConnectionInfo struct {
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	PortId       string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *IcaConnectionInfo) Reset()         { *m = IcaConnectionInfo{} }
func (m *IcaConnectionInfo) String() string { return proto.CompactTextString(m) }
func (*IcaConnectionInfo) ProtoMessage()    {}
func (*IcaConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e227d7e42241d5cd, []int{2}
}
func (m *IcaConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IcaConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IcaConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IcaConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcaConnectionInfo.Merge(m, src)
}
func (m *IcaConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *IcaConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IcaConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IcaConnectionInfo proto.InternalMessageInfo

func (m *IcaConnectionInfo) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *IcaConnectionInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *IcaConnectionInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

//transfer connection info
type TransferConnectionInfo struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *TransferConnectionInfo) Reset()         { *m = TransferConnectionInfo{} }
func (m *TransferConnectionInfo) String() string { return proto.CompactTextString(m) }
func (*TransferConnectionInfo) ProtoMessage()    {}
func (*TransferConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e227d7e42241d5cd, []int{3}
}
func (m *TransferConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferConnectionInfo.Merge(m, src)
}
func (m *TransferConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransferConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransferConnectionInfo proto.InternalMessageInfo

func (m *TransferConnectionInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *TransferConnectionInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

type ControllerAddressInfo struct {
	ZoneId            string   `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ControllerAddress []string `protobuf:"bytes,2,rep,name=controller_address,json=controllerAddress,proto3" json:"controller_address,omitempty"`
}

func (m *ControllerAddressInfo) Reset()         { *m = ControllerAddressInfo{} }
func (m *ControllerAddressInfo) String() string { return proto.CompactTextString(m) }
func (*ControllerAddressInfo) ProtoMessage()    {}
func (*ControllerAddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e227d7e42241d5cd, []int{4}
}
func (m *ControllerAddressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerAddressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControllerAddressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControllerAddressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerAddressInfo.Merge(m, src)
}
func (m *ControllerAddressInfo) XXX_Size() int {
	return m.Size()
}
func (m *ControllerAddressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerAddressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerAddressInfo proto.InternalMessageInfo

func (m *ControllerAddressInfo) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *ControllerAddressInfo) GetControllerAddress() []string {
	if m != nil {
		return m.ControllerAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisteredZone)(nil), "nova.icacontrol.v1.RegisteredZone")
	proto.RegisterType((*IcaAccount)(nil), "nova.icacontrol.v1.IcaAccount")
	proto.RegisterType((*IcaConnectionInfo)(nil), "nova.icacontrol.v1.IcaConnectionInfo")
	proto.RegisterType((*TransferConnectionInfo)(nil), "nova.icacontrol.v1.TransferConnectionInfo")
	proto.RegisterType((*ControllerAddressInfo)(nil), "nova.icacontrol.v1.ControllerAddressInfo")
}

func init() {
	proto.RegisterFile("nova/icacontrol/v1/icacontrol.proto", fileDescriptor_e227d7e42241d5cd)
}

var fileDescriptor_e227d7e42241d5cd = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x41, 0x8f, 0x12, 0x31,
	0x14, 0xde, 0x59, 0x14, 0x96, 0xc2, 0x1a, 0xe9, 0xae, 0xeb, 0xec, 0x26, 0x4e, 0x90, 0x8d, 0x09,
	0xd1, 0xec, 0x4c, 0x50, 0xef, 0x66, 0x45, 0x13, 0xe7, 0x60, 0x34, 0x44, 0x2f, 0x7b, 0x70, 0x52,
	0xda, 0x02, 0x4d, 0x86, 0x3e, 0x32, 0x2d, 0x04, 0xfd, 0x15, 0xfe, 0x2c, 0x8f, 0x7b, 0xf4, 0x68,
	0xe0, 0x57, 0x78, 0x33, 0x6d, 0x07, 0x06, 0x59, 0xb8, 0xcd, 0xfb, 0xbe, 0xef, 0x7d, 0xbc, 0x7e,
	0xbc, 0x16, 0x5d, 0x4a, 0x98, 0x91, 0x48, 0x50, 0x42, 0x41, 0xea, 0x0c, 0xd2, 0x68, 0xd6, 0xd9,
	0xa8, 0xc2, 0x49, 0x06, 0x1a, 0x30, 0x36, 0xa2, 0x70, 0x03, 0x9e, 0x75, 0x2e, 0x4e, 0x87, 0x30,
	0x04, 0x4b, 0x47, 0xe6, 0xcb, 0x29, 0x2f, 0xce, 0x29, 0xa8, 0x31, 0xa8, 0xc4, 0x11, 0xae, 0xc8,
	0xa9, 0xc0, 0x55, 0x51, 0x9f, 0x28, 0x1e, 0xcd, 0x3a, 0x7d, 0xae, 0x49, 0x27, 0xa2, 0x20, 0xa4,
	0xe3, 0x5b, 0x7f, 0x4b, 0xe8, 0x41, 0x8f, 0x0f, 0x85, 0xd2, 0x3c, 0xe3, 0xec, 0x06, 0x24, 0xc7,
	0x8f, 0x51, 0xe5, 0x07, 0x48, 0x9e, 0x08, 0xe6, 0x7b, 0x4d, 0xaf, 0x5d, 0xed, 0x95, 0x4d, 0x19,
	0x33, 0xfc, 0x15, 0x9d, 0x08, 0x4a, 0x12, 0x0a, 0x52, 0x72, 0xaa, 0x05, 0xc8, 0x44, 0xc8, 0x01,
	0xf8, 0x87, 0x4d, 0xaf, 0x5d, 0x7b, 0xf9, 0x2c, 0xbc, 0x3b, 0x6e, 0x18, 0x53, 0xd2, 0x5d, 0xab,
	0x63, 0x39, 0x80, 0x5e, 0x43, 0x6c, 0x43, 0xf8, 0x0d, 0xaa, 0x19, 0x5b, 0x42, 0x29, 0x4c, 0xa5,
	0xf6, 0x4b, 0xd6, 0x2e, 0xd8, 0x63, 0x77, 0xed, 0x54, 0x3d, 0x24, 0xd6, 0xdf, 0xf8, 0x13, 0x3a,
	0xd6, 0x19, 0x91, 0x6a, 0xc0, 0x33, 0x37, 0xd1, 0x3d, 0x6b, 0xf1, 0x7c, 0x97, 0xc5, 0x97, 0x5c,
	0xb8, 0x35, 0x56, 0x7d, 0x65, 0x60, 0x27, 0x7a, 0x81, 0x1a, 0x33, 0x92, 0x0a, 0x46, 0x34, 0x64,
	0x09, 0x61, 0x2c, 0xe3, 0x4a, 0xf9, 0xf7, 0x6d, 0x16, 0x0f, 0xd7, 0xc4, 0xb5, 0xc3, 0xf1, 0x13,
	0x84, 0x4c, 0xb8, 0x09, 0xe3, 0x12, 0xc6, 0x7e, 0xd9, 0xaa, 0xaa, 0x06, 0x79, 0x67, 0x00, 0x7c,
	0x8e, 0x8e, 0x94, 0xcc, 0xc9, 0x8a, 0x25, 0x2b, 0x4a, 0x3a, 0xca, 0x47, 0x15, 0xc6, 0xa9, 0x18,
	0x93, 0xd4, 0x3f, 0x6a, 0x7a, 0xed, 0x52, 0x6f, 0x55, 0xe2, 0xd7, 0xe8, 0x6c, 0x2a, 0x19, 0x4f,
	0xf9, 0x90, 0x68, 0x9e, 0x8c, 0xc9, 0x3c, 0xe1, 0x52, 0x67, 0x82, 0x2b, 0xbf, 0x6a, 0x85, 0xa7,
	0x05, 0xfb, 0x91, 0xcc, 0xdf, 0x3b, 0x0e, 0x87, 0xe8, 0x84, 0xf1, 0x09, 0x28, 0xa1, 0xff, 0x6b,
	0x41, 0xb6, 0xa5, 0x91, 0x53, 0x85, 0xbe, 0xf5, 0x0d, 0xa1, 0x22, 0x51, 0x7c, 0x85, 0x70, 0x9e,
	0x53, 0xca, 0x8b, 0x53, 0xbb, 0x0d, 0x68, 0x14, 0xcc, 0xea, 0xd8, 0x4f, 0x51, 0x7d, 0x04, 0x4a,
	0xaf, 0x85, 0x87, 0x56, 0x58, 0x33, 0x58, 0x2e, 0x69, 0x4d, 0x50, 0xe3, 0xce, 0x02, 0xe0, 0x4b,
	0x74, 0xbc, 0xb9, 0x40, 0xab, 0x1d, 0xab, 0x17, 0x60, 0xcc, 0xcc, 0x0a, 0x4e, 0x20, 0xd3, 0x86,
	0x76, 0xbe, 0x65, 0x53, 0xc6, 0xcc, 0x84, 0x4d, 0x47, 0x44, 0x4a, 0x9e, 0x1a, 0xae, 0xe4, 0xc2,
	0xce, 0x91, 0x98, 0xb5, 0x3e, 0xa3, 0xb3, 0xdd, 0x7f, 0xf0, 0x56, 0xa3, 0xb7, 0xd5, 0xb8, 0xf7,
	0x07, 0x5b, 0x09, 0x7a, 0xd4, 0xdd, 0x3e, 0xbb, 0x35, 0xdc, 0x7b, 0x4b, 0x76, 0xe7, 0x78, 0xd8,
	0x2c, 0xed, 0xcc, 0xf1, 0xed, 0x87, 0x5f, 0x8b, 0xc0, 0xbb, 0x5d, 0x04, 0xde, 0x9f, 0x45, 0xe0,
	0xfd, 0x5c, 0x06, 0x07, 0xb7, 0xcb, 0xe0, 0xe0, 0xf7, 0x32, 0x38, 0xb8, 0x09, 0x87, 0x42, 0x8f,
	0xa6, 0xfd, 0x90, 0xc2, 0x38, 0xea, 0x92, 0x4c, 0x48, 0x72, 0x95, 0x92, 0xbe, 0x8a, 0xec, 0xdb,
	0x31, 0xdf, 0x7c, 0x3d, 0xf4, 0xf7, 0x09, 0x57, 0xfd, 0xb2, 0xbd, 0xd1, 0xaf, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0xb2, 0x8d, 0x9a, 0x5d, 0x04, 0x00, 0x00,
}

func (m *RegisteredZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositMaxEntries != 0 {
		i = encodeVarintIcacontrol(dAtA, i, uint64(m.DepositMaxEntries))
		i--
		dAtA[i] = 0x50
	}
	if m.UndelegateMaxEntries != 0 {
		i = encodeVarintIcacontrol(dAtA, i, uint64(m.UndelegateMaxEntries))
		i--
		dAtA[i] = 0x48
	}
	if m.Decimal != 0 {
		i = encodeVarintIcacontrol(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SnDenom) > 0 {
		i -= len(m.SnDenom)
		copy(dAtA[i:], m.SnDenom)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.SnDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransferInfo != nil {
		{
			size, err := m.TransferInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIcacontrol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IcaAccount != nil {
		{
			size, err := m.IcaAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIcacontrol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IcaConnectionInfo != nil {
		{
			size, err := m.IcaConnectionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIcacontrol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IcaAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IcaAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IcaAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ControllerAddress) > 0 {
		i -= len(m.ControllerAddress)
		copy(dAtA[i:], m.ControllerAddress)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ControllerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IcaConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IcaConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IcaConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControllerAddressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerAddressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControllerAddressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ControllerAddress) > 0 {
		for iNdEx := len(m.ControllerAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ControllerAddress[iNdEx])
			copy(dAtA[i:], m.ControllerAddress[iNdEx])
			i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ControllerAddress[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintIcacontrol(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIcacontrol(dAtA []byte, offset int, v uint64) int {
	offset -= sovIcacontrol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisteredZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	if m.IcaConnectionInfo != nil {
		l = m.IcaConnectionInfo.Size()
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	if m.IcaAccount != nil {
		l = m.IcaAccount.Size()
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	if m.TransferInfo != nil {
		l = m.TransferInfo.Size()
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.SnDenom)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovIcacontrol(uint64(m.Decimal))
	}
	if m.UndelegateMaxEntries != 0 {
		n += 1 + sovIcacontrol(uint64(m.UndelegateMaxEntries))
	}
	if m.DepositMaxEntries != 0 {
		n += 1 + sovIcacontrol(uint64(m.DepositMaxEntries))
	}
	return n
}

func (m *IcaAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ControllerAddress)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	return n
}

func (m *IcaConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	return n
}

func (m *TransferConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	return n
}

func (m *ControllerAddressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovIcacontrol(uint64(l))
	}
	if len(m.ControllerAddress) > 0 {
		for _, s := range m.ControllerAddress {
			l = len(s)
			n += 1 + l + sovIcacontrol(uint64(l))
		}
	}
	return n
}

func sovIcacontrol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIcacontrol(x uint64) (n int) {
	return sovIcacontrol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisteredZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcacontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaConnectionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IcaConnectionInfo == nil {
				m.IcaConnectionInfo = &IcaConnectionInfo{}
			}
			if err := m.IcaConnectionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IcaAccount == nil {
				m.IcaAccount = &IcaAccount{}
			}
			if err := m.IcaAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferInfo == nil {
				m.TransferInfo = &TransferConnectionInfo{}
			}
			if err := m.TransferInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateMaxEntries", wireType)
			}
			m.UndelegateMaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndelegateMaxEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositMaxEntries", wireType)
			}
			m.DepositMaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositMaxEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIcacontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IcaAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcacontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IcaAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IcaAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIcacontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IcaConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcacontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IcaConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IcaConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIcacontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcacontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIcacontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerAddressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcacontrol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerAddressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerAddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcacontrol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerAddress = append(m.ControllerAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIcacontrol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcacontrol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIcacontrol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIcacontrol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcacontrol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIcacontrol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIcacontrol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIcacontrol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIcacontrol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIcacontrol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIcacontrol = fmt.Errorf("proto: unexpected end of group")
)
