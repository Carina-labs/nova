// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/icacontrol/v1/store.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IBCTrace struct {
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	State   uint64 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *IBCTrace) Reset()         { *m = IBCTrace{} }
func (m *IBCTrace) String() string { return proto.CompactTextString(m) }
func (*IBCTrace) ProtoMessage()    {}
func (*IBCTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_f747ac3da695793e, []int{0}
}
func (m *IBCTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCTrace.Merge(m, src)
}
func (m *IBCTrace) XXX_Size() int {
	return m.Size()
}
func (m *IBCTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCTrace.DiscardUnknown(m)
}

var xxx_messageInfo_IBCTrace proto.InternalMessageInfo

func (m *IBCTrace) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *IBCTrace) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IBCTrace) GetState() uint64 {
	if m != nil {
		return m.State
	}
	return 0
}

type VersionState struct {
	ZoneId         string               `protobuf:"bytes,1,opt,name=zoneId,proto3" json:"zoneId,omitempty"`
	CurrentVersion uint64               `protobuf:"varint,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	Record         map[uint64]*IBCTrace `protobuf:"bytes,3,rep,name=record,proto3" json:"record,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VersionState) Reset()         { *m = VersionState{} }
func (m *VersionState) String() string { return proto.CompactTextString(m) }
func (*VersionState) ProtoMessage()    {}
func (*VersionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f747ac3da695793e, []int{1}
}
func (m *VersionState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VersionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionState.Merge(m, src)
}
func (m *VersionState) XXX_Size() int {
	return m.Size()
}
func (m *VersionState) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionState.DiscardUnknown(m)
}

var xxx_messageInfo_VersionState proto.InternalMessageInfo

func (m *VersionState) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *VersionState) GetCurrentVersion() uint64 {
	if m != nil {
		return m.CurrentVersion
	}
	return 0
}

func (m *VersionState) GetRecord() map[uint64]*IBCTrace {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterType((*IBCTrace)(nil), "nova.icacontrol.v1.IBCTrace")
	proto.RegisterType((*VersionState)(nil), "nova.icacontrol.v1.VersionState")
	proto.RegisterMapType((map[uint64]*IBCTrace)(nil), "nova.icacontrol.v1.VersionState.RecordEntry")
}

func init() { proto.RegisterFile("nova/icacontrol/v1/store.proto", fileDescriptor_f747ac3da695793e) }

var fileDescriptor_f747ac3da695793e = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x31, 0x4f, 0x02, 0x31,
	0x14, 0xa6, 0x9c, 0x20, 0x16, 0xa3, 0xa6, 0x21, 0xe6, 0x42, 0x4c, 0x21, 0x2c, 0x32, 0x68, 0x1b,
	0xce, 0xc5, 0x30, 0x82, 0x0e, 0xc4, 0xed, 0x34, 0x9a, 0xb8, 0x98, 0x72, 0x34, 0xc7, 0x45, 0x6c,
	0x49, 0xaf, 0x5c, 0xc4, 0x5f, 0xe0, 0xe8, 0xe8, 0xca, 0xbf, 0x71, 0x64, 0x74, 0x34, 0xf0, 0x27,
	0x1c, 0xcd, 0xf5, 0x4a, 0xbc, 0x44, 0xb7, 0xf7, 0x7d, 0xdf, 0x7b, 0xef, 0xeb, 0xeb, 0x07, 0xb1,
	0x90, 0x09, 0xa3, 0x51, 0xc0, 0x02, 0x29, 0xb4, 0x92, 0x13, 0x9a, 0x74, 0x68, 0xac, 0xa5, 0xe2,
	0x64, 0xaa, 0xa4, 0x96, 0x08, 0xa5, 0x3a, 0xf9, 0xd5, 0x49, 0xd2, 0xa9, 0xd7, 0x42, 0x19, 0x4a,
	0x23, 0xd3, 0xb4, 0xca, 0x3a, 0x5b, 0x3e, 0xac, 0x0c, 0x7a, 0xfd, 0x1b, 0xc5, 0x02, 0x8e, 0x5c,
	0xb8, 0x9d, 0x70, 0x15, 0x47, 0x52, 0xb8, 0xa0, 0x09, 0xda, 0x5b, 0xfe, 0x06, 0xa2, 0x43, 0x58,
	0x1e, 0xf3, 0x28, 0x1c, 0x6b, 0xb7, 0x68, 0x04, 0x8b, 0x50, 0x0d, 0x96, 0x62, 0xcd, 0x34, 0x77,
	0x1d, 0x43, 0x67, 0xa0, 0xf5, 0x0d, 0xe0, 0xee, 0x6d, 0x36, 0x79, 0x9d, 0x12, 0xe9, 0xf8, 0x8b,
	0x14, 0x7c, 0x30, 0x32, 0x7b, 0x77, 0x7c, 0x8b, 0xd0, 0x31, 0xdc, 0x0f, 0x66, 0x4a, 0x71, 0xa1,
	0x1f, 0x36, 0xc6, 0xd9, 0xfe, 0x3d, 0x4b, 0xdb, 0x2d, 0xe8, 0x02, 0x96, 0x15, 0x0f, 0xa4, 0x1a,
	0xb9, 0x4e, 0xd3, 0x69, 0x57, 0xbd, 0x13, 0xf2, 0xf7, 0x40, 0x92, 0xb7, 0x24, 0xbe, 0x69, 0xbf,
	0x14, 0x5a, 0xcd, 0x7d, 0x3b, 0x5b, 0xbf, 0x83, 0xd5, 0x1c, 0x8d, 0x0e, 0xa0, 0xf3, 0xc8, 0xe7,
	0xf6, 0xd4, 0xb4, 0x44, 0x1e, 0x2c, 0x25, 0x6c, 0x32, 0xe3, 0xe6, 0x15, 0x55, 0xef, 0xe8, 0x3f,
	0x97, 0xcd, 0x6f, 0xf9, 0x59, 0x6b, 0xb7, 0x78, 0x0e, 0xba, 0x95, 0xd7, 0x45, 0x03, 0xbc, 0x2f,
	0x1a, 0xa0, 0x77, 0xf5, 0xb1, 0xc2, 0x60, 0xb9, 0xc2, 0xe0, 0x6b, 0x85, 0xc1, 0xdb, 0x1a, 0x17,
	0x96, 0x6b, 0x5c, 0xf8, 0x5c, 0xe3, 0xc2, 0x7d, 0x27, 0x8c, 0xf4, 0x78, 0x36, 0x24, 0x81, 0x7c,
	0xa2, 0x7d, 0xa6, 0x22, 0xc1, 0x4e, 0x27, 0x6c, 0x18, 0x53, 0x93, 0x64, 0xe2, 0xd1, 0xe7, 0x7c,
	0x9c, 0x7a, 0x3e, 0xe5, 0xf1, 0xb0, 0x6c, 0x22, 0x3a, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0x4b, 0x81, 0xc2, 0xee, 0x01, 0x00, 0x00,
}

func (m *IBCTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VersionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		keysForRecord := make([]uint64, 0, len(m.Record))
		for k := range m.Record {
			keysForRecord = append(keysForRecord, uint64(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint64s(keysForRecord)
		for iNdEx := len(keysForRecord) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Record[uint64(keysForRecord[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintStore(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintStore(dAtA, i, uint64(keysForRecord[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintStore(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CurrentVersion != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.CurrentVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IBCTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovStore(uint64(m.Version))
	}
	if m.Height != 0 {
		n += 1 + sovStore(uint64(m.Height))
	}
	if m.State != 0 {
		n += 1 + sovStore(uint64(m.State))
	}
	return n
}

func (m *VersionState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.CurrentVersion != 0 {
		n += 1 + sovStore(uint64(m.CurrentVersion))
	}
	if len(m.Record) > 0 {
		for k, v := range m.Record {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStore(uint64(l))
			}
			mapEntrySize := 1 + sovStore(uint64(k)) + l
			n += mapEntrySize + 1 + sovStore(uint64(mapEntrySize))
		}
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IBCTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			m.CurrentVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = make(map[uint64]*IBCTrace)
			}
			var mapkey uint64
			var mapvalue *IBCTrace
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStore
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStore
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &IBCTrace{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Record[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
