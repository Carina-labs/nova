// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/gal/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the gal module's genesis state.
type GenesisState struct {
	Params          Params            `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	DepositAccounts []*DepositAccount `protobuf:"bytes,2,rep,name=deposit_accounts,json=depositAccounts,proto3" json:"deposit_accounts,omitempty"`
	WithdrawInfo    []*WithdrawInfo   `protobuf:"bytes,3,rep,name=withdraw_info,json=withdrawInfo,proto3" json:"withdraw_info,omitempty"`
	RecordInfo      []*RecordInfo     `protobuf:"bytes,4,rep,name=record_info,json=recordInfo,proto3" json:"record_info,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetDepositAccounts() []*DepositAccount {
	if m != nil {
		return m.DepositAccounts
	}
	return nil
}

func (m *GenesisState) GetWithdrawInfo() []*WithdrawInfo {
	if m != nil {
		return m.WithdrawInfo
	}
	return nil
}

func (m *GenesisState) GetRecordInfo() []*RecordInfo {
	if m != nil {
		return m.RecordInfo
	}
	return nil
}

// DepositAccount defines snToken's total share and deposit information.
type DepositAccount struct {
	Denom           string         `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	DepositInfos    []*DepositInfo `protobuf:"bytes,2,rep,name=deposit_infos,json=depositInfos,proto3" json:"deposit_infos,omitempty"`
	TotalShare      int64          `protobuf:"varint,3,opt,name=total_share,json=totalShare,proto3" json:"total_share,omitempty"`
	LastBlockUpdate int64          `protobuf:"varint,4,opt,name=last_block_update,json=lastBlockUpdate,proto3" json:"last_block_update,omitempty"`
}

func (m *DepositAccount) Reset()         { *m = DepositAccount{} }
func (m *DepositAccount) String() string { return proto.CompactTextString(m) }
func (*DepositAccount) ProtoMessage()    {}
func (*DepositAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{1}
}
func (m *DepositAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAccount.Merge(m, src)
}
func (m *DepositAccount) XXX_Size() int {
	return m.Size()
}
func (m *DepositAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAccount.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAccount proto.InternalMessageInfo

func (m *DepositAccount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DepositAccount) GetDepositInfos() []*DepositInfo {
	if m != nil {
		return m.DepositInfos
	}
	return nil
}

func (m *DepositAccount) GetTotalShare() int64 {
	if m != nil {
		return m.TotalShare
	}
	return 0
}

func (m *DepositAccount) GetLastBlockUpdate() int64 {
	if m != nil {
		return m.LastBlockUpdate
	}
	return 0
}

// DepositInfo defines user address, share and debt.
type DepositInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Share   int64  `protobuf:"varint,2,opt,name=share,proto3" json:"share,omitempty"`
	Debt    int64  `protobuf:"varint,3,opt,name=debt,proto3" json:"debt,omitempty"`
}

func (m *DepositInfo) Reset()         { *m = DepositInfo{} }
func (m *DepositInfo) String() string { return proto.CompactTextString(m) }
func (*DepositInfo) ProtoMessage()    {}
func (*DepositInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{2}
}
func (m *DepositInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositInfo.Merge(m, src)
}
func (m *DepositInfo) XXX_Size() int {
	return m.Size()
}
func (m *DepositInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepositInfo proto.InternalMessageInfo

func (m *DepositInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DepositInfo) GetShare() int64 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *DepositInfo) GetDebt() int64 {
	if m != nil {
		return m.Debt
	}
	return 0
}

type WithdrawInfo struct {
	Address        string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom          string    `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount         int64     `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	CompletionTime time.Time `protobuf:"bytes,4,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *WithdrawInfo) Reset()         { *m = WithdrawInfo{} }
func (m *WithdrawInfo) String() string { return proto.CompactTextString(m) }
func (*WithdrawInfo) ProtoMessage()    {}
func (*WithdrawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{3}
}
func (m *WithdrawInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawInfo.Merge(m, src)
}
func (m *WithdrawInfo) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawInfo proto.InternalMessageInfo

func (m *WithdrawInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WithdrawInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *WithdrawInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WithdrawInfo) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type RecordInfo struct {
	ZoneId            string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	DelegateVersion   uint64 `protobuf:"varint,2,opt,name=delegate_version,json=delegateVersion,proto3" json:"delegate_version,omitempty"`
	UndelegateVersion uint64 `protobuf:"varint,3,opt,name=undelegate_version,json=undelegateVersion,proto3" json:"undelegate_version,omitempty"`
	WithdrawVersion   uint64 `protobuf:"varint,4,opt,name=withdraw_version,json=withdrawVersion,proto3" json:"withdraw_version,omitempty"`
}

func (m *RecordInfo) Reset()         { *m = RecordInfo{} }
func (m *RecordInfo) String() string { return proto.CompactTextString(m) }
func (*RecordInfo) ProtoMessage()    {}
func (*RecordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{4}
}
func (m *RecordInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordInfo.Merge(m, src)
}
func (m *RecordInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecordInfo proto.InternalMessageInfo

func (m *RecordInfo) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *RecordInfo) GetDelegateVersion() uint64 {
	if m != nil {
		return m.DelegateVersion
	}
	return 0
}

func (m *RecordInfo) GetUndelegateVersion() uint64 {
	if m != nil {
		return m.UndelegateVersion
	}
	return 0
}

func (m *RecordInfo) GetWithdrawVersion() uint64 {
	if m != nil {
		return m.WithdrawVersion
	}
	return 0
}

type DepositRecord struct {
	ZoneId  string                  `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Claimer string                  `protobuf:"bytes,2,opt,name=claimer,proto3" json:"claimer,omitempty"`
	Records []*DepositRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *DepositRecord) Reset()         { *m = DepositRecord{} }
func (m *DepositRecord) String() string { return proto.CompactTextString(m) }
func (*DepositRecord) ProtoMessage()    {}
func (*DepositRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{5}
}
func (m *DepositRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRecord.Merge(m, src)
}
func (m *DepositRecord) XXX_Size() int {
	return m.Size()
}
func (m *DepositRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRecord proto.InternalMessageInfo

func (m *DepositRecord) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *DepositRecord) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *DepositRecord) GetRecords() []*DepositRecordContent {
	if m != nil {
		return m.Records
	}
	return nil
}

type DepositRecordContent struct {
	Depositor       string      `protobuf:"bytes,1,opt,name=depositor,proto3" json:"depositor,omitempty"`
	Amount          *types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	State           int64       `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	OracleVersion   uint64      `protobuf:"varint,4,opt,name=oracle_version,json=oracleVersion,proto3" json:"oracle_version,omitempty"`
	DelegateVersion uint64      `protobuf:"varint,5,opt,name=delegate_version,json=delegateVersion,proto3" json:"delegate_version,omitempty"`
}

func (m *DepositRecordContent) Reset()         { *m = DepositRecordContent{} }
func (m *DepositRecordContent) String() string { return proto.CompactTextString(m) }
func (*DepositRecordContent) ProtoMessage()    {}
func (*DepositRecordContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{6}
}
func (m *DepositRecordContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRecordContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRecordContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRecordContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRecordContent.Merge(m, src)
}
func (m *DepositRecordContent) XXX_Size() int {
	return m.Size()
}
func (m *DepositRecordContent) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRecordContent.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRecordContent proto.InternalMessageInfo

func (m *DepositRecordContent) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *DepositRecordContent) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *DepositRecordContent) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *DepositRecordContent) GetOracleVersion() uint64 {
	if m != nil {
		return m.OracleVersion
	}
	return 0
}

func (m *DepositRecordContent) GetDelegateVersion() uint64 {
	if m != nil {
		return m.DelegateVersion
	}
	return 0
}

type UndelegateRecord struct {
	ZoneId    string                     `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Delegator string                     `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Records   []*UndelegateRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *UndelegateRecord) Reset()         { *m = UndelegateRecord{} }
func (m *UndelegateRecord) String() string { return proto.CompactTextString(m) }
func (*UndelegateRecord) ProtoMessage()    {}
func (*UndelegateRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{7}
}
func (m *UndelegateRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegateRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegateRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegateRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegateRecord.Merge(m, src)
}
func (m *UndelegateRecord) XXX_Size() int {
	return m.Size()
}
func (m *UndelegateRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegateRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegateRecord proto.InternalMessageInfo

func (m *UndelegateRecord) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *UndelegateRecord) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *UndelegateRecord) GetRecords() []*UndelegateRecordContent {
	if m != nil {
		return m.Records
	}
	return nil
}

type UndelegateRecordContent struct {
	Withdrawer        string      `protobuf:"bytes,1,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	SnAssetAmount     *types.Coin `protobuf:"bytes,2,opt,name=sn_asset_amount,json=snAssetAmount,proto3" json:"sn_asset_amount,omitempty"`
	WithdrawAmount    *types.Coin `protobuf:"bytes,3,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
	State             int64       `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	OracleVersion     uint64      `protobuf:"varint,5,opt,name=oracle_version,json=oracleVersion,proto3" json:"oracle_version,omitempty"`
	UndelegateVersion uint64      `protobuf:"varint,6,opt,name=undelegate_version,json=undelegateVersion,proto3" json:"undelegate_version,omitempty"`
}

func (m *UndelegateRecordContent) Reset()         { *m = UndelegateRecordContent{} }
func (m *UndelegateRecordContent) String() string { return proto.CompactTextString(m) }
func (*UndelegateRecordContent) ProtoMessage()    {}
func (*UndelegateRecordContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{8}
}
func (m *UndelegateRecordContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegateRecordContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegateRecordContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegateRecordContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegateRecordContent.Merge(m, src)
}
func (m *UndelegateRecordContent) XXX_Size() int {
	return m.Size()
}
func (m *UndelegateRecordContent) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegateRecordContent.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegateRecordContent proto.InternalMessageInfo

func (m *UndelegateRecordContent) GetWithdrawer() string {
	if m != nil {
		return m.Withdrawer
	}
	return ""
}

func (m *UndelegateRecordContent) GetSnAssetAmount() *types.Coin {
	if m != nil {
		return m.SnAssetAmount
	}
	return nil
}

func (m *UndelegateRecordContent) GetWithdrawAmount() *types.Coin {
	if m != nil {
		return m.WithdrawAmount
	}
	return nil
}

func (m *UndelegateRecordContent) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UndelegateRecordContent) GetOracleVersion() uint64 {
	if m != nil {
		return m.OracleVersion
	}
	return 0
}

func (m *UndelegateRecordContent) GetUndelegateVersion() uint64 {
	if m != nil {
		return m.UndelegateVersion
	}
	return 0
}

type WithdrawRecord struct {
	ZoneId     string                            `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Withdrawer string                            `protobuf:"bytes,2,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	Records    map[uint64]*WithdrawRecordContent `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *WithdrawRecord) Reset()         { *m = WithdrawRecord{} }
func (m *WithdrawRecord) String() string { return proto.CompactTextString(m) }
func (*WithdrawRecord) ProtoMessage()    {}
func (*WithdrawRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{9}
}
func (m *WithdrawRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRecord.Merge(m, src)
}
func (m *WithdrawRecord) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRecord proto.InternalMessageInfo

func (m *WithdrawRecord) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *WithdrawRecord) GetWithdrawer() string {
	if m != nil {
		return m.Withdrawer
	}
	return ""
}

func (m *WithdrawRecord) GetRecords() map[uint64]*WithdrawRecordContent {
	if m != nil {
		return m.Records
	}
	return nil
}

type WithdrawRecordContent struct {
	Amount          *types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	State           int64       `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	OracleVersion   int64       `protobuf:"varint,3,opt,name=oracle_version,json=oracleVersion,proto3" json:"oracle_version,omitempty"`
	WithdrawVersion uint64      `protobuf:"varint,4,opt,name=withdraw_version,json=withdrawVersion,proto3" json:"withdraw_version,omitempty"`
	CompletionTime  time.Time   `protobuf:"bytes,5,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *WithdrawRecordContent) Reset()         { *m = WithdrawRecordContent{} }
func (m *WithdrawRecordContent) String() string { return proto.CompactTextString(m) }
func (*WithdrawRecordContent) ProtoMessage()    {}
func (*WithdrawRecordContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc8782bb5a532a, []int{10}
}
func (m *WithdrawRecordContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRecordContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRecordContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRecordContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRecordContent.Merge(m, src)
}
func (m *WithdrawRecordContent) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRecordContent) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRecordContent.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRecordContent proto.InternalMessageInfo

func (m *WithdrawRecordContent) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *WithdrawRecordContent) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *WithdrawRecordContent) GetOracleVersion() int64 {
	if m != nil {
		return m.OracleVersion
	}
	return 0
}

func (m *WithdrawRecordContent) GetWithdrawVersion() uint64 {
	if m != nil {
		return m.WithdrawVersion
	}
	return 0
}

func (m *WithdrawRecordContent) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "nova.gal.v1.GenesisState")
	proto.RegisterType((*DepositAccount)(nil), "nova.gal.v1.DepositAccount")
	proto.RegisterType((*DepositInfo)(nil), "nova.gal.v1.DepositInfo")
	proto.RegisterType((*WithdrawInfo)(nil), "nova.gal.v1.WithdrawInfo")
	proto.RegisterType((*RecordInfo)(nil), "nova.gal.v1.RecordInfo")
	proto.RegisterType((*DepositRecord)(nil), "nova.gal.v1.DepositRecord")
	proto.RegisterType((*DepositRecordContent)(nil), "nova.gal.v1.DepositRecordContent")
	proto.RegisterType((*UndelegateRecord)(nil), "nova.gal.v1.UndelegateRecord")
	proto.RegisterType((*UndelegateRecordContent)(nil), "nova.gal.v1.UndelegateRecordContent")
	proto.RegisterType((*WithdrawRecord)(nil), "nova.gal.v1.WithdrawRecord")
	proto.RegisterMapType((map[uint64]*WithdrawRecordContent)(nil), "nova.gal.v1.WithdrawRecord.RecordsEntry")
	proto.RegisterType((*WithdrawRecordContent)(nil), "nova.gal.v1.WithdrawRecordContent")
}

func init() { proto.RegisterFile("nova/gal/v1/genesis.proto", fileDescriptor_44fc8782bb5a532a) }

var fileDescriptor_44fc8782bb5a532a = []byte{
	// 945 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x9d, 0x3f, 0x65, 0x5f, 0x9a, 0xb4, 0x3b, 0x2c, 0x34, 0x2d, 0x28, 0x2d, 0x16, 0x88,
	0x2e, 0xd2, 0xda, 0x4a, 0xb9, 0x54, 0x20, 0x56, 0x4a, 0xca, 0x1f, 0xed, 0x01, 0x09, 0xbc, 0x2c,
	0x48, 0x1c, 0xb0, 0x26, 0xf6, 0xd4, 0xb5, 0xd6, 0x9e, 0x89, 0x3c, 0x93, 0x94, 0x72, 0x41, 0x88,
	0x13, 0xb7, 0xfd, 0x12, 0x5c, 0x10, 0x27, 0x3e, 0xc5, 0xde, 0xd8, 0x23, 0x27, 0x40, 0xed, 0x99,
	0xef, 0x80, 0xe6, 0x8f, 0x13, 0x27, 0x71, 0xb3, 0x0b, 0x37, 0xbf, 0xf7, 0x7e, 0xef, 0xcd, 0x9b,
	0xdf, 0xef, 0xcd, 0x4b, 0x60, 0x8f, 0xb2, 0x29, 0xf6, 0x62, 0x9c, 0x7a, 0xd3, 0xbe, 0x17, 0x13,
	0x4a, 0x78, 0xc2, 0xdd, 0x71, 0xce, 0x04, 0x43, 0x2d, 0x19, 0x72, 0x63, 0x9c, 0xba, 0xd3, 0xfe,
	0x7e, 0xb7, 0x8c, 0x1b, 0xe3, 0x1c, 0x67, 0x06, 0xb6, 0x7f, 0x27, 0x66, 0x31, 0x53, 0x9f, 0x9e,
	0xfc, 0x32, 0xde, 0xbd, 0x98, 0xb1, 0x38, 0x25, 0x9e, 0xb2, 0x46, 0x93, 0x33, 0x0f, 0xd3, 0x4b,
	0x13, 0x3a, 0x58, 0x0e, 0x89, 0x24, 0x23, 0x5c, 0xe0, 0x6c, 0x5c, 0xe4, 0x86, 0x8c, 0x67, 0x8c,
	0x07, 0xba, 0xa8, 0x36, 0x4c, 0xa8, 0xa7, 0x2d, 0x6f, 0x84, 0x39, 0xf1, 0xa6, 0xfd, 0x11, 0x11,
	0xb8, 0xef, 0x85, 0x2c, 0xa1, 0x3a, 0xee, 0xfc, 0x68, 0xc3, 0xd6, 0x27, 0xfa, 0x16, 0x0f, 0x05,
	0x16, 0x04, 0xf5, 0xa1, 0xa9, 0xbb, 0xed, 0x5a, 0x87, 0xd6, 0x51, 0xeb, 0xf8, 0x65, 0xb7, 0x74,
	0x2b, 0xf7, 0x33, 0x15, 0x1a, 0xd6, 0x9f, 0xfe, 0x79, 0xb0, 0xe1, 0x1b, 0x20, 0xfa, 0x18, 0x76,
	0x22, 0x32, 0x66, 0x3c, 0x11, 0x01, 0x0e, 0x43, 0x36, 0xa1, 0x82, 0x77, 0xed, 0xc3, 0xda, 0x51,
	0xeb, 0xf8, 0xb5, 0x85, 0xe4, 0x0f, 0x35, 0x68, 0xa0, 0x31, 0xfe, 0x76, 0xb4, 0x60, 0x73, 0x74,
	0x1f, 0xda, 0x17, 0x89, 0x38, 0x8f, 0x72, 0x7c, 0x11, 0x24, 0xf4, 0x8c, 0x75, 0x6b, 0xaa, 0xc8,
	0xde, 0x42, 0x91, 0xaf, 0x0c, 0xe2, 0x01, 0x3d, 0x63, 0xfe, 0xd6, 0x45, 0xc9, 0x42, 0x27, 0xd0,
	0xca, 0x49, 0xc8, 0xf2, 0x48, 0x67, 0xd7, 0x55, 0xf6, 0xee, 0x42, 0xb6, 0xaf, 0xe2, 0x2a, 0x17,
	0xf2, 0xd9, 0xb7, 0xf3, 0x9b, 0x05, 0x9d, 0xc5, 0xee, 0xd0, 0x1d, 0x68, 0x44, 0x84, 0xb2, 0x4c,
	0xd1, 0x70, 0xcb, 0xd7, 0x06, 0xfa, 0x00, 0xda, 0xc5, 0x55, 0xe5, 0x19, 0xc5, 0x3d, 0xbb, 0x55,
	0xf7, 0xd4, 0x1d, 0x46, 0x73, 0x83, 0xa3, 0x03, 0x68, 0x09, 0x26, 0x70, 0x1a, 0xf0, 0x73, 0x9c,
	0x93, 0x6e, 0xed, 0xd0, 0x3a, 0xaa, 0xf9, 0xa0, 0x5c, 0x0f, 0xa5, 0x07, 0xbd, 0x03, 0xb7, 0x53,
	0xcc, 0x45, 0x30, 0x4a, 0x59, 0xf8, 0x38, 0x98, 0x8c, 0x23, 0x2c, 0x48, 0xb7, 0xae, 0x60, 0xdb,
	0x32, 0x30, 0x94, 0xfe, 0x47, 0xca, 0xed, 0x7c, 0x0e, 0xad, 0xd2, 0x49, 0xa8, 0x0b, 0x9b, 0x38,
	0x8a, 0x72, 0xc2, 0xb9, 0x69, 0xb9, 0x30, 0xe5, 0x55, 0xf4, 0x79, 0xb6, 0x2a, 0xa4, 0x0d, 0x84,
	0xa0, 0x1e, 0x91, 0x91, 0x30, 0x4d, 0xa8, 0x6f, 0xe7, 0x67, 0x0b, 0xb6, 0xca, 0x04, 0xaf, 0x2f,
	0xaa, 0xf9, 0xb1, 0xcb, 0xfc, 0xbc, 0x0a, 0x4d, 0x9c, 0x49, 0xfe, 0x4c, 0x59, 0x63, 0xa1, 0x4f,
	0x61, 0x3b, 0x64, 0xd9, 0x38, 0x25, 0x22, 0x61, 0x34, 0x90, 0xf3, 0xab, 0x6e, 0xd5, 0x3a, 0xde,
	0x77, 0xf5, 0x70, 0xbb, 0xc5, 0x70, 0xbb, 0x5f, 0x14, 0xc3, 0x3d, 0x7c, 0x49, 0x4e, 0xd9, 0x93,
	0xbf, 0x0e, 0x2c, 0xbf, 0x33, 0x4f, 0x96, 0x61, 0xe7, 0x17, 0x0b, 0x60, 0x2e, 0x25, 0xda, 0x85,
	0xcd, 0xef, 0x18, 0x25, 0x41, 0x12, 0x99, 0x2e, 0x9b, 0xd2, 0x7c, 0x10, 0xa1, 0xbb, 0x72, 0x32,
	0x53, 0x12, 0x63, 0x41, 0x82, 0x29, 0xc9, 0x79, 0xc2, 0xa8, 0xea, 0xb7, 0x2e, 0x87, 0x4f, 0xfb,
	0xbf, 0xd4, 0x6e, 0x74, 0x0f, 0xd0, 0x84, 0xae, 0x80, 0x6b, 0x0a, 0x7c, 0x7b, 0x1e, 0x29, 0xe0,
	0x77, 0x61, 0x67, 0x36, 0xab, 0x05, 0xb8, 0xae, 0x2b, 0x17, 0x7e, 0x03, 0x75, 0xbe, 0x87, 0xb6,
	0xd1, 0x49, 0xb7, 0x7c, 0x73, 0xbb, 0x5d, 0xd8, 0x0c, 0x53, 0x9c, 0x64, 0x24, 0x37, 0xac, 0x16,
	0x26, 0x7a, 0x1f, 0x36, 0xf5, 0xb8, 0x72, 0xf3, 0x28, 0xde, 0xa8, 0x9a, 0x38, 0x5d, 0xff, 0x94,
	0x51, 0x41, 0xa8, 0xf0, 0x8b, 0x0c, 0xe7, 0x77, 0x0b, 0xee, 0x54, 0x21, 0xd0, 0xeb, 0x70, 0xcb,
	0x8c, 0x27, 0xcb, 0x4d, 0x2b, 0x73, 0x87, 0xdc, 0x04, 0x46, 0x4b, 0x5b, 0x49, 0xb5, 0xe7, 0x9a,
	0xcd, 0x22, 0x77, 0x89, 0x6b, 0x76, 0x89, 0x7b, 0xca, 0x12, 0x3a, 0x93, 0x59, 0x4e, 0x9a, 0xdc,
	0x22, 0x46, 0x7d, 0x6d, 0xa0, 0xb7, 0xa0, 0xc3, 0x72, 0x1c, 0xa6, 0x64, 0x89, 0xa9, 0xb6, 0xf6,
	0x96, 0x28, 0x5d, 0xe1, 0xbf, 0x51, 0x29, 0x96, 0xf3, 0x93, 0x05, 0x3b, 0x8f, 0x66, 0x9a, 0x3c,
	0x8f, 0x56, 0x75, 0x4d, 0x05, 0x65, 0x05, 0xb1, 0x73, 0x07, 0xba, 0xbf, 0x4c, 0xed, 0x9b, 0x0b,
	0xd4, 0x2e, 0x1f, 0xb3, 0xc2, 0xee, 0xaf, 0x36, 0xec, 0xde, 0x00, 0x42, 0x3d, 0x80, 0x62, 0x1a,
	0x48, 0xc1, 0x70, 0xc9, 0x83, 0x06, 0xb0, 0xcd, 0x69, 0x80, 0x39, 0x27, 0x22, 0x78, 0x51, 0xae,
	0xdb, 0x9c, 0x0e, 0x64, 0xc2, 0x40, 0x53, 0x3e, 0x84, 0xd9, 0xc0, 0x05, 0xa5, 0xa7, 0xb7, 0xb6,
	0x44, 0xa7, 0xc8, 0x18, 0x2c, 0xc9, 0x56, 0x5f, 0x2f, 0x5b, 0xa3, 0x4a, 0xb6, 0xea, 0x87, 0xd3,
	0xbc, 0xe1, 0xe1, 0x38, 0xff, 0x58, 0xd0, 0x29, 0x56, 0xcc, 0xf3, 0x84, 0x5b, 0xa4, 0xcf, 0x5e,
	0xa1, 0x6f, 0xb8, 0x2c, 0xdd, 0x51, 0xe5, 0x4f, 0x85, 0x3e, 0xc6, 0xec, 0x7e, 0xfe, 0x11, 0x15,
	0xf9, 0xe5, 0x4c, 0xbe, 0xfd, 0x6f, 0x60, 0xab, 0x1c, 0x40, 0x3b, 0x50, 0x7b, 0x4c, 0x2e, 0x55,
	0x23, 0x75, 0x5f, 0x7e, 0xa2, 0x13, 0x68, 0x4c, 0x71, 0x3a, 0x21, 0x46, 0x1a, 0x67, 0xcd, 0x19,
	0xc5, 0x70, 0xe8, 0x84, 0xf7, 0xec, 0x13, 0xcb, 0xf9, 0xc1, 0x86, 0x57, 0x2a, 0x41, 0xa5, 0xf7,
	0x65, 0xfd, 0xe7, 0xf7, 0x65, 0xaf, 0x17, 0x4a, 0x3f, 0xbf, 0xd5, 0xf7, 0xf5, 0x82, 0x2b, 0xab,
	0x6a, 0x5d, 0x37, 0xfe, 0xff, 0xba, 0x1e, 0x0e, 0x9e, 0x5e, 0xf5, 0xac, 0x67, 0x57, 0x3d, 0xeb,
	0xef, 0xab, 0x9e, 0xf5, 0xe4, 0xba, 0xb7, 0xf1, 0xec, 0xba, 0xb7, 0xf1, 0xc7, 0x75, 0x6f, 0xe3,
	0xeb, 0xb7, 0xe3, 0x44, 0x9c, 0x4f, 0x46, 0x6e, 0xc8, 0x32, 0xef, 0x14, 0xe7, 0x09, 0xc5, 0xf7,
	0x52, 0x3c, 0xe2, 0x9e, 0xfa, 0xf3, 0xf4, 0xad, 0xfa, 0xfb, 0x24, 0x2e, 0xc7, 0x84, 0x8f, 0x9a,
	0xea, 0xc0, 0x77, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xe6, 0x84, 0xfe, 0x7f, 0x09, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordInfo) > 0 {
		for iNdEx := len(m.RecordInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.WithdrawInfo) > 0 {
		for iNdEx := len(m.WithdrawInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DepositAccounts) > 0 {
		for iNdEx := len(m.DepositAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DepositAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBlockUpdate != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastBlockUpdate))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalShare != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TotalShare))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DepositInfos) > 0 {
		for iNdEx := len(m.DepositInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Debt != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Debt))
		i--
		dAtA[i] = 0x18
	}
	if m.Share != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGenesis(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if m.Amount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.WithdrawVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.UndelegateVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UndelegateVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.DelegateVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegateVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositRecordContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRecordContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRecordContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegateVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegateVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.OracleVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OracleVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegateRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegateRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegateRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegateRecordContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegateRecordContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegateRecordContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UndelegateVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UndelegateVersion))
		i--
		dAtA[i] = 0x30
	}
	if m.OracleVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OracleVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.WithdrawAmount != nil {
		{
			size, err := m.WithdrawAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SnAssetAmount != nil {
		{
			size, err := m.SnAssetAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for k := range m.Records {
			v := m.Records[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGenesis(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawRecordContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRecordContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRecordContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGenesis(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	if m.WithdrawVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.WithdrawVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.OracleVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OracleVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.DepositAccounts) > 0 {
		for _, e := range m.DepositAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WithdrawInfo) > 0 {
		for _, e := range m.WithdrawInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RecordInfo) > 0 {
		for _, e := range m.RecordInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DepositAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DepositInfos) > 0 {
		for _, e := range m.DepositInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.TotalShare != 0 {
		n += 1 + sovGenesis(uint64(m.TotalShare))
	}
	if m.LastBlockUpdate != 0 {
		n += 1 + sovGenesis(uint64(m.LastBlockUpdate))
	}
	return n
}

func (m *DepositInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Share != 0 {
		n += 1 + sovGenesis(uint64(m.Share))
	}
	if m.Debt != 0 {
		n += 1 + sovGenesis(uint64(m.Debt))
	}
	return n
}

func (m *WithdrawInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovGenesis(uint64(m.Amount))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *RecordInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DelegateVersion != 0 {
		n += 1 + sovGenesis(uint64(m.DelegateVersion))
	}
	if m.UndelegateVersion != 0 {
		n += 1 + sovGenesis(uint64(m.UndelegateVersion))
	}
	if m.WithdrawVersion != 0 {
		n += 1 + sovGenesis(uint64(m.WithdrawVersion))
	}
	return n
}

func (m *DepositRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DepositRecordContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGenesis(uint64(m.State))
	}
	if m.OracleVersion != 0 {
		n += 1 + sovGenesis(uint64(m.OracleVersion))
	}
	if m.DelegateVersion != 0 {
		n += 1 + sovGenesis(uint64(m.DelegateVersion))
	}
	return n
}

func (m *UndelegateRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *UndelegateRecordContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.SnAssetAmount != nil {
		l = m.SnAssetAmount.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.WithdrawAmount != nil {
		l = m.WithdrawAmount.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGenesis(uint64(m.State))
	}
	if m.OracleVersion != 0 {
		n += 1 + sovGenesis(uint64(m.OracleVersion))
	}
	if m.UndelegateVersion != 0 {
		n += 1 + sovGenesis(uint64(m.UndelegateVersion))
	}
	return n
}

func (m *WithdrawRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenesis(uint64(l))
			}
			mapEntrySize := 1 + sovGenesis(uint64(k)) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WithdrawRecordContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGenesis(uint64(m.State))
	}
	if m.OracleVersion != 0 {
		n += 1 + sovGenesis(uint64(m.OracleVersion))
	}
	if m.WithdrawVersion != 0 {
		n += 1 + sovGenesis(uint64(m.WithdrawVersion))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositAccounts = append(m.DepositAccounts, &DepositAccount{})
			if err := m.DepositAccounts[len(m.DepositAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawInfo = append(m.WithdrawInfo, &WithdrawInfo{})
			if err := m.WithdrawInfo[len(m.WithdrawInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordInfo = append(m.RecordInfo, &RecordInfo{})
			if err := m.RecordInfo[len(m.RecordInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositInfos = append(m.DepositInfos, &DepositInfo{})
			if err := m.DepositInfos[len(m.DepositInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShare", wireType)
			}
			m.TotalShare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShare |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockUpdate", wireType)
			}
			m.LastBlockUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debt", wireType)
			}
			m.Debt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Debt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateVersion", wireType)
			}
			m.DelegateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateVersion", wireType)
			}
			m.UndelegateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndelegateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawVersion", wireType)
			}
			m.WithdrawVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &DepositRecordContent{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRecordContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRecordContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleVersion", wireType)
			}
			m.OracleVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateVersion", wireType)
			}
			m.DelegateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegateRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegateRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegateRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &UndelegateRecordContent{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegateRecordContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegateRecordContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegateRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnAssetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnAssetAmount == nil {
				m.SnAssetAmount = &types.Coin{}
			}
			if err := m.SnAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawAmount == nil {
				m.WithdrawAmount = &types.Coin{}
			}
			if err := m.WithdrawAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleVersion", wireType)
			}
			m.OracleVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateVersion", wireType)
			}
			m.UndelegateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndelegateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[uint64]*WithdrawRecordContent)
			}
			var mapkey uint64
			var mapvalue *WithdrawRecordContent
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WithdrawRecordContent{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRecordContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRecordContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRecordContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleVersion", wireType)
			}
			m.OracleVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawVersion", wireType)
			}
			m.WithdrawVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
